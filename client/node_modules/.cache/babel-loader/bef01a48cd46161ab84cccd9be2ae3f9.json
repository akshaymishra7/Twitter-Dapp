{"ast":null,"code":"'use strict';\n\nconst {\n  AbstractIterator,\n  AbstractKeyIterator,\n  AbstractValueIterator\n} = require('../abstract-iterator');\n\nconst ModuleError = require('module-error');\n\nconst kNut = Symbol('nut');\nconst kUndefer = Symbol('undefer');\nconst kFactory = Symbol('factory');\n\nclass DeferredIterator extends AbstractIterator {\n  constructor(db, options) {\n    super(db, options);\n    this[kNut] = null;\n\n    this[kFactory] = () => db.iterator(options);\n\n    this.db.defer(() => this[kUndefer]());\n  }\n\n}\n\nclass DeferredKeyIterator extends AbstractKeyIterator {\n  constructor(db, options) {\n    super(db, options);\n    this[kNut] = null;\n\n    this[kFactory] = () => db.keys(options);\n\n    this.db.defer(() => this[kUndefer]());\n  }\n\n}\n\nclass DeferredValueIterator extends AbstractValueIterator {\n  constructor(db, options) {\n    super(db, options);\n    this[kNut] = null;\n\n    this[kFactory] = () => db.values(options);\n\n    this.db.defer(() => this[kUndefer]());\n  }\n\n}\n\nfor (const Iterator of [DeferredIterator, DeferredKeyIterator, DeferredValueIterator]) {\n  Iterator.prototype[kUndefer] = function () {\n    if (this.db.status === 'open') {\n      this[kNut] = this[kFactory]();\n    }\n  };\n\n  Iterator.prototype._next = function (callback) {\n    if (this[kNut] !== null) {\n      this[kNut].next(callback);\n    } else if (this.db.status === 'opening') {\n      this.db.defer(() => this._next(callback));\n    } else {\n      this.nextTick(callback, new ModuleError('Iterator is not open: cannot call next() after close()', {\n        code: 'LEVEL_ITERATOR_NOT_OPEN'\n      }));\n    }\n  };\n\n  Iterator.prototype._nextv = function (size, options, callback) {\n    if (this[kNut] !== null) {\n      this[kNut].nextv(size, options, callback);\n    } else if (this.db.status === 'opening') {\n      this.db.defer(() => this._nextv(size, options, callback));\n    } else {\n      this.nextTick(callback, new ModuleError('Iterator is not open: cannot call nextv() after close()', {\n        code: 'LEVEL_ITERATOR_NOT_OPEN'\n      }));\n    }\n  };\n\n  Iterator.prototype._all = function (options, callback) {\n    if (this[kNut] !== null) {\n      this[kNut].all(callback);\n    } else if (this.db.status === 'opening') {\n      this.db.defer(() => this._all(options, callback));\n    } else {\n      this.nextTick(callback, new ModuleError('Iterator is not open: cannot call all() after close()', {\n        code: 'LEVEL_ITERATOR_NOT_OPEN'\n      }));\n    }\n  };\n\n  Iterator.prototype._seek = function (target, options) {\n    if (this[kNut] !== null) {\n      // TODO: explain why we need _seek() rather than seek() here\n      this[kNut]._seek(target, options);\n    } else if (this.db.status === 'opening') {\n      this.db.defer(() => this._seek(target, options));\n    }\n  };\n\n  Iterator.prototype._close = function (callback) {\n    if (this[kNut] !== null) {\n      this[kNut].close(callback);\n    } else if (this.db.status === 'opening') {\n      this.db.defer(() => this._close(callback));\n    } else {\n      this.nextTick(callback);\n    }\n  };\n}\n\nexports.DeferredIterator = DeferredIterator;\nexports.DeferredKeyIterator = DeferredKeyIterator;\nexports.DeferredValueIterator = DeferredValueIterator;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/abstract-level/lib/deferred-iterator.js"],"names":["AbstractIterator","AbstractKeyIterator","AbstractValueIterator","require","ModuleError","kNut","Symbol","kUndefer","kFactory","DeferredIterator","constructor","db","options","iterator","defer","DeferredKeyIterator","keys","DeferredValueIterator","values","Iterator","prototype","status","_next","callback","next","nextTick","code","_nextv","size","nextv","_all","all","_seek","target","_close","close","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { AbstractIterator, AbstractKeyIterator, AbstractValueIterator } = require('../abstract-iterator')\nconst ModuleError = require('module-error')\n\nconst kNut = Symbol('nut')\nconst kUndefer = Symbol('undefer')\nconst kFactory = Symbol('factory')\n\nclass DeferredIterator extends AbstractIterator {\n  constructor (db, options) {\n    super(db, options)\n\n    this[kNut] = null\n    this[kFactory] = () => db.iterator(options)\n\n    this.db.defer(() => this[kUndefer]())\n  }\n}\n\nclass DeferredKeyIterator extends AbstractKeyIterator {\n  constructor (db, options) {\n    super(db, options)\n\n    this[kNut] = null\n    this[kFactory] = () => db.keys(options)\n\n    this.db.defer(() => this[kUndefer]())\n  }\n}\n\nclass DeferredValueIterator extends AbstractValueIterator {\n  constructor (db, options) {\n    super(db, options)\n\n    this[kNut] = null\n    this[kFactory] = () => db.values(options)\n\n    this.db.defer(() => this[kUndefer]())\n  }\n}\n\nfor (const Iterator of [DeferredIterator, DeferredKeyIterator, DeferredValueIterator]) {\n  Iterator.prototype[kUndefer] = function () {\n    if (this.db.status === 'open') {\n      this[kNut] = this[kFactory]()\n    }\n  }\n\n  Iterator.prototype._next = function (callback) {\n    if (this[kNut] !== null) {\n      this[kNut].next(callback)\n    } else if (this.db.status === 'opening') {\n      this.db.defer(() => this._next(callback))\n    } else {\n      this.nextTick(callback, new ModuleError('Iterator is not open: cannot call next() after close()', {\n        code: 'LEVEL_ITERATOR_NOT_OPEN'\n      }))\n    }\n  }\n\n  Iterator.prototype._nextv = function (size, options, callback) {\n    if (this[kNut] !== null) {\n      this[kNut].nextv(size, options, callback)\n    } else if (this.db.status === 'opening') {\n      this.db.defer(() => this._nextv(size, options, callback))\n    } else {\n      this.nextTick(callback, new ModuleError('Iterator is not open: cannot call nextv() after close()', {\n        code: 'LEVEL_ITERATOR_NOT_OPEN'\n      }))\n    }\n  }\n\n  Iterator.prototype._all = function (options, callback) {\n    if (this[kNut] !== null) {\n      this[kNut].all(callback)\n    } else if (this.db.status === 'opening') {\n      this.db.defer(() => this._all(options, callback))\n    } else {\n      this.nextTick(callback, new ModuleError('Iterator is not open: cannot call all() after close()', {\n        code: 'LEVEL_ITERATOR_NOT_OPEN'\n      }))\n    }\n  }\n\n  Iterator.prototype._seek = function (target, options) {\n    if (this[kNut] !== null) {\n      // TODO: explain why we need _seek() rather than seek() here\n      this[kNut]._seek(target, options)\n    } else if (this.db.status === 'opening') {\n      this.db.defer(() => this._seek(target, options))\n    }\n  }\n\n  Iterator.prototype._close = function (callback) {\n    if (this[kNut] !== null) {\n      this[kNut].close(callback)\n    } else if (this.db.status === 'opening') {\n      this.db.defer(() => this._close(callback))\n    } else {\n      this.nextTick(callback)\n    }\n  }\n}\n\nexports.DeferredIterator = DeferredIterator\nexports.DeferredKeyIterator = DeferredKeyIterator\nexports.DeferredValueIterator = DeferredValueIterator\n"]},"metadata":{},"sourceType":"script"}