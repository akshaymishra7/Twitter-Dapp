{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { repoVersion } from 'ipfs-repo/constants';\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\nexport function createVersion(_ref) {\n  let {\n    repo\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"version\"]}\n   */\n  async function version() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    try {\n      // @ts-expect-error - not a public API\n      await repo._checkInitialized(options);\n    } catch (\n    /** @type {any} */\n    err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [/Key not found in database \\[\\/version\\]/, /ENOENT/, /repo is not initialized yet/].some(m => {\n        return m.test(err.message);\n      });\n\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion;\n      }\n\n      throw err;\n    }\n\n    return repo.version.get();\n  }\n\n  return withTimeoutOption(version);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/repo/version.js"],"names":["withTimeoutOption","repoVersion","createVersion","repo","version","options","_checkInitialized","err","match","some","m","test","message","get"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qCAAlC;AACA,SAASC,WAAT,QAA4B,qBAA5B;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,OAAkC;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;;AACvC;AACF;AACA;AACE,iBAAeC,OAAf,GAAsC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACpC,QAAI;AACF;AACA,YAAMF,IAAI,CAACG,iBAAL,CAAuBD,OAAvB,CAAN;AACD,KAHD,CAGE;AAAO;AAAmBE,IAAAA,GAA1B,EAA+B;AAC/B;AACA,YAAMC,KAAK,GAAG,CACZ,yCADY,EAEZ,QAFY,EAGZ,6BAHY,EAIZC,IAJY,CAINC,CAAD,IAAO;AACZ,eAAOA,CAAC,CAACC,IAAF,CAAOJ,GAAG,CAACK,OAAX,CAAP;AACD,OANa,CAAd;;AAOA,UAAIJ,KAAJ,EAAW;AACT;AACA,eAAOP,WAAP;AACD;;AACD,YAAMM,GAAN;AACD;;AAED,WAAOJ,IAAI,CAACC,OAAL,CAAaS,GAAb,EAAP;AACD;;AAED,SAAOb,iBAAiB,CAACI,OAAD,CAAxB;AACD","sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { repoVersion } from 'ipfs-repo/constants'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createVersion ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"version\"]}\n   */\n  async function version (options = {}) {\n    try {\n      // @ts-expect-error - not a public API\n      await repo._checkInitialized(options)\n    } catch (/** @type {any} */ err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [\n        /Key not found in database \\[\\/version\\]/,\n        /ENOENT/,\n        /repo is not initialized yet/\n      ].some((m) => {\n        return m.test(err.message)\n      })\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion\n      }\n      throw err\n    }\n\n    return repo.version.get()\n  }\n\n  return withTimeoutOption(version)\n}\n"]},"metadata":{},"sourceType":"module"}