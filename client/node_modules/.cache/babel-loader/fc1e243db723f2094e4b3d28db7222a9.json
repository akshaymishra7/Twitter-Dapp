{"ast":null,"code":"import { ERR_INVALID_PEER_SCORE_THRESHOLDS } from './constants.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\nexport const defaultPeerScoreThresholds = {\n  gossipThreshold: -10,\n  publishThreshold: -50,\n  graylistThreshold: -80,\n  acceptPXThreshold: 10,\n  opportunisticGraftThreshold: 20\n};\nexport function createPeerScoreThresholds() {\n  let p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return { ...defaultPeerScoreThresholds,\n    ...p\n  };\n}\nexport function validatePeerScoreThresholds(p) {\n  if (p.gossipThreshold > 0) {\n    throw new CodeError('invalid gossip threshold; it must be <= 0', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n  }\n\n  if (p.publishThreshold > 0 || p.publishThreshold > p.gossipThreshold) {\n    throw new CodeError('invalid publish threshold; it must be <= 0 and <= gossip threshold', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n  }\n\n  if (p.graylistThreshold > 0 || p.graylistThreshold > p.publishThreshold) {\n    throw new CodeError('invalid graylist threshold; it must be <= 0 and <= publish threshold', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n  }\n\n  if (p.acceptPXThreshold < 0) {\n    throw new CodeError('invalid accept PX threshold; it must be >= 0', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n  }\n\n  if (p.opportunisticGraftThreshold < 0) {\n    throw new CodeError('invalid opportunistic grafting threshold; it must be >= 0', ERR_INVALID_PEER_SCORE_THRESHOLDS);\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,iCAAT,QAAkD,gBAAlD;AACA,SAASC,SAAT,QAA0B,2BAA1B;AAsCA,OAAO,MAAMC,0BAA0B,GAAwB;AAC7DC,iBAAe,EAAE,CAAC,EAD2C;AAE7DC,kBAAgB,EAAE,CAAC,EAF0C;AAG7DC,mBAAiB,EAAE,CAAC,EAHyC;AAI7DC,mBAAiB,EAAE,EAJ0C;AAK7DC,6BAA2B,EAAE;AALgC,CAAxD;AAQP,OAAM,SAAUC,yBAAV,GAAwE;AAAA,MAApCC,CAAoC,uEAAF,EAAE;AAC5E,SAAO,EACL,GAAGP,0BADE;AAEL,OAAGO;AAFE,GAAP;AAID;AAED,OAAM,SAAUC,2BAAV,CAAsCD,CAAtC,EAA4D;AAChE,MAAIA,CAAC,CAACN,eAAF,GAAoB,CAAxB,EAA2B;AACzB,UAAM,IAAIF,SAAJ,CAAc,2CAAd,EAA2DD,iCAA3D,CAAN;AACD;;AACD,MAAIS,CAAC,CAACL,gBAAF,GAAqB,CAArB,IAA0BK,CAAC,CAACL,gBAAF,GAAqBK,CAAC,CAACN,eAArD,EAAsE;AACpE,UAAM,IAAIF,SAAJ,CACJ,oEADI,EAEJD,iCAFI,CAAN;AAID;;AACD,MAAIS,CAAC,CAACJ,iBAAF,GAAsB,CAAtB,IAA2BI,CAAC,CAACJ,iBAAF,GAAsBI,CAAC,CAACL,gBAAvD,EAAyE;AACvE,UAAM,IAAIH,SAAJ,CACJ,sEADI,EAEJD,iCAFI,CAAN;AAID;;AACD,MAAIS,CAAC,CAACH,iBAAF,GAAsB,CAA1B,EAA6B;AAC3B,UAAM,IAAIL,SAAJ,CAAc,8CAAd,EAA8DD,iCAA9D,CAAN;AACD;;AACD,MAAIS,CAAC,CAACF,2BAAF,GAAgC,CAApC,EAAuC;AACrC,UAAM,IAAIN,SAAJ,CAAc,2DAAd,EAA2ED,iCAA3E,CAAN;AACD;AACF","names":["ERR_INVALID_PEER_SCORE_THRESHOLDS","CodeError","defaultPeerScoreThresholds","gossipThreshold","publishThreshold","graylistThreshold","acceptPXThreshold","opportunisticGraftThreshold","createPeerScoreThresholds","p","validatePeerScoreThresholds"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@chainsafe\\libp2p-gossipsub\\src\\score\\peer-score-thresholds.ts"],"sourcesContent":["import { ERR_INVALID_PEER_SCORE_THRESHOLDS } from './constants.js'\nimport { CodeError } from '@libp2p/interfaces/errors'\n\n// This file defines PeerScoreThresholds interface\n// as well as a constructor, default constructor, and validation function\n// for this interface\n\nexport interface PeerScoreThresholds {\n  /**\n   * gossipThreshold is the score threshold below which gossip propagation is supressed;\n   * should be negative.\n   */\n  gossipThreshold: number\n\n  /**\n   * publishThreshold is the score threshold below which we shouldn't publish when using flood\n   * publishing (also applies to fanout and floodsub peers); should be negative and <= GossipThreshold.\n   */\n  publishThreshold: number\n\n  /**\n   * graylistThreshold is the score threshold below which message processing is supressed altogether,\n   * implementing an effective graylist according to peer score; should be negative and <= PublisThreshold.\n   */\n  graylistThreshold: number\n\n  /**\n   * acceptPXThreshold is the score threshold below which PX will be ignored; this should be positive\n   * and limited to scores attainable by bootstrappers and other trusted nodes.\n   */\n  acceptPXThreshold: number\n\n  /**\n   * opportunisticGraftThreshold is the median mesh score threshold before triggering opportunistic\n   * grafting; this should have a small positive value.\n   */\n  opportunisticGraftThreshold: number\n}\n\nexport const defaultPeerScoreThresholds: PeerScoreThresholds = {\n  gossipThreshold: -10,\n  publishThreshold: -50,\n  graylistThreshold: -80,\n  acceptPXThreshold: 10,\n  opportunisticGraftThreshold: 20\n}\n\nexport function createPeerScoreThresholds(p: Partial<PeerScoreThresholds> = {}): PeerScoreThresholds {\n  return {\n    ...defaultPeerScoreThresholds,\n    ...p\n  }\n}\n\nexport function validatePeerScoreThresholds(p: PeerScoreThresholds): void {\n  if (p.gossipThreshold > 0) {\n    throw new CodeError('invalid gossip threshold; it must be <= 0', ERR_INVALID_PEER_SCORE_THRESHOLDS)\n  }\n  if (p.publishThreshold > 0 || p.publishThreshold > p.gossipThreshold) {\n    throw new CodeError(\n      'invalid publish threshold; it must be <= 0 and <= gossip threshold',\n      ERR_INVALID_PEER_SCORE_THRESHOLDS\n    )\n  }\n  if (p.graylistThreshold > 0 || p.graylistThreshold > p.publishThreshold) {\n    throw new CodeError(\n      'invalid graylist threshold; it must be <= 0 and <= publish threshold',\n      ERR_INVALID_PEER_SCORE_THRESHOLDS\n    )\n  }\n  if (p.acceptPXThreshold < 0) {\n    throw new CodeError('invalid accept PX threshold; it must be >= 0', ERR_INVALID_PEER_SCORE_THRESHOLDS)\n  }\n  if (p.opportunisticGraftThreshold < 0) {\n    throw new CodeError('invalid opportunistic grafting threshold; it must be >= 0', ERR_INVALID_PEER_SCORE_THRESHOLDS)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}