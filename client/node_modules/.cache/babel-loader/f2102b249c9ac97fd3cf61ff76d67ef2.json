{"ast":null,"code":"import { base58btc } from './bases/base58.js';\n/**\n * @template [C=number] - multicodec code corresponding to codec used to encode the block\n * @template [A=number] - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template [V=0|1] - CID version\n * @typedef {import('./cid').CID<unknown, C, A, V>} CID\n */\n\n/**\n * @template [T=unknown] - Logical type of the data encoded in the block\n * @template [C=number] - multicodec code corresponding to codec used to encode the block\n * @template [A=number] - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template [V=0|1] - CID version\n * @typedef {import('./block/interface.js').BlockView<T, C, A, V>} BlockView\n */\n\n/**\n * @param {object} options\n * @param {CID} options.cid\n * @param {(cid: CID) => Promise<BlockView|null>} options.load\n * @param {Set<string>} [options.seen]\n */\n\nconst walk = async _ref => {\n  let {\n    cid,\n    load,\n    seen\n  } = _ref;\n  seen = seen || new Set();\n  const b58Cid = cid.toString(base58btc);\n\n  if (seen.has(b58Cid)) {\n    return;\n  }\n\n  const block = await load(cid);\n  seen.add(b58Cid);\n\n  if (block === null) {\n    // the loader signals with `null` that we should skip this block\n    return;\n  }\n\n  for (const [, cid] of block.links()) {\n    await walk({\n      cid,\n      load,\n      seen\n    });\n  }\n};\n\nexport { walk };","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/multiformats/src/traversal.js"],"names":["base58btc","walk","cid","load","seen","Set","b58Cid","toString","has","block","add","links"],"mappings":"AAAA,SAASA,SAAT,QAA0B,mBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,IAAI,GAAG,cAA+B;AAAA,MAAxB;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,IAAP;AAAaC,IAAAA;AAAb,GAAwB;AAC1CA,EAAAA,IAAI,GAAGA,IAAI,IAAI,IAAIC,GAAJ,EAAf;AACA,QAAMC,MAAM,GAAGJ,GAAG,CAACK,QAAJ,CAAaP,SAAb,CAAf;;AACA,MAAII,IAAI,CAACI,GAAL,CAASF,MAAT,CAAJ,EAAsB;AACpB;AACD;;AAED,QAAMG,KAAK,GAAG,MAAMN,IAAI,CAACD,GAAD,CAAxB;AACAE,EAAAA,IAAI,CAACM,GAAL,CAASJ,MAAT;;AAEA,MAAIG,KAAK,KAAK,IAAd,EAAoB;AAAE;AACpB;AACD;;AAED,OAAK,MAAM,GAAGP,GAAH,CAAX,IAAsBO,KAAK,CAACE,KAAN,EAAtB,EAAqC;AACnC,UAAMV,IAAI,CAAC;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,IAAP;AAAaC,MAAAA;AAAb,KAAD,CAAV;AACD;AACF,CAjBD;;AAmBA,SAASH,IAAT","sourcesContent":["import { base58btc } from './bases/base58.js'\n\n/**\n * @template [C=number] - multicodec code corresponding to codec used to encode the block\n * @template [A=number] - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template [V=0|1] - CID version\n * @typedef {import('./cid').CID<unknown, C, A, V>} CID\n */\n\n/**\n * @template [T=unknown] - Logical type of the data encoded in the block\n * @template [C=number] - multicodec code corresponding to codec used to encode the block\n * @template [A=number] - multicodec code corresponding to the hashing algorithm used in CID creation.\n * @template [V=0|1] - CID version\n * @typedef {import('./block/interface.js').BlockView<T, C, A, V>} BlockView\n */\n\n/**\n * @param {object} options\n * @param {CID} options.cid\n * @param {(cid: CID) => Promise<BlockView|null>} options.load\n * @param {Set<string>} [options.seen]\n */\nconst walk = async ({ cid, load, seen }) => {\n  seen = seen || new Set()\n  const b58Cid = cid.toString(base58btc)\n  if (seen.has(b58Cid)) {\n    return\n  }\n\n  const block = await load(cid)\n  seen.add(b58Cid)\n\n  if (block === null) { // the loader signals with `null` that we should skip this block\n    return\n  }\n\n  for (const [, cid] of block.links()) {\n    await walk({ cid, load, seen })\n  }\n}\n\nexport { walk }\n"]},"metadata":{},"sourceType":"module"}