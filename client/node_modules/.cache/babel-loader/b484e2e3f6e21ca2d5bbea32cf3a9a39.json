{"ast":null,"code":"import { exporter } from 'ipfs-unixfs-exporter';\nimport errCode from 'err-code';\nimport { normalizeCidPath, mapFile } from '../utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { CID } from 'multiformats/cid';\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\n\nexport function createLs(_ref) {\n  let {\n    repo,\n    preload\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ls\"]}\n   */\n  async function* ls(ipfsPath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const legacyPath = normalizeCidPath(ipfsPath);\n    const pathComponents = legacyPath.split('/');\n\n    if (options.preload !== false) {\n      preload(CID.parse(pathComponents[0]));\n    }\n\n    const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath;\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options);\n\n    if (file.type === 'file') {\n      yield mapFile(file);\n      return;\n    }\n\n    if (file.type === 'directory') {\n      for await (const child of file.content()) {\n        yield mapFile(child);\n      }\n\n      return;\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE');\n  }\n\n  return withTimeoutOption(ls);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/ls.js"],"names":["exporter","errCode","normalizeCidPath","mapFile","withTimeoutOption","CID","createLs","repo","preload","ls","ipfsPath","options","legacyPath","pathComponents","split","parse","ipfsPathOrCid","asCID","file","blocks","type","child","content","Error"],"mappings":"AAAA,SAASA,QAAT,QAAyB,sBAAzB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,gBAAT,EAA2BC,OAA3B,QAA0C,aAA1C;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,GAAT,QAAoB,kBAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,OAAsC;AAAA,MAAnB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAmB;;AAC3C;AACF;AACA;AACE,kBAAiBC,EAAjB,CAAqBC,QAArB,EAA6C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC3C,UAAMC,UAAU,GAAGV,gBAAgB,CAACQ,QAAD,CAAnC;AACA,UAAMG,cAAc,GAAGD,UAAU,CAACE,KAAX,CAAiB,GAAjB,CAAvB;;AAEA,QAAIH,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACH,GAAG,CAACU,KAAJ,CAAUF,cAAc,CAAC,CAAD,CAAxB,CAAD,CAAP;AACD;;AAED,UAAMG,aAAa,GAAGX,GAAG,CAACY,KAAJ,CAAUL,UAAV,KAAyBA,UAA/C;AACA,UAAMM,IAAI,GAAG,MAAMlB,QAAQ,CAACgB,aAAD,EAAgBT,IAAI,CAACY,MAArB,EAA6BR,OAA7B,CAA3B;;AAEA,QAAIO,IAAI,CAACE,IAAL,KAAc,MAAlB,EAA0B;AACxB,YAAMjB,OAAO,CAACe,IAAD,CAAb;AACA;AACD;;AAED,QAAIA,IAAI,CAACE,IAAL,KAAc,WAAlB,EAA+B;AAC7B,iBAAW,MAAMC,KAAjB,IAA0BH,IAAI,CAACI,OAAL,EAA1B,EAA0C;AACxC,cAAMnB,OAAO,CAACkB,KAAD,CAAb;AACD;;AAED;AACD;;AAED,UAAMpB,OAAO,CAAC,IAAIsB,KAAJ,CAAW,uBAAsBL,IAAI,CAACE,IAAK,EAA3C,CAAD,EAAgD,yBAAhD,CAAb;AACD;;AAED,SAAOhB,iBAAiB,CAACK,EAAD,CAAxB;AACD","sourcesContent":["import { exporter } from 'ipfs-unixfs-exporter'\nimport errCode from 'err-code'\nimport { normalizeCidPath, mapFile } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createLs ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"ls\"]}\n   */\n  async function * ls (ipfsPath, options = {}) {\n    const legacyPath = normalizeCidPath(ipfsPath)\n    const pathComponents = legacyPath.split('/')\n\n    if (options.preload !== false) {\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const ipfsPathOrCid = CID.asCID(legacyPath) || legacyPath\n    const file = await exporter(ipfsPathOrCid, repo.blocks, options)\n\n    if (file.type === 'file') {\n      yield mapFile(file)\n      return\n    }\n\n    if (file.type === 'directory') {\n      for await (const child of file.content()) {\n        yield mapFile(child)\n      }\n\n      return\n    }\n\n    throw errCode(new Error(`Unknown UnixFS type ${file.type}`), 'ERR_UNKNOWN_UNIXFS_TYPE')\n  }\n\n  return withTimeoutOption(ls)\n}\n"]},"metadata":{},"sourceType":"module"}