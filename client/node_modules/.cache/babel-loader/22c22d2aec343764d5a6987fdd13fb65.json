{"ast":null,"code":"import * as varint from 'varint';\n/**\n * @param {Array<number>} buf\n * @returns {Uint8Array}\n */\n\nfunction varintEncoder(buf) {\n  let out = new Uint8Array(buf.reduce((acc, curr) => {\n    // @ts-expect-error types are wrong\n    return acc + varint.default.encodingLength(curr);\n  }, 0));\n  let offset = 0;\n\n  for (const num of buf) {\n    out = varint.encode(num, out, offset); // @ts-expect-error types are wrong\n\n    offset += varint.default.encodingLength(num);\n  }\n\n  return out;\n}\n\nexport default varintEncoder;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-bitswap/src/utils/varint-encoder.js"],"names":["varint","varintEncoder","buf","out","Uint8Array","reduce","acc","curr","default","encodingLength","offset","num","encode"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,QAAxB;AAEA;AACA;AACA;AACA;;AACA,SAASC,aAAT,CAAwBC,GAAxB,EAA6B;AAC3B,MAAIC,GAAG,GAAG,IAAIC,UAAJ,CAAeF,GAAG,CAACG,MAAJ,CAAW,CAACC,GAAD,EAAMC,IAAN,KAAe;AACjD;AACA,WAAOD,GAAG,GAAGN,MAAM,CAACQ,OAAP,CAAeC,cAAf,CAA8BF,IAA9B,CAAb;AACD,GAHwB,EAGtB,CAHsB,CAAf,CAAV;AAIA,MAAIG,MAAM,GAAG,CAAb;;AAEA,OAAK,MAAMC,GAAX,IAAkBT,GAAlB,EAAuB;AACrBC,IAAAA,GAAG,GAAGH,MAAM,CAACY,MAAP,CAAcD,GAAd,EAAmBR,GAAnB,EAAwBO,MAAxB,CAAN,CADqB,CAGrB;;AACAA,IAAAA,MAAM,IAAIV,MAAM,CAACQ,OAAP,CAAeC,cAAf,CAA8BE,GAA9B,CAAV;AACD;;AAED,SAAOR,GAAP;AACD;;AAED,eAAeF,aAAf","sourcesContent":["import * as varint from 'varint'\n\n/**\n * @param {Array<number>} buf\n * @returns {Uint8Array}\n */\nfunction varintEncoder (buf) {\n  let out = new Uint8Array(buf.reduce((acc, curr) => {\n    // @ts-expect-error types are wrong\n    return acc + varint.default.encodingLength(curr)\n  }, 0))\n  let offset = 0\n\n  for (const num of buf) {\n    out = varint.encode(num, out, offset)\n\n    // @ts-expect-error types are wrong\n    offset += varint.default.encodingLength(num)\n  }\n\n  return out\n}\n\nexport default varintEncoder\n"]},"metadata":{},"sourceType":"module"}