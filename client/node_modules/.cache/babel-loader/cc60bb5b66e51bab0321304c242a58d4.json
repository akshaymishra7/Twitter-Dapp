{"ast":null,"code":"'use strict';\n\nconst {\n  Buffer\n} = require('buffer') || {};\n\nconst {\n  Encoding\n} = require('./encoding');\n\nconst textEndec = require('./text-endec');\n/**\n * @template TIn, TOut\n * @extends {Encoding<TIn,Buffer,TOut>}\n */\n\n\nclass BufferFormat extends Encoding {\n  /**\n   * @param {Omit<IEncoding<TIn, Buffer, TOut>, 'format'>} options\n   */\n  constructor(options) {\n    super({ ...options,\n      format: 'buffer'\n    });\n  }\n  /** @override */\n\n\n  createViewTranscoder() {\n    return new ViewFormat({\n      encode: this.encode,\n      // Buffer is a view (UInt8Array)\n      decode: data => this.decode(Buffer.from(data.buffer, data.byteOffset, data.byteLength)),\n      name: `${this.name}+view`\n    });\n  }\n  /** @override */\n\n\n  createBufferTranscoder() {\n    return this;\n  }\n\n}\n/**\n * @extends {Encoding<TIn,Uint8Array,TOut>}\n * @template TIn, TOut\n */\n\n\nclass ViewFormat extends Encoding {\n  /**\n   * @param {Omit<IEncoding<TIn, Uint8Array, TOut>, 'format'>} options\n   */\n  constructor(options) {\n    super({ ...options,\n      format: 'view'\n    });\n  }\n  /** @override */\n\n\n  createBufferTranscoder() {\n    return new BufferFormat({\n      encode: data => {\n        const view = this.encode(data);\n        return Buffer.from(view.buffer, view.byteOffset, view.byteLength);\n      },\n      decode: this.decode,\n      // Buffer is a view (UInt8Array)\n      name: `${this.name}+buffer`\n    });\n  }\n  /** @override */\n\n\n  createViewTranscoder() {\n    return this;\n  }\n\n}\n/**\n * @extends {Encoding<TIn,string,TOut>}\n * @template TIn, TOut\n */\n\n\nclass UTF8Format extends Encoding {\n  /**\n   * @param {Omit<IEncoding<TIn, string, TOut>, 'format'>} options\n   */\n  constructor(options) {\n    super({ ...options,\n      format: 'utf8'\n    });\n  }\n  /** @override */\n\n\n  createBufferTranscoder() {\n    return new BufferFormat({\n      encode: data => Buffer.from(this.encode(data), 'utf8'),\n      decode: data => this.decode(data.toString('utf8')),\n      name: `${this.name}+buffer`\n    });\n  }\n  /** @override */\n\n\n  createViewTranscoder() {\n    const {\n      textEncoder,\n      textDecoder\n    } = textEndec();\n    return new ViewFormat({\n      encode: data => textEncoder.encode(this.encode(data)),\n      decode: data => this.decode(textDecoder.decode(data)),\n      name: `${this.name}+view`\n    });\n  }\n  /** @override */\n\n\n  createUTF8Transcoder() {\n    return this;\n  }\n\n}\n\nexports.BufferFormat = BufferFormat;\nexports.ViewFormat = ViewFormat;\nexports.UTF8Format = UTF8Format;\n/**\n * @typedef {import('./encoding').IEncoding<TIn,TFormat,TOut>} IEncoding\n * @template TIn, TFormat, TOut\n */","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/level-transcoder/lib/formats.js"],"names":["Buffer","require","Encoding","textEndec","BufferFormat","constructor","options","format","createViewTranscoder","ViewFormat","encode","decode","data","from","buffer","byteOffset","byteLength","name","createBufferTranscoder","view","UTF8Format","toString","textEncoder","textDecoder","createUTF8Transcoder","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst { Buffer } = require('buffer') || {}\nconst { Encoding } = require('./encoding')\nconst textEndec = require('./text-endec')\n\n/**\n * @template TIn, TOut\n * @extends {Encoding<TIn,Buffer,TOut>}\n */\nclass BufferFormat extends Encoding {\n  /**\n   * @param {Omit<IEncoding<TIn, Buffer, TOut>, 'format'>} options\n   */\n  constructor (options) {\n    super({ ...options, format: 'buffer' })\n  }\n\n  /** @override */\n  createViewTranscoder () {\n    return new ViewFormat({\n      encode: this.encode, // Buffer is a view (UInt8Array)\n      decode: (data) => this.decode(\n        Buffer.from(data.buffer, data.byteOffset, data.byteLength)\n      ),\n      name: `${this.name}+view`\n    })\n  }\n\n  /** @override */\n  createBufferTranscoder () {\n    return this\n  }\n}\n\n/**\n * @extends {Encoding<TIn,Uint8Array,TOut>}\n * @template TIn, TOut\n */\nclass ViewFormat extends Encoding {\n  /**\n   * @param {Omit<IEncoding<TIn, Uint8Array, TOut>, 'format'>} options\n   */\n  constructor (options) {\n    super({ ...options, format: 'view' })\n  }\n\n  /** @override */\n  createBufferTranscoder () {\n    return new BufferFormat({\n      encode: (data) => {\n        const view = this.encode(data)\n        return Buffer.from(view.buffer, view.byteOffset, view.byteLength)\n      },\n      decode: this.decode, // Buffer is a view (UInt8Array)\n      name: `${this.name}+buffer`\n    })\n  }\n\n  /** @override */\n  createViewTranscoder () {\n    return this\n  }\n}\n\n/**\n * @extends {Encoding<TIn,string,TOut>}\n * @template TIn, TOut\n */\nclass UTF8Format extends Encoding {\n  /**\n   * @param {Omit<IEncoding<TIn, string, TOut>, 'format'>} options\n   */\n  constructor (options) {\n    super({ ...options, format: 'utf8' })\n  }\n\n  /** @override */\n  createBufferTranscoder () {\n    return new BufferFormat({\n      encode: (data) => Buffer.from(this.encode(data), 'utf8'),\n      decode: (data) => this.decode(data.toString('utf8')),\n      name: `${this.name}+buffer`\n    })\n  }\n\n  /** @override */\n  createViewTranscoder () {\n    const { textEncoder, textDecoder } = textEndec()\n\n    return new ViewFormat({\n      encode: (data) => textEncoder.encode(this.encode(data)),\n      decode: (data) => this.decode(textDecoder.decode(data)),\n      name: `${this.name}+view`\n    })\n  }\n\n  /** @override */\n  createUTF8Transcoder () {\n    return this\n  }\n}\n\nexports.BufferFormat = BufferFormat\nexports.ViewFormat = ViewFormat\nexports.UTF8Format = UTF8Format\n\n/**\n * @typedef {import('./encoding').IEncoding<TIn,TFormat,TOut>} IEncoding\n * @template TIn, TFormat, TOut\n */\n"]},"metadata":{},"sourceType":"script"}