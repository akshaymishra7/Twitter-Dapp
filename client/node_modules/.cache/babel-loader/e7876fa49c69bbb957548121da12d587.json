{"ast":null,"code":"import batch from 'it-batch';\n/**\n * @typedef {import('ipfs-unixfs').UnixFS} UnixFS\n * @typedef {import('../../types').ImporterOptions} ImporterOptions\n * @typedef {import('../../types').InProgressImportResult} InProgressImportResult\n * @typedef {import('../../types').TrickleDagNode} TrickleDagNode\n * @typedef {import('../../types').Reducer} Reducer\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {FileDAGBuilder}\n */\n\nasync function trickleStream(source, reduce, options) {\n  const root = new Root(options.layerRepeat);\n  let iteration = 0;\n  let maxDepth = 1;\n  /** @type {SubTree} */\n\n  let subTree = root;\n\n  for await (const layer of batch(source, options.maxChildrenPerNode)) {\n    if (subTree.isFull()) {\n      if (subTree !== root) {\n        root.addChild(await subTree.reduce(reduce));\n      }\n\n      if (iteration && iteration % options.layerRepeat === 0) {\n        maxDepth++;\n      }\n\n      subTree = new SubTree(maxDepth, options.layerRepeat, iteration);\n      iteration++;\n    }\n\n    subTree.append(layer);\n  }\n\n  if (subTree && subTree !== root) {\n    root.addChild(await subTree.reduce(reduce));\n  }\n\n  return root.reduce(reduce);\n}\n\nexport default trickleStream;\n\nclass SubTree {\n  /**\n   * @param {number} maxDepth\n   * @param {number} layerRepeat\n   * @param {number} [iteration=0]\n   */\n  constructor(maxDepth, layerRepeat) {\n    let iteration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n    this.maxDepth = maxDepth;\n    this.layerRepeat = layerRepeat;\n    this.currentDepth = 1;\n    this.iteration = iteration;\n    /** @type {TrickleDagNode} */\n\n    this.root = this.node = this.parent = {\n      children: [],\n      depth: this.currentDepth,\n      maxDepth,\n      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat\n    };\n  }\n\n  isFull() {\n    if (!this.root.data) {\n      return false;\n    }\n\n    if (this.currentDepth < this.maxDepth && this.node.maxChildren) {\n      // can descend\n      this._addNextNodeToParent(this.node);\n\n      return false;\n    } // try to find new node from node.parent\n\n\n    const distantRelative = this._findParent(this.node, this.currentDepth);\n\n    if (distantRelative) {\n      this._addNextNodeToParent(distantRelative);\n\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * @param {TrickleDagNode} parent\n   */\n\n\n  _addNextNodeToParent(parent) {\n    this.parent = parent; // find site for new node\n\n    const nextNode = {\n      children: [],\n      depth: parent.depth + 1,\n      parent,\n      maxDepth: this.maxDepth,\n      maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat\n    }; // @ts-ignore\n\n    parent.children.push(nextNode);\n    this.currentDepth = nextNode.depth;\n    this.node = nextNode;\n  }\n  /**\n   *\n   * @param {InProgressImportResult[]} layer\n   */\n\n\n  append(layer) {\n    this.node.data = layer;\n  }\n  /**\n   * @param {Reducer} reduce\n   */\n\n\n  reduce(reduce) {\n    return this._reduce(this.root, reduce);\n  }\n  /**\n   * @param {TrickleDagNode} node\n   * @param {Reducer} reduce\n   * @returns {Promise<InProgressImportResult>}\n   */\n\n\n  async _reduce(node, reduce) {\n    /** @type {InProgressImportResult[]} */\n    let children = [];\n\n    if (node.children.length) {\n      children = await Promise.all(node.children // @ts-ignore\n      .filter(child => child.data) // @ts-ignore\n      .map(child => this._reduce(child, reduce)));\n    }\n\n    return reduce((node.data || []).concat(children));\n  }\n  /**\n   * @param {TrickleDagNode} node\n   * @param {number} depth\n   * @returns {TrickleDagNode | undefined}\n   */\n\n\n  _findParent(node, depth) {\n    const parent = node.parent;\n\n    if (!parent || parent.depth === 0) {\n      return;\n    }\n\n    if (parent.children.length === parent.maxChildren || !parent.maxChildren) {\n      // this layer is full, may be able to traverse to a different branch\n      return this._findParent(parent, depth);\n    }\n\n    return parent;\n  }\n\n}\n\nclass Root extends SubTree {\n  /**\n   * @param {number} layerRepeat\n   */\n  constructor(layerRepeat) {\n    super(0, layerRepeat);\n    this.root.depth = 0;\n    this.currentDepth = 1;\n  }\n  /**\n   * @param {InProgressImportResult} child\n   */\n\n\n  addChild(child) {\n    this.root.children.push(child);\n  }\n  /**\n   * @param {Reducer} reduce\n   */\n\n\n  reduce(reduce) {\n    return reduce((this.root.data || []).concat(this.root.children));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-unixfs-importer/src/dag-builder/file/trickle.js"],"names":["batch","trickleStream","source","reduce","options","root","Root","layerRepeat","iteration","maxDepth","subTree","layer","maxChildrenPerNode","isFull","addChild","SubTree","append","constructor","currentDepth","node","parent","children","depth","maxChildren","data","_addNextNodeToParent","distantRelative","_findParent","nextNode","Math","floor","length","push","_reduce","Promise","all","filter","child","map","concat"],"mappings":"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","sourcesContent":["import batch from 'it-batch'\n\n/**\n * @typedef {import('ipfs-unixfs').UnixFS} UnixFS\n * @typedef {import('../../types').ImporterOptions} ImporterOptions\n * @typedef {import('../../types').InProgressImportResult} InProgressImportResult\n * @typedef {import('../../types').TrickleDagNode} TrickleDagNode\n * @typedef {import('../../types').Reducer} Reducer\n * @typedef {import('../../types').FileDAGBuilder} FileDAGBuilder\n */\n\n/**\n * @type {FileDAGBuilder}\n */\nasync function trickleStream (source, reduce, options) {\n  const root = new Root(options.layerRepeat)\n  let iteration = 0\n  let maxDepth = 1\n\n  /** @type {SubTree} */\n  let subTree = root\n\n  for await (const layer of batch(source, options.maxChildrenPerNode)) {\n    if (subTree.isFull()) {\n      if (subTree !== root) {\n        root.addChild(await subTree.reduce(reduce))\n      }\n\n      if (iteration && iteration % options.layerRepeat === 0) {\n        maxDepth++\n      }\n\n      subTree = new SubTree(maxDepth, options.layerRepeat, iteration)\n\n      iteration++\n    }\n\n    subTree.append(layer)\n  }\n\n  if (subTree && subTree !== root) {\n    root.addChild(await subTree.reduce(reduce))\n  }\n\n  return root.reduce(reduce)\n}\n\nexport default trickleStream\n\nclass SubTree {\n  /**\n   * @param {number} maxDepth\n   * @param {number} layerRepeat\n   * @param {number} [iteration=0]\n   */\n  constructor (maxDepth, layerRepeat, iteration = 0) {\n    this.maxDepth = maxDepth\n    this.layerRepeat = layerRepeat\n    this.currentDepth = 1\n    this.iteration = iteration\n\n    /** @type {TrickleDagNode} */\n    this.root = this.node = this.parent = {\n      children: [],\n      depth: this.currentDepth,\n      maxDepth,\n      maxChildren: (this.maxDepth - this.currentDepth) * this.layerRepeat\n    }\n  }\n\n  isFull () {\n    if (!this.root.data) {\n      return false\n    }\n\n    if (this.currentDepth < this.maxDepth && this.node.maxChildren) {\n      // can descend\n      this._addNextNodeToParent(this.node)\n\n      return false\n    }\n\n    // try to find new node from node.parent\n    const distantRelative = this._findParent(this.node, this.currentDepth)\n\n    if (distantRelative) {\n      this._addNextNodeToParent(distantRelative)\n\n      return false\n    }\n\n    return true\n  }\n\n  /**\n   * @param {TrickleDagNode} parent\n   */\n  _addNextNodeToParent (parent) {\n    this.parent = parent\n\n    // find site for new node\n    const nextNode = {\n      children: [],\n      depth: parent.depth + 1,\n      parent,\n      maxDepth: this.maxDepth,\n      maxChildren: Math.floor(parent.children.length / this.layerRepeat) * this.layerRepeat\n    }\n\n    // @ts-ignore\n    parent.children.push(nextNode)\n\n    this.currentDepth = nextNode.depth\n    this.node = nextNode\n  }\n\n  /**\n   *\n   * @param {InProgressImportResult[]} layer\n   */\n  append (layer) {\n    this.node.data = layer\n  }\n\n  /**\n   * @param {Reducer} reduce\n   */\n  reduce (reduce) {\n    return this._reduce(this.root, reduce)\n  }\n\n  /**\n   * @param {TrickleDagNode} node\n   * @param {Reducer} reduce\n   * @returns {Promise<InProgressImportResult>}\n   */\n  async _reduce (node, reduce) {\n    /** @type {InProgressImportResult[]} */\n    let children = []\n\n    if (node.children.length) {\n      children = await Promise.all(\n        node.children\n          // @ts-ignore\n          .filter(child => child.data)\n          // @ts-ignore\n          .map(child => this._reduce(child, reduce))\n      )\n    }\n\n    return reduce((node.data || []).concat(children))\n  }\n\n  /**\n   * @param {TrickleDagNode} node\n   * @param {number} depth\n   * @returns {TrickleDagNode | undefined}\n   */\n  _findParent (node, depth) {\n    const parent = node.parent\n\n    if (!parent || parent.depth === 0) {\n      return\n    }\n\n    if (parent.children.length === parent.maxChildren || !parent.maxChildren) {\n      // this layer is full, may be able to traverse to a different branch\n      return this._findParent(parent, depth)\n    }\n\n    return parent\n  }\n}\n\nclass Root extends SubTree {\n  /**\n   * @param {number} layerRepeat\n   */\n  constructor (layerRepeat) {\n    super(0, layerRepeat)\n\n    this.root.depth = 0\n    this.currentDepth = 1\n  }\n\n  /**\n   * @param {InProgressImportResult} child\n   */\n  addChild (child) {\n    this.root.children.push(child)\n  }\n\n  /**\n   * @param {Reducer} reduce\n   */\n  reduce (reduce) {\n    return reduce((this.root.data || []).concat(this.root.children))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}