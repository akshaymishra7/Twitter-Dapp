{"ast":null,"code":"export { WebRTCReceiver } from './receiver.js';\nexport { WebRTCInitiator } from './initiator.js';\nexport { WebRTCPeer } from './peer.js';","map":{"version":3,"mappings":"AAcA,SAASA,cAAT,QAA+B,eAA/B;AACA,SAASC,eAAT,QAAgC,gBAAhC;AACA,SAASC,UAAT,QAA2B,WAA3B","names":["WebRTCReceiver","WebRTCInitiator","WebRTCPeer"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\webrtc-peer\\src\\index.ts"],"sourcesContent":["export interface WRTC {\n  RTCPeerConnection: typeof RTCPeerConnection\n  RTCSessionDescription: typeof RTCSessionDescription\n  RTCIceCandidate: typeof RTCIceCandidate\n}\n\nexport interface WebRTCPeerEvents {\n  'signal': CustomEvent<Signal>\n  'ready': CustomEvent\n  'close': CustomEvent\n  'ice-candidate': CustomEvent\n  'error': CustomEvent<Error>\n}\n\nexport { WebRTCReceiver } from './receiver.js'\nexport { WebRTCInitiator } from './initiator.js'\nexport { WebRTCPeer } from './peer.js'\n\nexport interface WebRTCPeerInit {\n  id?: string\n  wrtc?: WRTC\n  peerConnectionConfig?: RTCConfiguration\n}\n\nexport interface WebRTCReceiverInit extends WebRTCPeerInit {\n  answerOptions?: RTCAnswerOptions\n}\n\nexport interface WebRTCInitiatorInit extends WebRTCPeerInit {\n  dataChannelLabel?: string\n  dataChannelInit?: RTCDataChannelInit\n  offerOptions?: RTCOfferOptions\n}\n\nexport interface OfferSignal {\n  type: 'offer'\n  sdp: string\n}\n\nexport interface AnswerSignal {\n  type: 'answer'\n  sdp: string\n}\n\nexport interface CandidateSignal {\n  type: 'candidate'\n  candidate: {\n    candidate: string\n    sdpMLineIndex?: number\n    sdpMid?: string\n  }\n}\n\nexport interface RenegotiateSignal {\n  type: 'renegotiate'\n}\n\nexport interface GoodbyeSignal {\n  type: 'goodbye'\n}\n\nexport type Signal = OfferSignal | AnswerSignal | CandidateSignal | RenegotiateSignal | GoodbyeSignal\n"]},"metadata":{},"sourceType":"module"}