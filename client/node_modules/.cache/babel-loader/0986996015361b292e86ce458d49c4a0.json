{"ast":null,"code":"import { isRepoInitialized } from './init.js';\nimport { MissingRepoOptionsError, NotInitializedRepoError } from '../errors.js';\nimport { VERSION_KEY } from '../utils.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\n\nexport async function getVersion(backends) {\n  if (!(await isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!');\n  }\n\n  const store = backends.root;\n  await store.open();\n\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)));\n  } finally {\n    await store.close();\n  }\n}\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\n\nexport async function setVersion(version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n  }\n\n  const store = backends.root;\n  await store.open();\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)));\n  await store.close();\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-repo-migrations/src/repo/version.js"],"names":["isRepoInitialized","MissingRepoOptionsError","NotInitializedRepoError","VERSION_KEY","fromString","uint8ArrayFromString","toString","uint8ArrayToString","getVersion","backends","store","root","open","parseInt","get","close","setVersion","version","put","String"],"mappings":"AACA,SAASA,iBAAT,QAAkC,WAAlC;AACA,SAASC,uBAAT,EAAkCC,uBAAlC,QAAiE,cAAjE;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,UAAf,CAA2BC,QAA3B,EAAqC;AAC1C,MAAI,EAAE,MAAMT,iBAAiB,CAACS,QAAD,CAAzB,CAAJ,EAA0C;AACxC,UAAM,IAAIP,uBAAJ,CAA4B,0BAA5B,CAAN;AACD;;AAED,QAAMQ,KAAK,GAAGD,QAAQ,CAACE,IAAvB;AACA,QAAMD,KAAK,CAACE,IAAN,EAAN;;AAEA,MAAI;AACF,WAAOC,QAAQ,CAACN,kBAAkB,CAAC,MAAMG,KAAK,CAACI,GAAN,CAAUX,WAAV,CAAP,CAAnB,CAAf;AACD,GAFD,SAEU;AACR,UAAMO,KAAK,CAACK,KAAN,EAAN;AACD;AACF;AAED;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,UAAf,CAA2BC,OAA3B,EAAoCR,QAApC,EAA8C;AACnD,MAAI,CAACA,QAAL,EAAe;AACb,UAAM,IAAIR,uBAAJ,CAA4B,qDAA5B,CAAN;AACD;;AAED,QAAMS,KAAK,GAAGD,QAAQ,CAACE,IAAvB;AACA,QAAMD,KAAK,CAACE,IAAN,EAAN;AACA,QAAMF,KAAK,CAACQ,GAAN,CAAUf,WAAV,EAAuBE,oBAAoB,CAACc,MAAM,CAACF,OAAD,CAAP,CAA3C,CAAN;AACA,QAAMP,KAAK,CAACK,KAAN,EAAN;AACD","sourcesContent":["\nimport { isRepoInitialized } from './init.js'\nimport { MissingRepoOptionsError, NotInitializedRepoError } from '../errors.js'\nimport { VERSION_KEY } from '../utils.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {import('../types').Backends} backends\n */\nexport async function getVersion (backends) {\n  if (!(await isRepoInitialized(backends))) {\n    throw new NotInitializedRepoError('Repo is not initialized!')\n  }\n\n  const store = backends.root\n  await store.open()\n\n  try {\n    return parseInt(uint8ArrayToString(await store.get(VERSION_KEY)))\n  } finally {\n    await store.close()\n  }\n}\n\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {number} version\n * @param {import('../types').Backends} backends\n */\nexport async function setVersion (version, backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const store = backends.root\n  await store.open()\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)))\n  await store.close()\n}\n"]},"metadata":{},"sourceType":"module"}