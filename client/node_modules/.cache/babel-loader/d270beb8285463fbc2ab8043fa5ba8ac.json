{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport * as dagPB from '@ipld/dag-pb';\nimport { sha256 } from 'multiformats/hashes/sha2';\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').Version} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\n\nexport const persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPB;\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256;\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1;\n  }\n\n  if (options.codec === dagPB && options.hasher !== sha256) {\n    options.cidVersion = 1;\n  }\n\n  const multihash = await options.hasher.digest(buffer);\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash);\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    });\n  }\n\n  return cid;\n};","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/files/utils/persist.js"],"names":["CID","dagPB","sha256","persist","buffer","blockstore","options","codec","hasher","cidVersion","undefined","multihash","digest","cid","create","code","onlyHash","put","signal"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,SAASC,MAAT,QAAuB,0BAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,OAAO,GAAG,OAAOC,MAAP,EAAeC,UAAf,EAA2BC,OAA3B,KAAuC;AAC5D,MAAI,CAACA,OAAO,CAACC,KAAb,EAAoB;AAClBD,IAAAA,OAAO,CAACC,KAAR,GAAgBN,KAAhB;AACD;;AAED,MAAI,CAACK,OAAO,CAACE,MAAb,EAAqB;AACnBF,IAAAA,OAAO,CAACE,MAAR,GAAiBN,MAAjB;AACD;;AAED,MAAII,OAAO,CAACG,UAAR,KAAuBC,SAA3B,EAAsC;AACpCJ,IAAAA,OAAO,CAACG,UAAR,GAAqB,CAArB;AACD;;AAED,MAAIH,OAAO,CAACC,KAAR,KAAkBN,KAAlB,IAA2BK,OAAO,CAACE,MAAR,KAAmBN,MAAlD,EAA0D;AACxDI,IAAAA,OAAO,CAACG,UAAR,GAAqB,CAArB;AACD;;AAED,QAAME,SAAS,GAAG,MAAML,OAAO,CAACE,MAAR,CAAeI,MAAf,CAAsBR,MAAtB,CAAxB;AACA,QAAMS,GAAG,GAAGb,GAAG,CAACc,MAAJ,CAAWR,OAAO,CAACG,UAAnB,EAA+BH,OAAO,CAACC,KAAR,CAAcQ,IAA7C,EAAmDJ,SAAnD,CAAZ;;AAEA,MAAI,CAACL,OAAO,CAACU,QAAb,EAAuB;AACrB,UAAMX,UAAU,CAACY,GAAX,CAAeJ,GAAf,EAAoBT,MAApB,EAA4B;AAChCc,MAAAA,MAAM,EAAEZ,OAAO,CAACY;AADgB,KAA5B,CAAN;AAGD;;AAED,SAAOL,GAAP;AACD,CA3BM","sourcesContent":["import { CID } from 'multiformats/cid'\nimport * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\n\n/**\n * @typedef {object} PersistOptions\n * @property {import('multiformats/codecs/interface').BlockCodec<any, any>} [codec]\n * @property {import('multiformats/hashes/interface').MultihashHasher} [hasher]\n * @property {import('multiformats/cid').Version} [cidVersion]\n * @property {boolean} [onlyHash]\n * @property {AbortSignal} [signal]\n */\n\n/**\n * @param {Uint8Array} buffer\n * @param {import('interface-blockstore').Blockstore} blockstore\n * @param {PersistOptions} options\n */\nexport const persist = async (buffer, blockstore, options) => {\n  if (!options.codec) {\n    options.codec = dagPB\n  }\n\n  if (!options.hasher) {\n    options.hasher = sha256\n  }\n\n  if (options.cidVersion === undefined) {\n    options.cidVersion = 1\n  }\n\n  if (options.codec === dagPB && options.hasher !== sha256) {\n    options.cidVersion = 1\n  }\n\n  const multihash = await options.hasher.digest(buffer)\n  const cid = CID.create(options.cidVersion, options.codec.code, multihash)\n\n  if (!options.onlyHash) {\n    await blockstore.put(cid, buffer, {\n      signal: options.signal\n    })\n  }\n\n  return cid\n}\n"]},"metadata":{},"sourceType":"module"}