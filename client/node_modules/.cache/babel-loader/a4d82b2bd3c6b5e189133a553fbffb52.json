{"ast":null,"code":"import errCode from 'err-code';\nimport { isStartable } from '@libp2p/interfaces/startable';\nexport class DefaultComponents {\n  constructor() {\n    let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this._started = false;\n    this._peerId = init.peerId;\n    this._addressManager = init.addressManager;\n    this._peerStore = init.peerStore;\n    this._upgrader = init.upgrader;\n    this._metrics = init.metrics;\n    this._registrar = init.registrar;\n    this._connectionManager = init.connectionManager;\n    this._transportManager = init.transportManager;\n    this._connectionGater = init.connectionGater;\n    this._contentRouting = init.contentRouting;\n    this._peerRouting = init.peerRouting;\n    this._datastore = init.datastore;\n    this._connectionProtector = init.connectionProtector;\n    this._dht = init.dht;\n    this._pubsub = init.pubsub;\n    this._dialer = init.dialer;\n  }\n\n  isStarted() {\n    return this._started;\n  }\n\n  async beforeStart() {\n    await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async startable => {\n      if (startable.beforeStart != null) {\n        await startable.beforeStart();\n      }\n    }));\n  }\n\n  async start() {\n    await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async startable => {\n      await startable.start();\n    }));\n    this._started = true;\n  }\n\n  async afterStart() {\n    await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async startable => {\n      if (startable.afterStart != null) {\n        await startable.afterStart();\n      }\n    }));\n  }\n\n  async beforeStop() {\n    await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async startable => {\n      if (startable.beforeStop != null) {\n        await startable.beforeStop();\n      }\n    }));\n  }\n\n  async stop() {\n    await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async startable => {\n      await startable.stop();\n    }));\n    this._started = false;\n  }\n\n  async afterStop() {\n    await Promise.all(Object.values(this).filter(obj => isStartable(obj)).map(async startable => {\n      if (startable.afterStop != null) {\n        await startable.afterStop();\n      }\n    }));\n  }\n\n  get peerId() {\n    if (this._peerId == null) {\n      throw errCode(new Error('peerId not set'), 'ERR_SERVICE_MISSING');\n    }\n\n    return this._peerId;\n  }\n\n  set peerId(peerId) {\n    this._peerId = peerId;\n  }\n\n  get addressManager() {\n    if (this._addressManager == null) {\n      throw errCode(new Error('addressManager not set'), 'ERR_SERVICE_MISSING');\n    }\n\n    return this._addressManager;\n  }\n\n  set addressManager(addressManager) {\n    this._addressManager = addressManager;\n  }\n\n  get peerStore() {\n    if (this._peerStore == null) {\n      throw errCode(new Error('peerStore not set'), 'ERR_SERVICE_MISSING');\n    }\n\n    return this._peerStore;\n  }\n\n  set peerStore(peerStore) {\n    this._peerStore = peerStore;\n  }\n\n  get upgrader() {\n    if (this._upgrader == null) {\n      throw errCode(new Error('upgrader not set'), 'ERR_SERVICE_MISSING');\n    }\n\n    return this._upgrader;\n  }\n\n  set upgrader(upgrader) {\n    this._upgrader = upgrader;\n  }\n\n  get registrar() {\n    if (this._registrar == null) {\n      throw errCode(new Error('registrar not set'), 'ERR_SERVICE_MISSING');\n    }\n\n    return this._registrar;\n  }\n\n  set registrar(registrar) {\n    this._registrar = registrar;\n  }\n\n  get connectionManager() {\n    if (this._connectionManager == null) {\n      throw errCode(new Error('connectionManager not set'), 'ERR_SERVICE_MISSING');\n    }\n\n    return this._connectionManager;\n  }\n\n  set connectionManager(connectionManager) {\n    this._connectionManager = connectionManager;\n  }\n\n  get transportManager() {\n    if (this._transportManager == null) {\n      throw errCode(new Error('transportManager not set'), 'ERR_SERVICE_MISSING');\n    }\n\n    return this._transportManager;\n  }\n\n  set transportManager(transportManager) {\n    this._transportManager = transportManager;\n  }\n\n  get connectionGater() {\n    if (this._connectionGater == null) {\n      throw errCode(new Error('connectionGater not set'), 'ERR_SERVICE_MISSING');\n    }\n\n    return this._connectionGater;\n  }\n\n  set connectionGater(connectionGater) {\n    this._connectionGater = connectionGater;\n  }\n\n  get contentRouting() {\n    if (this._contentRouting == null) {\n      throw errCode(new Error('contentRouting not set'), 'ERR_SERVICE_MISSING');\n    }\n\n    return this._contentRouting;\n  }\n\n  set contentRouting(contentRouting) {\n    this._contentRouting = contentRouting;\n  }\n\n  get peerRouting() {\n    if (this._peerRouting == null) {\n      throw errCode(new Error('peerRouting not set'), 'ERR_SERVICE_MISSING');\n    }\n\n    return this._peerRouting;\n  }\n\n  set peerRouting(peerRouting) {\n    this._peerRouting = peerRouting;\n  }\n\n  get datastore() {\n    if (this._datastore == null) {\n      throw errCode(new Error('datastore not set'), 'ERR_SERVICE_MISSING');\n    }\n\n    return this._datastore;\n  }\n\n  set datastore(datastore) {\n    this._datastore = datastore;\n  }\n\n  get connectionProtector() {\n    return this._connectionProtector;\n  }\n\n  set connectionProtector(connectionProtector) {\n    this._connectionProtector = connectionProtector;\n  }\n\n  get dialer() {\n    if (this._dialer == null) {\n      throw errCode(new Error('dialer not set'), 'ERR_SERVICE_MISSING');\n    }\n\n    return this._dialer;\n  }\n\n  set dialer(dialer) {\n    this._dialer = dialer;\n  }\n\n  get metrics() {\n    return this._metrics;\n  }\n\n  set metrics(metrics) {\n    this._metrics = metrics;\n  }\n\n  get dht() {\n    return this._dht;\n  }\n\n  set dht(dht) {\n    this._dht = dht;\n  }\n\n  get pubsub() {\n    return this._pubsub;\n  }\n\n  set pubsub(pubsub) {\n    this._pubsub = pubsub;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AAIA,SAASC,WAAT,QAAuC,8BAAvC;AAkDA,OAAM,MAAOC,iBAAP,CAAwB;AAmB5BC,gBAAsC;AAAA,QAAzBC,IAAyB,uEAAF,EAAE;AAF9B,oBAAW,KAAX;AAGN,SAAKC,OAAL,GAAeD,IAAI,CAACE,MAApB;AACA,SAAKC,eAAL,GAAuBH,IAAI,CAACI,cAA5B;AACA,SAAKC,UAAL,GAAkBL,IAAI,CAACM,SAAvB;AACA,SAAKC,SAAL,GAAiBP,IAAI,CAACQ,QAAtB;AACA,SAAKC,QAAL,GAAgBT,IAAI,CAACU,OAArB;AACA,SAAKC,UAAL,GAAkBX,IAAI,CAACY,SAAvB;AACA,SAAKC,kBAAL,GAA0Bb,IAAI,CAACc,iBAA/B;AACA,SAAKC,iBAAL,GAAyBf,IAAI,CAACgB,gBAA9B;AACA,SAAKC,gBAAL,GAAwBjB,IAAI,CAACkB,eAA7B;AACA,SAAKC,eAAL,GAAuBnB,IAAI,CAACoB,cAA5B;AACA,SAAKC,YAAL,GAAoBrB,IAAI,CAACsB,WAAzB;AACA,SAAKC,UAAL,GAAkBvB,IAAI,CAACwB,SAAvB;AACA,SAAKC,oBAAL,GAA4BzB,IAAI,CAAC0B,mBAAjC;AACA,SAAKC,IAAL,GAAY3B,IAAI,CAAC4B,GAAjB;AACA,SAAKC,OAAL,GAAe7B,IAAI,CAAC8B,MAApB;AACA,SAAKC,OAAL,GAAe/B,IAAI,CAACgC,MAApB;AACD;;AAEDC,WAAS;AACP,WAAO,KAAKC,QAAZ;AACD;;AAEgB,QAAXC,WAAW;AACf,UAAMC,OAAO,CAACC,GAAR,CACJC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBC,MAApB,CAA2BC,GAAG,IAAI5C,WAAW,CAAC4C,GAAD,CAA7C,EAAoDC,GAApD,CAAwD,MAAOC,SAAP,IAA+B;AACrF,UAAIA,SAAS,CAACR,WAAV,IAAyB,IAA7B,EAAmC;AACjC,cAAMQ,SAAS,CAACR,WAAV,EAAN;AACD;AACF,KAJD,CADI,CAAN;AAOD;;AAEU,QAALS,KAAK;AACT,UAAMR,OAAO,CAACC,GAAR,CACJC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBC,MAApB,CAA2BC,GAAG,IAAI5C,WAAW,CAAC4C,GAAD,CAA7C,EAAoDC,GAApD,CAAwD,MAAOC,SAAP,IAA+B;AACrF,YAAMA,SAAS,CAACC,KAAV,EAAN;AACD,KAFD,CADI,CAAN;AAMA,SAAKV,QAAL,GAAgB,IAAhB;AACD;;AAEe,QAAVW,UAAU;AACd,UAAMT,OAAO,CAACC,GAAR,CACJC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBC,MAApB,CAA2BC,GAAG,IAAI5C,WAAW,CAAC4C,GAAD,CAA7C,EAAoDC,GAApD,CAAwD,MAAOC,SAAP,IAA+B;AACrF,UAAIA,SAAS,CAACE,UAAV,IAAwB,IAA5B,EAAkC;AAChC,cAAMF,SAAS,CAACE,UAAV,EAAN;AACD;AACF,KAJD,CADI,CAAN;AAOD;;AAEe,QAAVC,UAAU;AACd,UAAMV,OAAO,CAACC,GAAR,CACJC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBC,MAApB,CAA2BC,GAAG,IAAI5C,WAAW,CAAC4C,GAAD,CAA7C,EAAoDC,GAApD,CAAwD,MAAOC,SAAP,IAA+B;AACrF,UAAIA,SAAS,CAACG,UAAV,IAAwB,IAA5B,EAAkC;AAChC,cAAMH,SAAS,CAACG,UAAV,EAAN;AACD;AACF,KAJD,CADI,CAAN;AAOD;;AAES,QAAJC,IAAI;AACR,UAAMX,OAAO,CAACC,GAAR,CACJC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBC,MAApB,CAA2BC,GAAG,IAAI5C,WAAW,CAAC4C,GAAD,CAA7C,EAAoDC,GAApD,CAAwD,MAAOC,SAAP,IAA+B;AACrF,YAAMA,SAAS,CAACI,IAAV,EAAN;AACD,KAFD,CADI,CAAN;AAMA,SAAKb,QAAL,GAAgB,KAAhB;AACD;;AAEc,QAATc,SAAS;AACb,UAAMZ,OAAO,CAACC,GAAR,CACJC,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBC,MAApB,CAA2BC,GAAG,IAAI5C,WAAW,CAAC4C,GAAD,CAA7C,EAAoDC,GAApD,CAAwD,MAAOC,SAAP,IAA+B;AACrF,UAAIA,SAAS,CAACK,SAAV,IAAuB,IAA3B,EAAiC;AAC/B,cAAML,SAAS,CAACK,SAAV,EAAN;AACD;AACF,KAJD,CADI,CAAN;AAOD;;AAES,MAAN9C,MAAM;AACR,QAAI,KAAKD,OAAL,IAAgB,IAApB,EAA0B;AACxB,YAAML,OAAO,CAAC,IAAIqD,KAAJ,CAAU,gBAAV,CAAD,EAA8B,qBAA9B,CAAb;AACD;;AAED,WAAO,KAAKhD,OAAZ;AACD;;AAES,MAANC,MAAM,CAAEA,MAAF,EAAgB;AACxB,SAAKD,OAAL,GAAeC,MAAf;AACD;;AAEiB,MAAdE,cAAc;AAChB,QAAI,KAAKD,eAAL,IAAwB,IAA5B,EAAkC;AAChC,YAAMP,OAAO,CAAC,IAAIqD,KAAJ,CAAU,wBAAV,CAAD,EAAsC,qBAAtC,CAAb;AACD;;AAED,WAAO,KAAK9C,eAAZ;AACD;;AAEiB,MAAdC,cAAc,CAAEA,cAAF,EAAgC;AAChD,SAAKD,eAAL,GAAuBC,cAAvB;AACD;;AAEY,MAATE,SAAS;AACX,QAAI,KAAKD,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,YAAMT,OAAO,CAAC,IAAIqD,KAAJ,CAAU,mBAAV,CAAD,EAAiC,qBAAjC,CAAb;AACD;;AAED,WAAO,KAAK5C,UAAZ;AACD;;AAEY,MAATC,SAAS,CAAEA,SAAF,EAAsB;AACjC,SAAKD,UAAL,GAAkBC,SAAlB;AACD;;AAEW,MAARE,QAAQ;AACV,QAAI,KAAKD,SAAL,IAAkB,IAAtB,EAA4B;AAC1B,YAAMX,OAAO,CAAC,IAAIqD,KAAJ,CAAU,kBAAV,CAAD,EAAgC,qBAAhC,CAAb;AACD;;AAED,WAAO,KAAK1C,SAAZ;AACD;;AAEW,MAARC,QAAQ,CAAEA,QAAF,EAAoB;AAC9B,SAAKD,SAAL,GAAiBC,QAAjB;AACD;;AAEY,MAATI,SAAS;AACX,QAAI,KAAKD,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,YAAMf,OAAO,CAAC,IAAIqD,KAAJ,CAAU,mBAAV,CAAD,EAAiC,qBAAjC,CAAb;AACD;;AAED,WAAO,KAAKtC,UAAZ;AACD;;AAEY,MAATC,SAAS,CAAEA,SAAF,EAAsB;AACjC,SAAKD,UAAL,GAAkBC,SAAlB;AACD;;AAEoB,MAAjBE,iBAAiB;AACnB,QAAI,KAAKD,kBAAL,IAA2B,IAA/B,EAAqC;AACnC,YAAMjB,OAAO,CAAC,IAAIqD,KAAJ,CAAU,2BAAV,CAAD,EAAyC,qBAAzC,CAAb;AACD;;AAED,WAAO,KAAKpC,kBAAZ;AACD;;AAEoB,MAAjBC,iBAAiB,CAAEA,iBAAF,EAAsC;AACzD,SAAKD,kBAAL,GAA0BC,iBAA1B;AACD;;AAEmB,MAAhBE,gBAAgB;AAClB,QAAI,KAAKD,iBAAL,IAA0B,IAA9B,EAAoC;AAClC,YAAMnB,OAAO,CAAC,IAAIqD,KAAJ,CAAU,0BAAV,CAAD,EAAwC,qBAAxC,CAAb;AACD;;AAED,WAAO,KAAKlC,iBAAZ;AACD;;AAEmB,MAAhBC,gBAAgB,CAAEA,gBAAF,EAAoC;AACtD,SAAKD,iBAAL,GAAyBC,gBAAzB;AACD;;AAEkB,MAAfE,eAAe;AACjB,QAAI,KAAKD,gBAAL,IAAyB,IAA7B,EAAmC;AACjC,YAAMrB,OAAO,CAAC,IAAIqD,KAAJ,CAAU,yBAAV,CAAD,EAAuC,qBAAvC,CAAb;AACD;;AAED,WAAO,KAAKhC,gBAAZ;AACD;;AAEkB,MAAfC,eAAe,CAAEA,eAAF,EAAkC;AACnD,SAAKD,gBAAL,GAAwBC,eAAxB;AACD;;AAEiB,MAAdE,cAAc;AAChB,QAAI,KAAKD,eAAL,IAAwB,IAA5B,EAAkC;AAChC,YAAMvB,OAAO,CAAC,IAAIqD,KAAJ,CAAU,wBAAV,CAAD,EAAsC,qBAAtC,CAAb;AACD;;AAED,WAAO,KAAK9B,eAAZ;AACD;;AAEiB,MAAdC,cAAc,CAAEA,cAAF,EAAgC;AAChD,SAAKD,eAAL,GAAuBC,cAAvB;AACD;;AAEc,MAAXE,WAAW;AACb,QAAI,KAAKD,YAAL,IAAqB,IAAzB,EAA+B;AAC7B,YAAMzB,OAAO,CAAC,IAAIqD,KAAJ,CAAU,qBAAV,CAAD,EAAmC,qBAAnC,CAAb;AACD;;AAED,WAAO,KAAK5B,YAAZ;AACD;;AAEc,MAAXC,WAAW,CAAEA,WAAF,EAA0B;AACvC,SAAKD,YAAL,GAAoBC,WAApB;AACD;;AAEY,MAATE,SAAS;AACX,QAAI,KAAKD,UAAL,IAAmB,IAAvB,EAA6B;AAC3B,YAAM3B,OAAO,CAAC,IAAIqD,KAAJ,CAAU,mBAAV,CAAD,EAAiC,qBAAjC,CAAb;AACD;;AAED,WAAO,KAAK1B,UAAZ;AACD;;AAEY,MAATC,SAAS,CAAEA,SAAF,EAAsB;AACjC,SAAKD,UAAL,GAAkBC,SAAlB;AACD;;AAEsB,MAAnBE,mBAAmB;AACrB,WAAO,KAAKD,oBAAZ;AACD;;AAEsB,MAAnBC,mBAAmB,CAAEA,mBAAF,EAAsD;AAC3E,SAAKD,oBAAL,GAA4BC,mBAA5B;AACD;;AAES,MAANM,MAAM;AACR,QAAI,KAAKD,OAAL,IAAgB,IAApB,EAA0B;AACxB,YAAMnC,OAAO,CAAC,IAAIqD,KAAJ,CAAU,gBAAV,CAAD,EAA8B,qBAA9B,CAAb;AACD;;AAED,WAAO,KAAKlB,OAAZ;AACD;;AAES,MAANC,MAAM,CAAEA,MAAF,EAAgB;AACxB,SAAKD,OAAL,GAAeC,MAAf;AACD;;AAEU,MAAPtB,OAAO;AACT,WAAO,KAAKD,QAAZ;AACD;;AAEU,MAAPC,OAAO,CAAEA,OAAF,EAA8B;AACvC,SAAKD,QAAL,GAAgBC,OAAhB;AACD;;AAEM,MAAHkB,GAAG;AACL,WAAO,KAAKD,IAAZ;AACD;;AAEM,MAAHC,GAAG,CAAEA,GAAF,EAA0B;AAC/B,SAAKD,IAAL,GAAYC,GAAZ;AACD;;AAES,MAANE,MAAM;AACR,WAAO,KAAKD,OAAZ;AACD;;AAES,MAANC,MAAM,CAAEA,MAAF,EAA4B;AACpC,SAAKD,OAAL,GAAeC,MAAf;AACD;;AApR2B","names":["errCode","isStartable","DefaultComponents","constructor","init","_peerId","peerId","_addressManager","addressManager","_peerStore","peerStore","_upgrader","upgrader","_metrics","metrics","_registrar","registrar","_connectionManager","connectionManager","_transportManager","transportManager","_connectionGater","connectionGater","_contentRouting","contentRouting","_peerRouting","peerRouting","_datastore","datastore","_connectionProtector","connectionProtector","_dht","dht","_pubsub","pubsub","_dialer","dialer","isStarted","_started","beforeStart","Promise","all","Object","values","filter","obj","map","startable","start","afterStart","beforeStop","stop","afterStop","Error"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\src\\components.ts"],"sourcesContent":["import errCode from 'err-code'\nimport type { ConnectionGater, ConnectionProtector } from '@libp2p/interface-connection'\nimport type { ContentRouting } from '@libp2p/interface-content-routing'\nimport type { AddressManager } from '@libp2p/interface-address-manager'\nimport { isStartable, Startable } from '@libp2p/interfaces/startable'\nimport type { Metrics } from '@libp2p/interface-metrics'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { PeerRouting } from '@libp2p/interface-peer-routing'\nimport type { PeerStore } from '@libp2p/interface-peer-store'\nimport type { Registrar } from '@libp2p/interface-registrar'\nimport type { TransportManager, Upgrader } from '@libp2p/interface-transport'\nimport type { Datastore } from 'interface-datastore'\nimport type { PubSub } from '@libp2p/interface-pubsub'\nimport type { DualDHT } from '@libp2p/interface-dht'\nimport type { ConnectionManager, Dialer } from '@libp2p/interface-connection-manager'\n\nexport interface Components {\n  peerId: PeerId\n  addressManager: AddressManager\n  peerStore: PeerStore\n  upgrader: Upgrader\n  registrar: Registrar\n  connectionManager: ConnectionManager\n  transportManager: TransportManager\n  connectionGater: ConnectionGater\n  contentRouting: ContentRouting\n  peerRouting: PeerRouting\n  datastore: Datastore\n  connectionProtector?: ConnectionProtector\n  dialer: Dialer\n  metrics?: Metrics\n  dht?: DualDHT\n  pubsub?: PubSub\n}\n\nexport interface ComponentsInit {\n  peerId?: PeerId\n  addressManager?: AddressManager\n  peerStore?: PeerStore\n  upgrader?: Upgrader\n  metrics?: Metrics\n  registrar?: Registrar\n  connectionManager?: ConnectionManager\n  transportManager?: TransportManager\n  connectionGater?: ConnectionGater\n  contentRouting?: ContentRouting\n  peerRouting?: PeerRouting\n  datastore?: Datastore\n  connectionProtector?: ConnectionProtector\n  dht?: DualDHT\n  pubsub?: PubSub\n  dialer?: Dialer\n}\n\nexport class DefaultComponents implements Components, Startable {\n  private _peerId?: PeerId\n  private _addressManager?: AddressManager\n  private _peerStore?: PeerStore\n  private _upgrader?: Upgrader\n  private _metrics?: Metrics\n  private _registrar?: Registrar\n  private _connectionManager?: ConnectionManager\n  private _transportManager?: TransportManager\n  private _connectionGater?: ConnectionGater\n  private _contentRouting?: ContentRouting\n  private _peerRouting?: PeerRouting\n  private _datastore?: Datastore\n  private _connectionProtector?: ConnectionProtector\n  private _dht?: DualDHT\n  private _pubsub?: PubSub\n  private _dialer?: Dialer\n  private _started = false\n\n  constructor (init: ComponentsInit = {}) {\n    this._peerId = init.peerId\n    this._addressManager = init.addressManager\n    this._peerStore = init.peerStore\n    this._upgrader = init.upgrader\n    this._metrics = init.metrics\n    this._registrar = init.registrar\n    this._connectionManager = init.connectionManager\n    this._transportManager = init.transportManager\n    this._connectionGater = init.connectionGater\n    this._contentRouting = init.contentRouting\n    this._peerRouting = init.peerRouting\n    this._datastore = init.datastore\n    this._connectionProtector = init.connectionProtector\n    this._dht = init.dht\n    this._pubsub = init.pubsub\n    this._dialer = init.dialer\n  }\n\n  isStarted () {\n    return this._started\n  }\n\n  async beforeStart () {\n    await Promise.all(\n      Object.values(this).filter(obj => isStartable(obj)).map(async (startable: Startable) => {\n        if (startable.beforeStart != null) {\n          await startable.beforeStart()\n        }\n      })\n    )\n  }\n\n  async start () {\n    await Promise.all(\n      Object.values(this).filter(obj => isStartable(obj)).map(async (startable: Startable) => {\n        await startable.start()\n      })\n    )\n\n    this._started = true\n  }\n\n  async afterStart () {\n    await Promise.all(\n      Object.values(this).filter(obj => isStartable(obj)).map(async (startable: Startable) => {\n        if (startable.afterStart != null) {\n          await startable.afterStart()\n        }\n      })\n    )\n  }\n\n  async beforeStop () {\n    await Promise.all(\n      Object.values(this).filter(obj => isStartable(obj)).map(async (startable: Startable) => {\n        if (startable.beforeStop != null) {\n          await startable.beforeStop()\n        }\n      })\n    )\n  }\n\n  async stop () {\n    await Promise.all(\n      Object.values(this).filter(obj => isStartable(obj)).map(async (startable: Startable) => {\n        await startable.stop()\n      })\n    )\n\n    this._started = false\n  }\n\n  async afterStop () {\n    await Promise.all(\n      Object.values(this).filter(obj => isStartable(obj)).map(async (startable: Startable) => {\n        if (startable.afterStop != null) {\n          await startable.afterStop()\n        }\n      })\n    )\n  }\n\n  get peerId (): PeerId {\n    if (this._peerId == null) {\n      throw errCode(new Error('peerId not set'), 'ERR_SERVICE_MISSING')\n    }\n\n    return this._peerId\n  }\n\n  set peerId (peerId: PeerId) {\n    this._peerId = peerId\n  }\n\n  get addressManager (): AddressManager {\n    if (this._addressManager == null) {\n      throw errCode(new Error('addressManager not set'), 'ERR_SERVICE_MISSING')\n    }\n\n    return this._addressManager\n  }\n\n  set addressManager (addressManager: AddressManager) {\n    this._addressManager = addressManager\n  }\n\n  get peerStore (): PeerStore {\n    if (this._peerStore == null) {\n      throw errCode(new Error('peerStore not set'), 'ERR_SERVICE_MISSING')\n    }\n\n    return this._peerStore\n  }\n\n  set peerStore (peerStore: PeerStore) {\n    this._peerStore = peerStore\n  }\n\n  get upgrader (): Upgrader {\n    if (this._upgrader == null) {\n      throw errCode(new Error('upgrader not set'), 'ERR_SERVICE_MISSING')\n    }\n\n    return this._upgrader\n  }\n\n  set upgrader (upgrader: Upgrader) {\n    this._upgrader = upgrader\n  }\n\n  get registrar (): Registrar {\n    if (this._registrar == null) {\n      throw errCode(new Error('registrar not set'), 'ERR_SERVICE_MISSING')\n    }\n\n    return this._registrar\n  }\n\n  set registrar (registrar: Registrar) {\n    this._registrar = registrar\n  }\n\n  get connectionManager (): ConnectionManager {\n    if (this._connectionManager == null) {\n      throw errCode(new Error('connectionManager not set'), 'ERR_SERVICE_MISSING')\n    }\n\n    return this._connectionManager\n  }\n\n  set connectionManager (connectionManager: ConnectionManager) {\n    this._connectionManager = connectionManager\n  }\n\n  get transportManager (): TransportManager {\n    if (this._transportManager == null) {\n      throw errCode(new Error('transportManager not set'), 'ERR_SERVICE_MISSING')\n    }\n\n    return this._transportManager\n  }\n\n  set transportManager (transportManager: TransportManager) {\n    this._transportManager = transportManager\n  }\n\n  get connectionGater (): ConnectionGater {\n    if (this._connectionGater == null) {\n      throw errCode(new Error('connectionGater not set'), 'ERR_SERVICE_MISSING')\n    }\n\n    return this._connectionGater\n  }\n\n  set connectionGater (connectionGater: ConnectionGater) {\n    this._connectionGater = connectionGater\n  }\n\n  get contentRouting (): ContentRouting {\n    if (this._contentRouting == null) {\n      throw errCode(new Error('contentRouting not set'), 'ERR_SERVICE_MISSING')\n    }\n\n    return this._contentRouting\n  }\n\n  set contentRouting (contentRouting: ContentRouting) {\n    this._contentRouting = contentRouting\n  }\n\n  get peerRouting (): PeerRouting {\n    if (this._peerRouting == null) {\n      throw errCode(new Error('peerRouting not set'), 'ERR_SERVICE_MISSING')\n    }\n\n    return this._peerRouting\n  }\n\n  set peerRouting (peerRouting: PeerRouting) {\n    this._peerRouting = peerRouting\n  }\n\n  get datastore (): Datastore {\n    if (this._datastore == null) {\n      throw errCode(new Error('datastore not set'), 'ERR_SERVICE_MISSING')\n    }\n\n    return this._datastore\n  }\n\n  set datastore (datastore: Datastore) {\n    this._datastore = datastore\n  }\n\n  get connectionProtector (): ConnectionProtector | undefined {\n    return this._connectionProtector\n  }\n\n  set connectionProtector (connectionProtector: ConnectionProtector | undefined) {\n    this._connectionProtector = connectionProtector\n  }\n\n  get dialer (): Dialer {\n    if (this._dialer == null) {\n      throw errCode(new Error('dialer not set'), 'ERR_SERVICE_MISSING')\n    }\n\n    return this._dialer\n  }\n\n  set dialer (dialer: Dialer) {\n    this._dialer = dialer\n  }\n\n  get metrics (): Metrics | undefined {\n    return this._metrics\n  }\n\n  set metrics (metrics: Metrics | undefined) {\n    this._metrics = metrics\n  }\n\n  get dht (): DualDHT | undefined {\n    return this._dht\n  }\n\n  set dht (dht: DualDHT | undefined) {\n    this._dht = dht\n  }\n\n  get pubsub (): PubSub | undefined {\n    return this._pubsub\n  }\n\n  set pubsub (pubsub: PubSub | undefined) {\n    this._pubsub = pubsub\n  }\n}\n"]},"metadata":{},"sourceType":"module"}