{"ast":null,"code":"import { multiaddr } from '@multiformats/multiaddr';\n/*\n * Valid combinations\n */\n\nexport const DNS4 = base('dns4');\nexport const DNS6 = base('dns6');\nexport const DNSADDR = base('dnsaddr');\nexport const DNS = or(base('dns'), DNSADDR, DNS4, DNS6);\nexport const IP = or(base('ip4'), base('ip6'));\nexport const TCP = or(and(IP, base('tcp')), and(DNS, base('tcp')));\nexport const UDP = and(IP, base('udp'));\nexport const UTP = and(UDP, base('utp'));\nexport const QUIC = and(UDP, base('quic'));\nexport const QUICV1 = and(UDP, base('quic-v1'));\nexport const WebSockets = or(and(TCP, base('ws')), and(DNS, base('ws')));\nexport const WebSocketsSecure = or(and(TCP, base('wss')), and(DNS, base('wss')), and(TCP, base('tls'), base('ws')), and(DNS, base('tls'), base('ws')));\nexport const HTTP = or(and(TCP, base('http')), and(IP, base('http')), and(DNS, base('http')));\nexport const HTTPS = or(and(TCP, base('https')), and(IP, base('https')), and(DNS, base('https')));\n\nconst _WebRTCDirect = and(UDP, base('webrtc-direct'), base('certhash'));\n\nexport const WebRTCDirect = or(and(_WebRTCDirect, base('p2p')), _WebRTCDirect);\n\nconst _WebTransport = and(QUICV1, base('webtransport'), base('certhash'), base('certhash'));\n\nexport const WebTransport = or(and(_WebTransport, base('p2p')), _WebTransport);\n/**\n * @deprecated\n */\n\nexport const P2PWebRTCStar = or(and(WebSockets, base('p2p-webrtc-star'), base('p2p')), and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')), and(WebSockets, base('p2p-webrtc-star')), and(WebSocketsSecure, base('p2p-webrtc-star')));\nexport const WebSocketStar = or(and(WebSockets, base('p2p-websocket-star'), base('p2p')), and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')), and(WebSockets, base('p2p-websocket-star')), and(WebSocketsSecure, base('p2p-websocket-star')));\n/**\n * @deprecated\n */\n\nexport const P2PWebRTCDirect = or(and(HTTP, base('p2p-webrtc-direct'), base('p2p')), and(HTTPS, base('p2p-webrtc-direct'), base('p2p')), and(HTTP, base('p2p-webrtc-direct')), and(HTTPS, base('p2p-webrtc-direct')));\nexport const Reliable = or(WebSockets, WebSocketsSecure, HTTP, HTTPS, P2PWebRTCStar, P2PWebRTCDirect, TCP, UTP, QUIC, DNS, WebRTCDirect, WebTransport); // Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\n\nexport const Stardust = or(and(Reliable, base('p2p-stardust'), base('p2p')), and(Reliable, base('p2p-stardust')));\n\nconst _P2P = or(and(Reliable, base('p2p')), P2PWebRTCStar, P2PWebRTCDirect, WebRTCDirect, WebTransport, base('p2p'));\n\nconst _Circuit = or(and(_P2P, base('p2p-circuit'), _P2P), and(_P2P, base('p2p-circuit')), and(base('p2p-circuit'), _P2P), and(Reliable, base('p2p-circuit')), and(base('p2p-circuit'), Reliable), base('p2p-circuit'));\n\nconst CircuitRecursive = () => or(and(_Circuit, CircuitRecursive), _Circuit);\n\nexport const Circuit = CircuitRecursive();\nexport const P2P = or(and(Circuit, _P2P, Circuit), and(_P2P, Circuit), and(Circuit, _P2P), Circuit, _P2P);\nexport const IPFS = P2P;\nexport const WebRTC = or(and(Circuit, base('webrtc'), base('p2p')), and(Circuit, base('webrtc')), and(Reliable, base('webrtc'), base('p2p')), and(Reliable, base('webrtc')), base('webrtc'));\n/*\n * Validation funcs\n */\n\nfunction makeMatchesFunction(partialMatch) {\n  function matches(a) {\n    let ma;\n\n    try {\n      ma = multiaddr(a);\n    } catch (err) {\n      // catch error\n      return false; // also if it's invalid it's probably not matching as well so return false\n    }\n\n    const out = partialMatch(ma.protoNames());\n\n    if (out === null) {\n      return false;\n    }\n\n    if (out === true || out === false) {\n      return out;\n    }\n\n    return out.length === 0;\n  }\n\n  return matches;\n}\n\nfunction and() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  function partialMatch(a) {\n    if (a.length < args.length) {\n      return null;\n    }\n\n    let out = a;\n    args.some(arg => {\n      out = typeof arg === 'function' ? arg().partialMatch(a) : arg.partialMatch(a);\n\n      if (Array.isArray(out)) {\n        a = out;\n      }\n\n      if (out === null) {\n        return true;\n      }\n\n      return false;\n    });\n    return out;\n  }\n\n  return {\n    toString: function () {\n      return '{ ' + args.join(' ') + ' }';\n    },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch\n  };\n}\n\nfunction or() {\n  for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    args[_key2] = arguments[_key2];\n  }\n\n  function partialMatch(a) {\n    let out = null;\n    args.some(arg => {\n      const res = typeof arg === 'function' ? arg().partialMatch(a) : arg.partialMatch(a);\n\n      if (res != null) {\n        out = res;\n        return true;\n      }\n\n      return false;\n    });\n    return out;\n  }\n\n  const result = {\n    toString: function () {\n      return '{ ' + args.join(' ') + ' }';\n    },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch\n  };\n  return result;\n}\n\nfunction base(n) {\n  const name = n;\n\n  function matches(a) {\n    let ma;\n\n    try {\n      ma = multiaddr(a);\n    } catch (err) {\n      // catch error\n      return false; // also if it's invalid it's probably not matching as well so return false\n    }\n\n    const pnames = ma.protoNames();\n\n    if (pnames.length === 1 && pnames[0] === name) {\n      return true;\n    }\n\n    return false;\n  }\n\n  function partialMatch(protos) {\n    if (protos.length === 0) {\n      return null;\n    }\n\n    if (protos[0] === name) {\n      return protos.slice(1);\n    }\n\n    return null;\n  }\n\n  return {\n    toString: function () {\n      return name;\n    },\n    matches,\n    partialMatch\n  };\n}","map":{"version":3,"mappings":"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","names":["multiaddr","DNS4","base","DNS6","DNSADDR","DNS","or","IP","TCP","and","UDP","UTP","QUIC","QUICV1","WebSockets","WebSocketsSecure","HTTP","HTTPS","_WebRTCDirect","WebRTCDirect","_WebTransport","WebTransport","P2PWebRTCStar","WebSocketStar","P2PWebRTCDirect","Reliable","Stardust","_P2P","_Circuit","CircuitRecursive","Circuit","P2P","IPFS","WebRTC","makeMatchesFunction","partialMatch","matches","a","ma","err","out","protoNames","length","args","some","arg","Array","isArray","toString","join","input","res","result","n","name","pnames","protos","slice"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\websockets\\node_modules\\@multiformats\\mafmt\\src\\index.ts"],"sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nexport interface MatchesFunction { (a: string | Uint8Array | Multiaddr): boolean }\nexport interface PartialMatchesFunction { (protos: string[]): boolean | string[] | null }\n\nexport interface Mafmt {\n  toString: () => string\n  input?: Array<(Mafmt | (() => Mafmt))>\n  matches: MatchesFunction\n  partialMatch: PartialMatchesFunction\n}\n\n/*\n * Valid combinations\n */\nexport const DNS4 = base('dns4')\nexport const DNS6 = base('dns6')\nexport const DNSADDR = base('dnsaddr')\nexport const DNS = or(\n  base('dns'),\n  DNSADDR,\n  DNS4,\n  DNS6\n)\n\nexport const IP = or(base('ip4'), base('ip6'))\nexport const TCP = or(\n  and(IP, base('tcp')),\n  and(DNS, base('tcp'))\n)\nexport const UDP = and(IP, base('udp'))\nexport const UTP = and(UDP, base('utp'))\n\nexport const QUIC = and(UDP, base('quic'))\nexport const QUICV1 = and(UDP, base('quic-v1'))\n\nexport const WebSockets = or(\n  and(TCP, base('ws')),\n  and(DNS, base('ws'))\n)\n\nexport const WebSocketsSecure = or(\n  and(TCP, base('wss')),\n  and(DNS, base('wss')),\n  and(TCP, base('tls'), base('ws')),\n  and(DNS, base('tls'), base('ws'))\n)\n\nexport const HTTP = or(\n  and(TCP, base('http')),\n  and(IP, base('http')),\n  and(DNS, base('http'))\n)\n\nexport const HTTPS = or(\n  and(TCP, base('https')),\n  and(IP, base('https')),\n  and(DNS, base('https'))\n)\n\nconst _WebRTCDirect = and(UDP, base('webrtc-direct'), base('certhash'))\nexport const WebRTCDirect = or(\n  and(_WebRTCDirect, base('p2p')),\n  _WebRTCDirect\n)\n\nconst _WebTransport = and(QUICV1, base('webtransport'), base('certhash'), base('certhash'))\nexport const WebTransport = or(\n  and(_WebTransport, base('p2p')),\n  _WebTransport\n)\n\n/**\n * @deprecated\n */\nexport const P2PWebRTCStar = or(\n  and(WebSockets, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'), base('p2p')),\n  and(WebSockets, base('p2p-webrtc-star')),\n  and(WebSocketsSecure, base('p2p-webrtc-star'))\n)\n\nexport const WebSocketStar = or(\n  and(WebSockets, base('p2p-websocket-star'), base('p2p')),\n  and(WebSocketsSecure, base('p2p-websocket-star'), base('p2p')),\n  and(WebSockets, base('p2p-websocket-star')),\n  and(WebSocketsSecure, base('p2p-websocket-star'))\n)\n\n/**\n * @deprecated\n */\nexport const P2PWebRTCDirect = or(\n  and(HTTP, base('p2p-webrtc-direct'), base('p2p')),\n  and(HTTPS, base('p2p-webrtc-direct'), base('p2p')),\n  and(HTTP, base('p2p-webrtc-direct')),\n  and(HTTPS, base('p2p-webrtc-direct'))\n)\n\nexport const Reliable = or(\n  WebSockets,\n  WebSocketsSecure,\n  HTTP,\n  HTTPS,\n  P2PWebRTCStar,\n  P2PWebRTCDirect,\n  TCP,\n  UTP,\n  QUIC,\n  DNS,\n  WebRTCDirect,\n  WebTransport\n)\n\n// Unlike ws-star, stardust can run over any transport thus removing the requirement for websockets (but don't even think about running a stardust server over webrtc-star ;) )\nexport const Stardust = or(\n  and(Reliable, base('p2p-stardust'), base('p2p')),\n  and(Reliable, base('p2p-stardust'))\n)\n\nconst _P2P = or(\n  and(Reliable, base('p2p')),\n  P2PWebRTCStar,\n  P2PWebRTCDirect,\n  WebRTCDirect,\n  WebTransport,\n  base('p2p')\n)\n\nconst _Circuit = or(\n  and(_P2P, base('p2p-circuit'), _P2P),\n  and(_P2P, base('p2p-circuit')),\n  and(base('p2p-circuit'), _P2P),\n  and(Reliable, base('p2p-circuit')),\n  and(base('p2p-circuit'), Reliable),\n  base('p2p-circuit')\n)\n\nconst CircuitRecursive = (): Mafmt => or(\n  and(_Circuit, CircuitRecursive),\n  _Circuit\n)\n\nexport const Circuit = CircuitRecursive()\n\nexport const P2P = or(\n  and(Circuit, _P2P, Circuit),\n  and(_P2P, Circuit),\n  and(Circuit, _P2P),\n  Circuit,\n  _P2P\n)\n\nexport const IPFS = P2P\n\nexport const WebRTC = or(\n  and(Circuit, base('webrtc'), base('p2p')),\n  and(Circuit, base('webrtc')),\n  and(Reliable, base('webrtc'), base('p2p')),\n  and(Reliable, base('webrtc')),\n  base('webrtc')\n)\n\n/*\n * Validation funcs\n */\n\nfunction makeMatchesFunction (partialMatch: PartialMatchesFunction): (a: string | Uint8Array | Multiaddr) => boolean {\n  function matches (a: string | Uint8Array | Multiaddr): boolean {\n    let ma\n\n    try {\n      ma = multiaddr(a)\n    } catch (err: any) { // catch error\n      return false // also if it's invalid it's probably not matching as well so return false\n    }\n\n    const out = partialMatch(ma.protoNames())\n    if (out === null) {\n      return false\n    }\n\n    if (out === true || out === false) {\n      return out\n    }\n\n    return out.length === 0\n  }\n\n  return matches\n}\n\nfunction and (...args: Array<Mafmt | (() => Mafmt)>): Mafmt {\n  function partialMatch (a: string[]): boolean | string[] | null {\n    if (a.length < args.length) {\n      return null\n    }\n\n    let out: boolean | string[] | null = a\n\n    args.some((arg) => {\n      out = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n\n      if (Array.isArray(out)) {\n        a = out\n      }\n\n      if (out === null) {\n        return true\n      }\n\n      return false\n    })\n\n    return out\n  }\n\n  return {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch\n  }\n}\n\nfunction or (...args: Array<Mafmt | (() => Mafmt)>): Mafmt {\n  function partialMatch (a: string[]): boolean | string[] | null {\n    let out = null\n    args.some((arg) => {\n      const res = typeof arg === 'function'\n        ? arg().partialMatch(a)\n        : arg.partialMatch(a)\n      if (res != null) {\n        out = res\n        return true\n      }\n      return false\n    })\n\n    return out\n  }\n\n  const result = {\n    toString: function () { return '{ ' + args.join(' ') + ' }' },\n    input: args,\n    matches: makeMatchesFunction(partialMatch),\n    partialMatch\n  }\n\n  return result\n}\n\nfunction base (n: string): Mafmt {\n  const name = n\n\n  function matches (a: string | Uint8Array | Multiaddr): boolean {\n    let ma: Multiaddr\n\n    try {\n      ma = multiaddr(a)\n    } catch (err: any) { // catch error\n      return false // also if it's invalid it's probably not matching as well so return false\n    }\n\n    const pnames = ma.protoNames()\n    if (pnames.length === 1 && pnames[0] === name) {\n      return true\n    }\n    return false\n  }\n\n  function partialMatch (protos: string[]): boolean | string[] | null {\n    if (protos.length === 0) {\n      return null\n    }\n\n    if (protos[0] === name) {\n      return protos.slice(1)\n    }\n    return null\n  }\n\n  return {\n    toString: function () { return name },\n    matches,\n    partialMatch\n  }\n}\n"]},"metadata":{},"sourceType":"module"}