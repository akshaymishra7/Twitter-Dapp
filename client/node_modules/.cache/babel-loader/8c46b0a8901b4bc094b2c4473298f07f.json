{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { addLink } from './add-link.js';\nimport { decode } from '@ipld/dag-pb';\nconst log = logger('ipfs:mfs:utils:update-tree');\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n};\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\n\nexport async function updateTree(context, trail, options) {\n  options = Object.assign({}, defaultOptions, options);\n  log('Trail', trail);\n  trail = trail.slice().reverse();\n  let index = 0;\n  let child;\n\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = decode(block);\n    const cid = trail[index].cid;\n    const name = trail[index].name;\n    index++;\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      };\n      continue;\n    }\n    /** @type {{ cid: CID, size: number }} */\n\n\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    }); // new child for next loop\n\n    child = {\n      cid: result.cid,\n      name,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: result.size\n    };\n  } // @ts-expect-error - child is possibly undefined\n\n\n  const {\n    cid\n  } = child;\n  log(`Final CID ${cid}`);\n  return cid;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/files/utils/update-tree.js"],"names":["logger","addLink","decode","log","defaultOptions","shardSplitThreshold","updateTree","context","trail","options","Object","assign","slice","reverse","index","child","block","repo","blocks","getMany","map","node","cid","name","size","length","result","parent","flush","hashAlg","cidVersion"],"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SACEC,MADF,QAEO,cAFP;AAIA,MAAMC,GAAG,GAAGH,MAAM,CAAC,4BAAD,CAAlB;AAEA,MAAMI,cAAc,GAAG;AACrBC,EAAAA,mBAAmB,EAAE;AADA,CAAvB;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,UAAf,CAA2BC,OAA3B,EAAoCC,KAApC,EAA2CC,OAA3C,EAAoD;AACzDA,EAAAA,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,cAAlB,EAAkCK,OAAlC,CAAV;AAEAN,EAAAA,GAAG,CAAC,OAAD,EAAUK,KAAV,CAAH;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAACI,KAAN,GAAcC,OAAd,EAAR;AAEA,MAAIC,KAAK,GAAG,CAAZ;AACA,MAAIC,KAAJ;;AAEA,aAAW,MAAMC,KAAjB,IAA0BT,OAAO,CAACU,IAAR,CAAaC,MAAb,CAAoBC,OAApB,CAA4BX,KAAK,CAACY,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACC,GAAvB,CAA5B,CAA1B,EAAoF;AAClF,UAAMD,IAAI,GAAGnB,MAAM,CAACc,KAAD,CAAnB;AACA,UAAMM,GAAG,GAAGd,KAAK,CAACM,KAAD,CAAL,CAAaQ,GAAzB;AACA,UAAMC,IAAI,GAAGf,KAAK,CAACM,KAAD,CAAL,CAAaS,IAA1B;AACAT,IAAAA,KAAK;;AAEL,QAAI,CAACC,KAAL,EAAY;AACVA,MAAAA,KAAK,GAAG;AACNO,QAAAA,GADM;AAENC,QAAAA,IAFM;AAGNC,QAAAA,IAAI,EAAER,KAAK,CAACS;AAHN,OAAR;AAMA;AACD;AAED;;;AACA,UAAMC,MAAM,GAAG,MAAMzB,OAAO,CAACM,OAAD,EAAU;AACpCoB,MAAAA,MAAM,EAAEN,IAD4B;AAEpCE,MAAAA,IAAI,EAAER,KAAK,CAACQ,IAFwB;AAGpCD,MAAAA,GAAG,EAAEP,KAAK,CAACO,GAHyB;AAIpC;AACAE,MAAAA,IAAI,EAAET,KAAK,CAACS,IALwB;AAMpCI,MAAAA,KAAK,EAAEnB,OAAO,CAACmB,KANqB;AAOpCvB,MAAAA,mBAAmB,EAAEI,OAAO,CAACJ,mBAPO;AAQpCwB,MAAAA,OAAO,EAAEpB,OAAO,CAACoB,OARmB;AASpCC,MAAAA,UAAU,EAAErB,OAAO,CAACqB;AATgB,KAAV,CAA5B,CAjBkF,CA6BlF;;AACAf,IAAAA,KAAK,GAAG;AACNO,MAAAA,GAAG,EAAEI,MAAM,CAACJ,GADN;AAENC,MAAAA,IAFM;AAGN;AACAC,MAAAA,IAAI,EAAEE,MAAM,CAACF;AAJP,KAAR;AAMD,GA7CwD,CA+CzD;;;AACA,QAAM;AAAEF,IAAAA;AAAF,MAAUP,KAAhB;AACAZ,EAAAA,GAAG,CAAE,aAAYmB,GAAI,EAAlB,CAAH;AAEA,SAAOA,GAAP;AACD","sourcesContent":["import { logger } from '@libp2p/logger'\nimport { addLink } from './add-link.js'\nimport {\n  decode\n} from '@ipld/dag-pb'\n\nconst log = logger('ipfs:mfs:utils:update-tree')\n\nconst defaultOptions = {\n  shardSplitThreshold: 1000\n}\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {import('./to-trail').MfsTrail} MfsTrail\n */\n\n/**\n * Loop backwards through the trail, replacing links of all components to update CIDs\n *\n * @param {MfsContext} context\n * @param {MfsTrail[]} trail\n * @param {object} options\n * @param {number} options.shardSplitThreshold\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n */\nexport async function updateTree (context, trail, options) {\n  options = Object.assign({}, defaultOptions, options)\n\n  log('Trail', trail)\n  trail = trail.slice().reverse()\n\n  let index = 0\n  let child\n\n  for await (const block of context.repo.blocks.getMany(trail.map(node => node.cid))) {\n    const node = decode(block)\n    const cid = trail[index].cid\n    const name = trail[index].name\n    index++\n\n    if (!child) {\n      child = {\n        cid,\n        name,\n        size: block.length\n      }\n\n      continue\n    }\n\n    /** @type {{ cid: CID, size: number }} */\n    const result = await addLink(context, {\n      parent: node,\n      name: child.name,\n      cid: child.cid,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: child.size,\n      flush: options.flush,\n      shardSplitThreshold: options.shardSplitThreshold,\n      hashAlg: options.hashAlg,\n      cidVersion: options.cidVersion\n    })\n\n    // new child for next loop\n    child = {\n      cid: result.cid,\n      name,\n      // TODO vmx 2021-04-05: check what to do with the size\n      size: result.size\n    }\n  }\n\n  // @ts-expect-error - child is possibly undefined\n  const { cid } = child\n  log(`Final CID ${cid}`)\n\n  return cid\n}\n"]},"metadata":{},"sourceType":"module"}