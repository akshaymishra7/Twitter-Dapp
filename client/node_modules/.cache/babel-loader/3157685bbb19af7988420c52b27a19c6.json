{"ast":null,"code":"import { encode, prepare } from '@ipld/dag-pb';\nimport { UnixFS } from 'ipfs-unixfs';\nimport Dir from './dir.js';\nimport persist from './utils/persist.js';\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./dir').DirProps} DirProps\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\nclass DirFlat extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor(props, options) {\n    super(props, options);\n    /** @type {{ [key: string]: InProgressImportResult | Dir }} */\n\n    this._children = {};\n  }\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n\n\n  async put(name, value) {\n    this.cid = undefined;\n    this.size = undefined;\n    this._children[name] = value;\n  }\n  /**\n   * @param {string} name\n   */\n\n\n  get(name) {\n    return Promise.resolve(this._children[name]);\n  }\n\n  childCount() {\n    return Object.keys(this._children).length;\n  }\n\n  directChildrenCount() {\n    return this.childCount();\n  }\n\n  onlyChild() {\n    return this._children[Object.keys(this._children)[0]];\n  }\n\n  async *eachChildSeries() {\n    const keys = Object.keys(this._children);\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i];\n      yield {\n        key: key,\n        child: this._children[key]\n      };\n    }\n  }\n  /**\n   * @param {Blockstore} block\n   * @returns {AsyncIterable<ImportResult>}\n   */\n\n\n  async *flush(block) {\n    const children = Object.keys(this._children);\n    const links = [];\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]];\n\n      if (child instanceof Dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry;\n          yield child;\n        }\n      }\n\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        });\n      }\n    }\n\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    });\n    /** @type {PBNode} */\n\n    const node = {\n      Data: unixfs.marshal(),\n      Links: links\n    };\n    const buffer = encode(prepare(node));\n    const cid = await persist(buffer, block, this.options);\n    const size = buffer.length + node.Links.reduce(\n    /**\n     * @param {number} acc\n     * @param {PBLink} curr\n     */\n    (acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize), 0);\n    this.cid = cid;\n    this.size = size;\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    };\n  }\n\n}\n\nexport default DirFlat;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-unixfs-importer/src/dir-flat.js"],"names":["encode","prepare","UnixFS","Dir","persist","DirFlat","constructor","props","options","_children","put","name","value","cid","undefined","size","get","Promise","resolve","childCount","Object","keys","length","directChildrenCount","onlyChild","eachChildSeries","i","key","child","flush","block","children","links","entry","push","Name","Tsize","Hash","unixfs","type","mtime","mode","node","Data","marshal","Links","buffer","reduce","acc","curr","path"],"mappings":"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","sourcesContent":["import { encode, prepare } from '@ipld/dag-pb'\nimport { UnixFS } from 'ipfs-unixfs'\nimport Dir from './dir.js'\nimport persist from './utils/persist.js'\n\n/**\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').ImportResult} ImportResult\n * @typedef {import('./types').InProgressImportResult} InProgressImportResult\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./dir').DirProps} DirProps\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n * @typedef {import('@ipld/dag-pb').PBLink} PBLink\n */\n\nclass DirFlat extends Dir {\n  /**\n   * @param {DirProps} props\n   * @param {ImporterOptions} options\n   */\n  constructor (props, options) {\n    super(props, options)\n\n    /** @type {{ [key: string]: InProgressImportResult | Dir }} */\n    this._children = {}\n  }\n\n  /**\n   * @param {string} name\n   * @param {InProgressImportResult | Dir} value\n   */\n  async put (name, value) {\n    this.cid = undefined\n    this.size = undefined\n\n    this._children[name] = value\n  }\n\n  /**\n   * @param {string} name\n   */\n  get (name) {\n    return Promise.resolve(this._children[name])\n  }\n\n  childCount () {\n    return Object.keys(this._children).length\n  }\n\n  directChildrenCount () {\n    return this.childCount()\n  }\n\n  onlyChild () {\n    return this._children[Object.keys(this._children)[0]]\n  }\n\n  async * eachChildSeries () {\n    const keys = Object.keys(this._children)\n\n    for (let i = 0; i < keys.length; i++) {\n      const key = keys[i]\n\n      yield {\n        key: key,\n        child: this._children[key]\n      }\n    }\n  }\n\n  /**\n   * @param {Blockstore} block\n   * @returns {AsyncIterable<ImportResult>}\n   */\n  async * flush (block) {\n    const children = Object.keys(this._children)\n    const links = []\n\n    for (let i = 0; i < children.length; i++) {\n      let child = this._children[children[i]]\n\n      if (child instanceof Dir) {\n        for await (const entry of child.flush(block)) {\n          child = entry\n\n          yield child\n        }\n      }\n\n      if (child.size != null && child.cid) {\n        links.push({\n          Name: children[i],\n          Tsize: child.size,\n          Hash: child.cid\n        })\n      }\n    }\n\n    const unixfs = new UnixFS({\n      type: 'directory',\n      mtime: this.mtime,\n      mode: this.mode\n    })\n\n    /** @type {PBNode} */\n    const node = { Data: unixfs.marshal(), Links: links }\n    const buffer = encode(prepare(node))\n    const cid = await persist(buffer, block, this.options)\n    const size = buffer.length + node.Links.reduce(\n      /**\n       * @param {number} acc\n       * @param {PBLink} curr\n       */\n      (acc, curr) => acc + (curr.Tsize == null ? 0 : curr.Tsize),\n      0)\n\n    this.cid = cid\n    this.size = size\n\n    yield {\n      cid,\n      unixfs,\n      path: this.path,\n      size\n    }\n  }\n}\n\nexport default DirFlat\n"]},"metadata":{},"sourceType":"module"}