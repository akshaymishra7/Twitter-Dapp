{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { CircuitRelay as CircuitPB } from '../pb/index.js';\nimport { RELAY_CODEC } from '../multicodec.js';\nimport { StreamHandler } from './stream-handler.js';\nimport { validateAddrs } from './utils.js';\nconst log = logger('libp2p:circuit:stop');\n/**\n * Handles incoming STOP requests\n */\n\nexport function handleStop(options) {\n  const {\n    connection,\n    request,\n    streamHandler\n  } = options; // Validate the STOP request has the required input\n\n  try {\n    validateAddrs(request, streamHandler);\n  } catch (err) {\n    log.error('invalid stop request via peer %p %o', connection.remotePeer, err);\n    return;\n  } // The request is valid\n\n\n  log('stop request is valid');\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  });\n  return streamHandler.rest();\n}\n/**\n * Creates a STOP request\n */\n\nexport async function stop(options) {\n  const {\n    connection,\n    request,\n    signal\n  } = options;\n  const stream = await connection.newStream(RELAY_CODEC, {\n    signal\n  });\n  log('starting stop request to %p', connection.remotePeer);\n  const streamHandler = new StreamHandler({\n    stream\n  });\n  streamHandler.write(request);\n  const response = await streamHandler.read();\n\n  if (response == null) {\n    streamHandler.close();\n    return;\n  }\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('stop request to %p was successful', connection.remotePeer);\n    return streamHandler.rest();\n  }\n\n  log('stop request failed with code %d', response.code);\n  streamHandler.close();\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,YAAY,IAAIC,SAAzB,QAA0C,gBAA1C;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,aAAT,QAA8B,qBAA9B;AACA,SAASC,aAAT,QAA8B,YAA9B;AAMA,MAAMC,GAAG,GAAGN,MAAM,CAAC,qBAAD,CAAlB;AAQA;;;;AAGA,OAAM,SAAUO,UAAV,CAAsBC,OAAtB,EAAgD;AACpD,QAAM;AACJC,cADI;AAEJC,WAFI;AAGJC;AAHI,MAIFH,OAJJ,CADoD,CAOpD;;AACA,MAAI;AACFH,iBAAa,CAACK,OAAD,EAAUC,aAAV,CAAb;AACD,GAFD,CAEE,OAAOC,GAAP,EAAiB;AACjBN,OAAG,CAACO,KAAJ,CAAU,qCAAV,EAAiDJ,UAAU,CAACK,UAA5D,EAAwEF,GAAxE;AACA;AACD,GAbmD,CAepD;;;AACAN,KAAG,CAAC,uBAAD,CAAH;AACAK,eAAa,CAACI,KAAd,CAAoB;AAClBC,QAAI,EAAEd,SAAS,CAACe,IAAV,CAAeC,MADH;AAElBC,QAAI,EAAEjB,SAAS,CAACkB,MAAV,CAAiBC;AAFL,GAApB;AAKA,SAAOV,aAAa,CAACW,IAAd,EAAP;AACD;AAOD;;;;AAGA,OAAO,eAAeC,IAAf,CAAqBf,OAArB,EAAyC;AAC9C,QAAM;AACJC,cADI;AAEJC,WAFI;AAGJc;AAHI,MAIFhB,OAJJ;AAMA,QAAMiB,MAAM,GAAG,MAAMhB,UAAU,CAACiB,SAAX,CAAqBvB,WAArB,EAAkC;AACrDqB;AADqD,GAAlC,CAArB;AAGAlB,KAAG,CAAC,6BAAD,EAAgCG,UAAU,CAACK,UAA3C,CAAH;AACA,QAAMH,aAAa,GAAG,IAAIP,aAAJ,CAAkB;AAAEqB;AAAF,GAAlB,CAAtB;AAEAd,eAAa,CAACI,KAAd,CAAoBL,OAApB;AACA,QAAMiB,QAAQ,GAAG,MAAMhB,aAAa,CAACiB,IAAd,EAAvB;;AAEA,MAAID,QAAQ,IAAI,IAAhB,EAAsB;AACpBhB,iBAAa,CAACkB,KAAd;AACA;AACD;;AAED,MAAIF,QAAQ,CAACR,IAAT,KAAkBjB,SAAS,CAACkB,MAAV,CAAiBC,OAAvC,EAAgD;AAC9Cf,OAAG,CAAC,mCAAD,EAAsCG,UAAU,CAACK,UAAjD,CAAH;AACA,WAAOH,aAAa,CAACW,IAAd,EAAP;AACD;;AAEDhB,KAAG,CAAC,kCAAD,EAAqCqB,QAAQ,CAACR,IAA9C,CAAH;AACAR,eAAa,CAACkB,KAAd;AACD","names":["logger","CircuitRelay","CircuitPB","RELAY_CODEC","StreamHandler","validateAddrs","log","handleStop","options","connection","request","streamHandler","err","error","remotePeer","write","type","Type","STATUS","code","Status","SUCCESS","rest","stop","signal","stream","newStream","response","read","close"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\src\\circuit\\circuit\\stop.ts"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport { CircuitRelay as CircuitPB } from '../pb/index.js'\nimport { RELAY_CODEC } from '../multicodec.js'\nimport { StreamHandler } from './stream-handler.js'\nimport { validateAddrs } from './utils.js'\nimport type { Connection } from '@libp2p/interface-connection'\nimport type { Duplex } from 'it-stream-types'\nimport type { AbortOptions } from '@libp2p/interfaces'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nconst log = logger('libp2p:circuit:stop')\n\nexport interface HandleStopOptions {\n  connection: Connection\n  request: CircuitPB\n  streamHandler: StreamHandler\n}\n\n/**\n * Handles incoming STOP requests\n */\nexport function handleStop (options: HandleStopOptions): Duplex<Uint8ArrayList, Uint8ArrayList | Uint8Array> | undefined {\n  const {\n    connection,\n    request,\n    streamHandler\n  } = options\n\n  // Validate the STOP request has the required input\n  try {\n    validateAddrs(request, streamHandler)\n  } catch (err: any) {\n    log.error('invalid stop request via peer %p %o', connection.remotePeer, err)\n    return\n  }\n\n  // The request is valid\n  log('stop request is valid')\n  streamHandler.write({\n    type: CircuitPB.Type.STATUS,\n    code: CircuitPB.Status.SUCCESS\n  })\n\n  return streamHandler.rest()\n}\n\nexport interface StopOptions extends AbortOptions {\n  connection: Connection\n  request: CircuitPB\n}\n\n/**\n * Creates a STOP request\n */\nexport async function stop (options: StopOptions) {\n  const {\n    connection,\n    request,\n    signal\n  } = options\n\n  const stream = await connection.newStream(RELAY_CODEC, {\n    signal\n  })\n  log('starting stop request to %p', connection.remotePeer)\n  const streamHandler = new StreamHandler({ stream })\n\n  streamHandler.write(request)\n  const response = await streamHandler.read()\n\n  if (response == null) {\n    streamHandler.close()\n    return\n  }\n\n  if (response.code === CircuitPB.Status.SUCCESS) {\n    log('stop request to %p was successful', connection.remotePeer)\n    return streamHandler.rest()\n  }\n\n  log('stop request failed with code %d', response.code)\n  streamHandler.close()\n}\n"]},"metadata":{},"sourceType":"module"}