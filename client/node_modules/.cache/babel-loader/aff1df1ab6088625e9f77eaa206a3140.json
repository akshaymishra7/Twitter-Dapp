{"ast":null,"code":"import errCode from 'err-code';\nimport { messages, codes } from '../errors.js';\n/**\n * Wrapper class to convert events into returned values\n */\n\nexport class DHTPeerRouting {\n  constructor(dht) {\n    this.dht = dht;\n  }\n\n  async findPeer(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const event of this.dht.findPeer(peerId, options)) {\n      if (event.name === 'FINAL_PEER') {\n        return event.peer;\n      }\n    }\n\n    throw errCode(new Error(messages.NOT_FOUND), codes.ERR_NOT_FOUND);\n  }\n\n  async *getClosestPeers(key) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const event of this.dht.getClosestPeers(key, options)) {\n      if (event.name === 'FINAL_PEER') {\n        yield event.peer;\n      }\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,cAAhC;AAMA;;;;AAGA,OAAM,MAAOC,cAAP,CAAqB;AAGzBC,cAAaC,GAAb,EAAqB;AACnB,SAAKA,GAAL,GAAWA,GAAX;AACD;;AAEa,QAARC,QAAQ,CAAEC,MAAF,EAA4C;AAAA,QAA1BC,OAA0B,uEAAF,EAAE;;AACxD,eAAW,MAAMC,KAAjB,IAA0B,KAAKJ,GAAL,CAASC,QAAT,CAAkBC,MAAlB,EAA0BC,OAA1B,CAA1B,EAA8D;AAC5D,UAAIC,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC/B,eAAOD,KAAK,CAACE,IAAb;AACD;AACF;;AAED,UAAMX,OAAO,CAAC,IAAIY,KAAJ,CAAUX,QAAQ,CAACY,SAAnB,CAAD,EAAgCX,KAAK,CAACY,aAAtC,CAAb;AACD;;AAEsB,SAAfC,eAAe,CAAEC,GAAF,EAA6C;AAAA,QAA1BR,OAA0B,uEAAF,EAAE;;AAClE,eAAW,MAAMC,KAAjB,IAA0B,KAAKJ,GAAL,CAASU,eAAT,CAAyBC,GAAzB,EAA8BR,OAA9B,CAA1B,EAAkE;AAChE,UAAIC,KAAK,CAACC,IAAN,KAAe,YAAnB,EAAiC;AAC/B,cAAMD,KAAK,CAACE,IAAZ;AACD;AACF;AACF;;AAvBwB","names":["errCode","messages","codes","DHTPeerRouting","constructor","dht","findPeer","peerId","options","event","name","peer","Error","NOT_FOUND","ERR_NOT_FOUND","getClosestPeers","key"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\src\\dht\\dht-peer-routing.ts"],"sourcesContent":["import errCode from 'err-code'\nimport { messages, codes } from '../errors.js'\nimport type { PeerRouting } from '@libp2p/interface-peer-routing'\nimport type { DHT } from '@libp2p/interface-dht'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { AbortOptions } from '@libp2p/interfaces'\n\n/**\n * Wrapper class to convert events into returned values\n */\nexport class DHTPeerRouting implements PeerRouting {\n  private readonly dht: DHT\n\n  constructor (dht: DHT) {\n    this.dht = dht\n  }\n\n  async findPeer (peerId: PeerId, options: AbortOptions = {}) {\n    for await (const event of this.dht.findPeer(peerId, options)) {\n      if (event.name === 'FINAL_PEER') {\n        return event.peer\n      }\n    }\n\n    throw errCode(new Error(messages.NOT_FOUND), codes.ERR_NOT_FOUND)\n  }\n\n  async * getClosestPeers (key: Uint8Array, options: AbortOptions = {}) {\n    for await (const event of this.dht.getClosestPeers(key, options)) {\n      if (event.name === 'FINAL_PEER') {\n        yield event.peer\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}