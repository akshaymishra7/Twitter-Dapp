{"ast":null,"code":"import errCode from 'err-code';\nimport { messages, codes } from '../errors.js';\nimport { EventEmitter } from '@libp2p/interfaces/events';\nimport { symbol } from '@libp2p/interface-peer-discovery';\nexport class DummyDHT extends EventEmitter {\n  get [symbol]() {\n    return true;\n  }\n\n  get [Symbol.toStringTag]() {\n    return '@libp2p/dummy-dht';\n  }\n\n  get wan() {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n  }\n\n  get lan() {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n  }\n\n  get() {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n  }\n\n  findProviders() {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n  }\n\n  findPeer() {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n  }\n\n  getClosestPeers() {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n  }\n\n  provide() {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n  }\n\n  put() {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n  }\n\n  async getMode() {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n  }\n\n  async setMode() {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n  }\n\n  async refreshRoutingTable() {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED);\n  }\n\n}","map":{"version":3,"mappings":"AAEA,OAAOA,OAAP,MAAoB,UAApB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,cAAhC;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAASC,MAAT,QAAuB,kCAAvB;AAEA,OAAM,MAAOC,QAAP,SAAwBF,YAAxB,CAAyD;AAClD,OAANC,MAAM,IAAC;AACV,WAAO,IAAP;AACD;;AAEsB,OAAlBE,MAAM,CAACC,WAAW,IAAC;AACtB,WAAO,mBAAP;AACD;;AAEM,MAAHC,GAAG;AACL,UAAMR,OAAO,CAAC,IAAIS,KAAJ,CAAUR,QAAQ,CAACS,YAAnB,CAAD,EAAmCR,KAAK,CAACQ,YAAzC,CAAb;AACD;;AAEM,MAAHC,GAAG;AACL,UAAMX,OAAO,CAAC,IAAIS,KAAJ,CAAUR,QAAQ,CAACS,YAAnB,CAAD,EAAmCR,KAAK,CAACQ,YAAzC,CAAb;AACD;;AAEDE,KAAG;AACD,UAAMZ,OAAO,CAAC,IAAIS,KAAJ,CAAUR,QAAQ,CAACS,YAAnB,CAAD,EAAmCR,KAAK,CAACQ,YAAzC,CAAb;AACD;;AAEDG,eAAa;AACX,UAAMb,OAAO,CAAC,IAAIS,KAAJ,CAAUR,QAAQ,CAACS,YAAnB,CAAD,EAAmCR,KAAK,CAACQ,YAAzC,CAAb;AACD;;AAEDI,UAAQ;AACN,UAAMd,OAAO,CAAC,IAAIS,KAAJ,CAAUR,QAAQ,CAACS,YAAnB,CAAD,EAAmCR,KAAK,CAACQ,YAAzC,CAAb;AACD;;AAEDK,iBAAe;AACb,UAAMf,OAAO,CAAC,IAAIS,KAAJ,CAAUR,QAAQ,CAACS,YAAnB,CAAD,EAAmCR,KAAK,CAACQ,YAAzC,CAAb;AACD;;AAEDM,SAAO;AACL,UAAMhB,OAAO,CAAC,IAAIS,KAAJ,CAAUR,QAAQ,CAACS,YAAnB,CAAD,EAAmCR,KAAK,CAACQ,YAAzC,CAAb;AACD;;AAEDO,KAAG;AACD,UAAMjB,OAAO,CAAC,IAAIS,KAAJ,CAAUR,QAAQ,CAACS,YAAnB,CAAD,EAAmCR,KAAK,CAACQ,YAAzC,CAAb;AACD;;AAEY,QAAPQ,OAAO;AACX,UAAMlB,OAAO,CAAC,IAAIS,KAAJ,CAAUR,QAAQ,CAACS,YAAnB,CAAD,EAAmCR,KAAK,CAACQ,YAAzC,CAAb;AACD;;AAEY,QAAPS,OAAO;AACX,UAAMnB,OAAO,CAAC,IAAIS,KAAJ,CAAUR,QAAQ,CAACS,YAAnB,CAAD,EAAmCR,KAAK,CAACQ,YAAzC,CAAb;AACD;;AAEwB,QAAnBU,mBAAmB;AACvB,UAAMpB,OAAO,CAAC,IAAIS,KAAJ,CAAUR,QAAQ,CAACS,YAAnB,CAAD,EAAmCR,KAAK,CAACQ,YAAzC,CAAb;AACD;;AAnD4D","names":["errCode","messages","codes","EventEmitter","symbol","DummyDHT","Symbol","toStringTag","wan","Error","DHT_DISABLED","lan","get","findProviders","findPeer","getClosestPeers","provide","put","getMode","setMode","refreshRoutingTable"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\src\\dht\\dummy-dht.ts"],"sourcesContent":["import type { DualDHT, QueryEvent, SingleDHT } from '@libp2p/interface-dht'\nimport type { PeerDiscoveryEvents } from '@libp2p/interface-peer-discovery'\nimport errCode from 'err-code'\nimport { messages, codes } from '../errors.js'\nimport { EventEmitter } from '@libp2p/interfaces/events'\nimport { symbol } from '@libp2p/interface-peer-discovery'\n\nexport class DummyDHT extends EventEmitter<PeerDiscoveryEvents> implements DualDHT {\n  get [symbol] (): true {\n    return true\n  }\n\n  get [Symbol.toStringTag] () {\n    return '@libp2p/dummy-dht'\n  }\n\n  get wan (): SingleDHT {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED)\n  }\n\n  get lan (): SingleDHT {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED)\n  }\n\n  get (): AsyncIterable<QueryEvent> {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED)\n  }\n\n  findProviders (): AsyncIterable<QueryEvent> {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED)\n  }\n\n  findPeer (): AsyncIterable<QueryEvent> {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED)\n  }\n\n  getClosestPeers (): AsyncIterable<QueryEvent> {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED)\n  }\n\n  provide (): AsyncIterable<QueryEvent> {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED)\n  }\n\n  put (): AsyncIterable<QueryEvent> {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED)\n  }\n\n  async getMode (): Promise<'client' | 'server'> {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED)\n  }\n\n  async setMode (): Promise<void> {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED)\n  }\n\n  async refreshRoutingTable (): Promise<void> {\n    throw errCode(new Error(messages.DHT_DISABLED), codes.DHT_DISABLED)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}