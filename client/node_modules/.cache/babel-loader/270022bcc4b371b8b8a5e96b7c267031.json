{"ast":null,"code":"import { createTopology } from '@libp2p/topology';\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\n\nexport class TopologyListener extends EventEmitter {\n  constructor(components, init) {\n    super();\n    const {\n      protocol,\n      lan\n    } = init;\n    this.components = components;\n    this.log = logger(`libp2p:kad-dht:topology-listener:${lan ? 'lan' : 'wan'}`);\n    this.running = false;\n    this.protocol = protocol;\n  }\n\n  isStarted() {\n    return this.running;\n  }\n  /**\n   * Start the network\n   */\n\n\n  async start() {\n    if (this.running) {\n      return;\n    }\n\n    this.running = true; // register protocol with topology\n\n    const topology = createTopology({\n      onConnect: peerId => {\n        this.log('observed peer %p with protocol %s', peerId, this.protocol);\n        this.dispatchEvent(new CustomEvent('peer', {\n          detail: peerId\n        }));\n      }\n    });\n    this.registrarId = await this.components.registrar.register(this.protocol, topology);\n  }\n  /**\n   * Stop all network activity\n   */\n\n\n  async stop() {\n    this.running = false; // unregister protocol and handlers\n\n    if (this.registrarId != null) {\n      this.components.registrar.unregister(this.registrarId);\n      this.registrarId = undefined;\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAT,QAA+B,kBAA/B;AACA,SAASC,WAAT,EAAsBC,YAAtB,QAA0C,2BAA1C;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAeA;;;;AAGA,OAAM,MAAOC,gBAAP,SAAgCF,YAAhC,CAAoE;AAOxEG,cAAaC,UAAb,EAA2CC,IAA3C,EAAqE;AACnE;AAEA,UAAM;AAAEC,cAAF;AAAYC;AAAZ,QAAoBF,IAA1B;AAEA,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKI,GAAL,GAAWP,MAAM,CAAC,oCAAoCM,GAAG,GAAG,KAAH,GAAW,KAAK,EAAxD,CAAjB;AACA,SAAKE,OAAL,GAAe,KAAf;AACA,SAAKH,QAAL,GAAgBA,QAAhB;AACD;;AAEDI,WAAS;AACP,WAAO,KAAKD,OAAZ;AACD;AAED;;;;;AAGW,QAALE,KAAK;AACT,QAAI,KAAKF,OAAT,EAAkB;AAChB;AACD;;AAED,SAAKA,OAAL,GAAe,IAAf,CALS,CAOT;;AACA,UAAMG,QAAQ,GAAGd,cAAc,CAAC;AAC9Be,eAAS,EAAGC,MAAD,IAAW;AACpB,aAAKN,GAAL,CAAS,mCAAT,EAA8CM,MAA9C,EAAsD,KAAKR,QAA3D;AACA,aAAKS,aAAL,CAAmB,IAAIhB,WAAJ,CAAgB,MAAhB,EAAwB;AACzCiB,gBAAM,EAAEF;AADiC,SAAxB,CAAnB;AAGD;AAN6B,KAAD,CAA/B;AAQA,SAAKG,WAAL,GAAmB,MAAM,KAAKb,UAAL,CAAgBc,SAAhB,CAA0BC,QAA1B,CAAmC,KAAKb,QAAxC,EAAkDM,QAAlD,CAAzB;AACD;AAED;;;;;AAGU,QAAJQ,IAAI;AACR,SAAKX,OAAL,GAAe,KAAf,CADQ,CAGR;;AACA,QAAI,KAAKQ,WAAL,IAAoB,IAAxB,EAA8B;AAC5B,WAAKb,UAAL,CAAgBc,SAAhB,CAA0BG,UAA1B,CAAqC,KAAKJ,WAA1C;AACA,WAAKA,WAAL,GAAmBK,SAAnB;AACD;AACF;;AAvDuE","names":["createTopology","CustomEvent","EventEmitter","logger","TopologyListener","constructor","components","init","protocol","lan","log","running","isStarted","start","topology","onConnect","peerId","dispatchEvent","detail","registrarId","registrar","register","stop","unregister","undefined"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\kad-dht\\src\\topology-listener.ts"],"sourcesContent":["import { createTopology } from '@libp2p/topology'\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events'\nimport { logger } from '@libp2p/logger'\nimport type { Logger } from '@libp2p/logger'\nimport type { Startable } from '@libp2p/interfaces/startable'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { KadDHTComponents } from '.'\n\nexport interface TopologyListenerInit {\n  protocol: string\n  lan: boolean\n}\n\nexport interface TopologyListenerEvents {\n  'peer': CustomEvent<PeerId>\n}\n\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nexport class TopologyListener extends EventEmitter<TopologyListenerEvents> implements Startable {\n  private readonly log: Logger\n  private readonly components: KadDHTComponents\n  private readonly protocol: string\n  private running: boolean\n  private registrarId?: string\n\n  constructor (components: KadDHTComponents, init: TopologyListenerInit) {\n    super()\n\n    const { protocol, lan } = init\n\n    this.components = components\n    this.log = logger(`libp2p:kad-dht:topology-listener:${lan ? 'lan' : 'wan'}`)\n    this.running = false\n    this.protocol = protocol\n  }\n\n  isStarted (): boolean {\n    return this.running\n  }\n\n  /**\n   * Start the network\n   */\n  async start (): Promise<void> {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n\n    // register protocol with topology\n    const topology = createTopology({\n      onConnect: (peerId) => {\n        this.log('observed peer %p with protocol %s', peerId, this.protocol)\n        this.dispatchEvent(new CustomEvent('peer', {\n          detail: peerId\n        }))\n      }\n    })\n    this.registrarId = await this.components.registrar.register(this.protocol, topology)\n  }\n\n  /**\n   * Stop all network activity\n   */\n  async stop (): Promise<void> {\n    this.running = false\n\n    // unregister protocol and handlers\n    if (this.registrarId != null) {\n      this.components.registrar.unregister(this.registrarId)\n      this.registrarId = undefined\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}