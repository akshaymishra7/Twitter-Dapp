{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshay Mishra\\\\OneDrive\\\\Desktop\\\\twitter-clone-dapp\\\\client\\\\src\\\\Feed.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport TweetBox from \"./TweetBox\";\nimport Post from \"./Post\";\nimport \"./Feed.css\";\nimport FlipMove from \"react-flip-move\";\nimport axios from 'axios';\nimport { TwitterContractAddress } from './config.js';\nimport { ethers } from 'ethers';\nimport Twitter from './utils/TwitterContract.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Feed(_ref) {\n  _s();\n\n  let {\n    personal\n  } = _ref;\n  const [posts, setPosts] = useState([]);\n\n  const getUpdatedTweets = (allTweets, address) => {\n    let updatedTweets = []; // Here we set a personal flag around the tweets\n\n    for (let i = 0; i < allTweets.length; i++) {\n      if (allTweets[i].username.toLowerCase() == address.toLowerCase()) {\n        let tweet = {\n          'id': allTweets[i].id,\n          'tweetText': allTweets[i].tweetText,\n          'isDeleted': allTweets[i].isDeleted,\n          'username': allTweets[i].username,\n          'personal': true\n        };\n        updatedTweets.push(tweet);\n      } else {\n        let tweet = {\n          'id': allTweets[i].id,\n          'tweetText': allTweets[i].tweetText,\n          'isDeleted': allTweets[i].isDeleted,\n          'username': allTweets[i].username,\n          'personal': false\n        };\n        updatedTweets.push(tweet);\n      }\n    }\n\n    return updatedTweets;\n  };\n\n  const getAllTweets = async () => {\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let allTweets = await TwitterContract.getAllTweets();\n        setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    getAllTweets();\n  }, []);\n\n  const deleteTweet = key => async () => {\n    console.log(key); // Now we got the key, let's delete our tweet\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let deleteTweetTx = await TwitterContract.deleteTweet(key, true);\n        let allTweets = await TwitterContract.getAllTweets();\n        setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\n      } else {\n        console.log(\"Ethereum object doesn't exist\");\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"feed\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"feed__header\",\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Home\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TweetBox, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FlipMove, {\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n        displayName: post.username,\n        text: post.tweetText,\n        personal: post.personal,\n        onClick: deleteTweet(post.id)\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Feed, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n\n_c = Feed;\nexport default Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/client/src/Feed.jsx"],"names":["React","useState","useEffect","TweetBox","Post","FlipMove","axios","TwitterContractAddress","ethers","Twitter","Feed","personal","posts","setPosts","getUpdatedTweets","allTweets","address","updatedTweets","i","length","username","toLowerCase","tweet","id","tweetText","isDeleted","push","getAllTweets","ethereum","window","provider","providers","Web3Provider","signer","getSigner","TwitterContract","Contract","abi","selectedAddress","console","log","error","deleteTweet","key","deleteTweetTx","map","post"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport TweetBox from \"./TweetBox\";\r\nimport Post from \"./Post\";\r\nimport \"./Feed.css\";\r\nimport FlipMove from \"react-flip-move\";\r\nimport axios from 'axios';\r\nimport { TwitterContractAddress } from './config.js';\r\nimport {ethers} from 'ethers';\r\nimport Twitter from './utils/TwitterContract.json'\r\n\r\n\r\nfunction Feed({personal}) {\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  const getUpdatedTweets = (allTweets, address) => {\r\n    let updatedTweets = [];\r\n    // Here we set a personal flag around the tweets\r\n    for(let i=0; i<allTweets.length; i++) {\r\n      if(allTweets[i].username.toLowerCase() == address.toLowerCase()) {\r\n        let tweet = {\r\n          'id': allTweets[i].id,\r\n          'tweetText': allTweets[i].tweetText,\r\n          'isDeleted': allTweets[i].isDeleted,\r\n          'username': allTweets[i].username,\r\n          'personal': true\r\n        };\r\n        updatedTweets.push(tweet);\r\n      } else {\r\n        let tweet = {\r\n          'id': allTweets[i].id,\r\n          'tweetText': allTweets[i].tweetText,\r\n          'isDeleted': allTweets[i].isDeleted,\r\n          'username': allTweets[i].username,\r\n          'personal': false\r\n        };\r\n        updatedTweets.push(tweet);\r\n      }\r\n    }\r\n    return updatedTweets;\r\n  }\r\n\r\n  const getAllTweets = async() => {\r\n    try {\r\n      const {ethereum} = window\r\n\r\n      if(ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const TwitterContract = new ethers.Contract(\r\n          TwitterContractAddress,\r\n          Twitter.abi,\r\n          signer\r\n        )\r\n\r\n        let allTweets = await TwitterContract.getAllTweets();\r\n        setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist\");\r\n      }\r\n    } catch(error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAllTweets();\r\n  }, []);\r\n\r\n  const deleteTweet = key => async() => {\r\n    console.log(key);\r\n\r\n    // Now we got the key, let's delete our tweet\r\n    try {\r\n      const {ethereum} = window\r\n\r\n      if(ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const TwitterContract = new ethers.Contract(\r\n          TwitterContractAddress,\r\n          Twitter.abi,\r\n          signer\r\n        );\r\n\r\n        let deleteTweetTx = await TwitterContract.deleteTweet(key, true);\r\n        let allTweets = await TwitterContract.getAllTweets();\r\n        setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist\");\r\n      }\r\n\r\n    } catch(error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"feed\">\r\n      <div className=\"feed__header\">\r\n        <h2>Home</h2>\r\n      </div>\r\n\r\n      <TweetBox />\r\n\r\n      <FlipMove>\r\n        {posts.map((post) => (\r\n          <Post\r\n            key={post.id}\r\n            displayName={post.username}\r\n            text={post.tweetText}\r\n            personal={post.personal}\r\n            onClick={deleteTweet(post.id)}\r\n          />\r\n        ))}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n"]},"metadata":{},"sourceType":"module"}