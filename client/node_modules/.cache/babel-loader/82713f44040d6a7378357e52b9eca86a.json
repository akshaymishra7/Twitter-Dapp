{"ast":null,"code":"import { BaseDatastore } from './base.js';\nimport map from 'it-map';\nimport { pipe } from 'it-pipe';\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n *\n * @implements {Datastore}\n */\n\nexport class KeyTransformDatastore extends BaseDatastore {\n  /**\n   * @param {Datastore} child\n   * @param {KeyTransform} transform\n   */\n  constructor(child, transform) {\n    super();\n    this.child = child;\n    this.transform = transform;\n  }\n\n  open() {\n    return this.child.open();\n  }\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   */\n\n\n  put(key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  get(key, options) {\n    return this.child.get(this.transform.convert(key), options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  has(key, options) {\n    return this.child.has(this.transform.convert(key), options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  delete(key, options) {\n    return this.child.delete(this.transform.convert(key), options);\n  }\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n\n\n  async *putMany(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, _ref => {\n        let {\n          key,\n          value\n        } = _ref;\n        return {\n          key: transform.convert(key),\n          value\n        };\n      });\n    }, async function* (source) {\n      yield* child.putMany(source, options);\n    }, async function* (source) {\n      yield* map(source, _ref2 => {\n        let {\n          key,\n          value\n        } = _ref2;\n        return {\n          key: transform.invert(key),\n          value\n        };\n      });\n    });\n  }\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n\n\n  async *getMany(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, key => transform.convert(key));\n    }, async function* (source) {\n      yield* child.getMany(source, options);\n    });\n  }\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n\n\n  async *deleteMany(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const transform = this.transform;\n    const child = this.child;\n    yield* pipe(source, async function* (source) {\n      yield* map(source, key => transform.convert(key));\n    }, async function* (source) {\n      yield* child.deleteMany(source, options);\n    }, async function* (source) {\n      yield* map(source, key => transform.invert(key));\n    });\n  }\n  /**\n   * @returns {Batch}\n   */\n\n\n  batch() {\n    const b = this.child.batch();\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value);\n      },\n      delete: key => {\n        b.delete(this.transform.convert(key));\n      },\n      commit: options => {\n        return b.commit(options);\n      }\n    };\n  }\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n\n\n  query(q, options) {\n    /** @type {Query} */\n    const query = { ...q\n    };\n    query.filters = (query.filters || []).map(filter => {\n      return _ref3 => {\n        let {\n          key,\n          value\n        } = _ref3;\n        return filter({\n          key: this.transform.convert(key),\n          value\n        });\n      };\n    });\n    const {\n      prefix\n    } = q;\n\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix;\n      query.filters.push(_ref4 => {\n        let {\n          key\n        } = _ref4;\n        return this.transform.invert(key).toString().startsWith(prefix);\n      });\n    }\n\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order({\n          key: this.transform.invert(a.key),\n          value: a.value\n        }, {\n          key: this.transform.invert(b.key),\n          value: b.value\n        });\n      });\n    }\n\n    return map(this.child.query(query, options), _ref5 => {\n      let {\n        key,\n        value\n      } = _ref5;\n      return {\n        key: this.transform.invert(key),\n        value\n      };\n    });\n  }\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n\n\n  queryKeys(q, options) {\n    const query = { ...q\n    };\n    query.filters = (query.filters || []).map(filter => {\n      return key => filter(this.transform.convert(key));\n    });\n    const {\n      prefix\n    } = q;\n\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix;\n      query.filters.push(key => {\n        return this.transform.invert(key).toString().startsWith(prefix);\n      });\n    }\n\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order(this.transform.invert(a), this.transform.invert(b));\n      });\n    }\n\n    return map(this.child.queryKeys(query, options), key => {\n      return this.transform.invert(key);\n    });\n  }\n\n  close() {\n    return this.child.close();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/datastore-core/src/keytransform.js"],"names":["BaseDatastore","map","pipe","KeyTransformDatastore","constructor","child","transform","open","put","key","val","options","convert","get","has","delete","putMany","source","value","invert","getMany","deleteMany","batch","b","commit","query","q","filters","filter","prefix","push","toString","startsWith","orders","order","a","queryKeys","close"],"mappings":"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","sourcesContent":["import { BaseDatastore } from './base.js'\nimport map from 'it-map'\nimport { pipe } from 'it-pipe'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Pair} Pair\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * @template TEntry\n * @typedef {import('interface-store').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore shim, that wraps around a given datastore, changing\n * the way keys look to the user, for example namespacing\n * keys, reversing them, etc.\n *\n * @implements {Datastore}\n */\nexport class KeyTransformDatastore extends BaseDatastore {\n  /**\n   * @param {Datastore} child\n   * @param {KeyTransform} transform\n   */\n  constructor (child, transform) {\n    super()\n\n    this.child = child\n    this.transform = transform\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} val\n   * @param {Options} [options]\n   */\n  put (key, val, options) {\n    return this.child.put(this.transform.convert(key), val, options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  get (key, options) {\n    return this.child.get(this.transform.convert(key), options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  has (key, options) {\n    return this.child.has(this.transform.convert(key), options)\n  }\n\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n  delete (key, options) {\n    return this.child.delete(this.transform.convert(key), options)\n  }\n\n  /**\n   * @param {AwaitIterable<Pair>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Pair>}\n   */\n  async * putMany (source, options = {}) {\n    const transform = this.transform\n    const child = this.child\n\n    yield * pipe(\n      source,\n      async function * (source) {\n        yield * map(source, ({ key, value }) => ({\n          key: transform.convert(key),\n          value\n        }))\n      },\n      async function * (source) {\n        yield * child.putMany(source, options)\n      },\n      async function * (source) {\n        yield * map(source, ({ key, value }) => ({\n          key: transform.invert(key),\n          value\n        }))\n      }\n    )\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async * getMany (source, options = {}) {\n    const transform = this.transform\n    const child = this.child\n\n    yield * pipe(\n      source,\n      async function * (source) {\n        yield * map(source, key => transform.convert(key))\n      },\n      async function * (source) {\n        yield * child.getMany(source, options)\n      }\n    )\n  }\n\n  /**\n   * @param {AwaitIterable<Key>} source\n   * @param {Options} [options]\n   * @returns {AsyncIterable<Key>}\n   */\n  async * deleteMany (source, options = {}) {\n    const transform = this.transform\n    const child = this.child\n\n    yield * pipe(\n      source,\n      async function * (source) {\n        yield * map(source, key => transform.convert(key))\n      },\n      async function * (source) {\n        yield * child.deleteMany(source, options)\n      },\n      async function * (source) {\n        yield * map(source, key => transform.invert(key))\n      }\n    )\n  }\n\n  /**\n   * @returns {Batch}\n   */\n  batch () {\n    const b = this.child.batch()\n    return {\n      put: (key, value) => {\n        b.put(this.transform.convert(key), value)\n      },\n      delete: (key) => {\n        b.delete(this.transform.convert(key))\n      },\n      commit: (options) => {\n        return b.commit(options)\n      }\n    }\n  }\n\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n  query (q, options) {\n    /** @type {Query} */\n    const query = {\n      ...q\n    }\n\n    query.filters = (query.filters || []).map(filter => {\n      return ({ key, value }) => filter({ key: this.transform.convert(key), value })\n    })\n\n    const { prefix } = q\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix\n      query.filters.push(({ key }) => {\n        return this.transform.invert(key).toString().startsWith(prefix)\n      })\n    }\n\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order(\n          { key: this.transform.invert(a.key), value: a.value },\n          { key: this.transform.invert(b.key), value: b.value }\n        )\n      })\n    }\n\n    return map(this.child.query(query, options), ({ key, value }) => {\n      return {\n        key: this.transform.invert(key),\n        value\n      }\n    })\n  }\n\n  /**\n   * @param {KeyQuery} q\n   * @param {Options} [options]\n   */\n  queryKeys (q, options) {\n    const query = {\n      ...q\n    }\n\n    query.filters = (query.filters || []).map(filter => {\n      return (key) => filter(this.transform.convert(key))\n    })\n\n    const { prefix } = q\n    if (prefix != null && prefix !== '/') {\n      delete query.prefix\n      query.filters.push((key) => {\n        return this.transform.invert(key).toString().startsWith(prefix)\n      })\n    }\n\n    if (query.orders) {\n      query.orders = query.orders.map(order => {\n        return (a, b) => order(\n          this.transform.invert(a),\n          this.transform.invert(b)\n        )\n      })\n    }\n\n    return map(this.child.queryKeys(query, options), key => {\n      return this.transform.invert(key)\n    })\n  }\n\n  close () {\n    return this.child.close()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}