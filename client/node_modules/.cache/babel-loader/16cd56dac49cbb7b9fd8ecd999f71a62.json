{"ast":null,"code":"import hashlru from 'hashlru';\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\n\nexport class TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor(maxSize) {\n    this.lru = hashlru(maxSize);\n  }\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n\n\n  get(key) {\n    const value = this.lru.get(key);\n\n    if (value) {\n      if (value.expire && value.expire < Date.now()) {\n        this.lru.remove(key);\n        return undefined;\n      }\n\n      return value.value;\n    }\n\n    return undefined;\n  }\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n\n\n  set(key, value, ttl) {\n    this.lru.set(key, {\n      value,\n      expire: Date.now() + ttl\n    });\n  }\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n\n\n  has(key) {\n    const value = this.get(key);\n\n    if (value) {\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n\n\n  remove(key) {\n    this.lru.remove(key);\n  }\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n\n\n  clear() {\n    this.lru.clear();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core-config/src/utils/tlru.js"],"names":["hashlru","TLRU","constructor","maxSize","lru","get","key","value","expire","Date","now","remove","undefined","set","ttl","has","clear"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,SAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,IAAN,CAAW;AAChB;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,OAAF,EAAW;AACpB,SAAKC,GAAL,GAAWJ,OAAO,CAACG,OAAD,CAAlB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,GAAG,CAAEC,GAAF,EAAO;AACR,UAAMC,KAAK,GAAG,KAAKH,GAAL,CAASC,GAAT,CAAaC,GAAb,CAAd;;AACA,QAAIC,KAAJ,EAAW;AACT,UAAKA,KAAK,CAACC,MAAP,IAAmBD,KAAK,CAACC,MAAN,GAAeC,IAAI,CAACC,GAAL,EAAtC,EAAmD;AACjD,aAAKN,GAAL,CAASO,MAAT,CAAgBL,GAAhB;AACA,eAAOM,SAAP;AACD;;AACD,aAAOL,KAAK,CAACA,KAAb;AACD;;AACD,WAAOK,SAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,GAAG,CAAEP,GAAF,EAAOC,KAAP,EAAcO,GAAd,EAAmB;AACpB,SAAKV,GAAL,CAASS,GAAT,CAAaP,GAAb,EAAkB;AAAEC,MAAAA,KAAF;AAASC,MAAAA,MAAM,EAAEC,IAAI,CAACC,GAAL,KAAaI;AAA9B,KAAlB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,GAAG,CAAET,GAAF,EAAO;AACR,UAAMC,KAAK,GAAG,KAAKF,GAAL,CAASC,GAAT,CAAd;;AACA,QAAIC,KAAJ,EAAW;AACT,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEI,EAAAA,MAAM,CAAEL,GAAF,EAAO;AACX,SAAKF,GAAL,CAASO,MAAT,CAAgBL,GAAhB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEU,EAAAA,KAAK,GAAI;AACP,SAAKZ,GAAL,CAASY,KAAT;AACD;;AAvEe","sourcesContent":["import hashlru from 'hashlru'\n\n/**\n * Time Aware Least Recent Used Cache\n *\n * @see https://arxiv.org/pdf/1801.00390\n * @todo move this to ipfs-utils or it's own package\n *\n * @template T\n * @class TLRU\n */\nexport class TLRU {\n  /**\n   * Creates an instance of TLRU.\n   *\n   * @param {number} maxSize\n   */\n  constructor (maxSize) {\n    this.lru = hashlru(maxSize)\n  }\n\n  /**\n   * Get the value from the a key\n   *\n   * @param {string} key\n   * @returns {T|undefined}\n   * @memberof TLoRU\n   */\n  get (key) {\n    const value = this.lru.get(key)\n    if (value) {\n      if ((value.expire) && (value.expire < Date.now())) {\n        this.lru.remove(key)\n        return undefined\n      }\n      return value.value\n    }\n    return undefined\n  }\n\n  /**\n   * Set a key value pair\n   *\n   * @param {string} key\n   * @param {T} value\n   * @param {number} ttl - in miliseconds\n   * @returns {void}\n   */\n  set (key, value, ttl) {\n    this.lru.set(key, { value, expire: Date.now() + ttl })\n  }\n\n  /**\n   * Find if the cache has the key\n   *\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has (key) {\n    const value = this.get(key)\n    if (value) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Remove key\n   *\n   * @param {string} key\n   */\n  remove (key) {\n    this.lru.remove(key)\n  }\n\n  /**\n   * Clears the cache\n   *\n   * @memberof TLRU\n   */\n  clear () {\n    this.lru.clear()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}