{"ast":null,"code":"import { Netmask } from 'netmask';\nimport ip_regex from 'ip-regex';\nimport { isIP } from '@chainsafe/is-ip';\nimport ipaddr from 'ipaddr.js';\nconst {\n  isValid: is_valid,\n  parse\n} = ipaddr;\nconst PRIVATE_IP_RANGES = ['0.0.0.0/8', '10.0.0.0/8', '100.64.0.0/10', '127.0.0.0/8', '169.254.0.0/16', '172.16.0.0/12', '192.0.0.0/24', '192.0.0.0/29', '192.0.0.8/32', '192.0.0.9/32', '192.0.0.10/32', '192.0.0.170/32', '192.0.0.171/32', '192.0.2.0/24', '192.31.196.0/24', '192.52.193.0/24', '192.88.99.0/24', '192.168.0.0/16', '192.175.48.0/24', '198.18.0.0/15', '198.51.100.0/24', '203.0.113.0/24', '240.0.0.0/4', '255.255.255.255/32'];\nconst NETMASK_RANGES = PRIVATE_IP_RANGES.map(ip_range => new Netmask(ip_range));\n\nfunction ipv4_check(ip_addr) {\n  for (let r of NETMASK_RANGES) {\n    if (r.contains(ip_addr)) return true;\n  }\n\n  return false;\n}\n\nfunction ipv6_check(ip_addr) {\n  return /^::$/.test(ip_addr) || /^::1$/.test(ip_addr) || /^::f{4}:([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) || /^::f{4}:0.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) || /^64:ff9b::([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) || /^100::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001:2[0-9a-fA-F]:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2001:db8:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^2002:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) || /^f[c-d]([0-9a-fA-F]{2,2}):/i.test(ip_addr) || /^fe[8-9a-bA-B][0-9a-fA-F]:/i.test(ip_addr) || /^ff([0-9a-fA-F]{2,2}):/i.test(ip_addr);\n}\n\nexport default (ip => {\n  if (is_valid(ip)) {\n    const parsed = parse(ip);\n    if (parsed.kind() === 'ipv4') return ipv4_check(parsed.toNormalizedString());else if (parsed.kind() === 'ipv6') return ipv6_check(ip);\n  } else if (isIP(ip) && ip_regex.v6().test(ip)) return ipv6_check(ip);\n\n  return undefined;\n});","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/private-ip/lib/index.js"],"names":["Netmask","ip_regex","isIP","ipaddr","isValid","is_valid","parse","PRIVATE_IP_RANGES","NETMASK_RANGES","map","ip_range","ipv4_check","ip_addr","r","contains","ipv6_check","test","ip","parsed","kind","toNormalizedString","v6","undefined"],"mappings":"AAAA,SAASA,OAAT,QAAwB,SAAxB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,MAAM;AAAEC,EAAAA,OAAO,EAAEC,QAAX;AAAqBC,EAAAA;AAArB,IAA+BH,MAArC;AACA,MAAMI,iBAAiB,GAAG,CACtB,WADsB,EAEtB,YAFsB,EAGtB,eAHsB,EAItB,aAJsB,EAKtB,gBALsB,EAMtB,eANsB,EAOtB,cAPsB,EAQtB,cARsB,EAStB,cATsB,EAUtB,cAVsB,EAWtB,eAXsB,EAYtB,gBAZsB,EAatB,gBAbsB,EActB,cAdsB,EAetB,iBAfsB,EAgBtB,iBAhBsB,EAiBtB,gBAjBsB,EAkBtB,gBAlBsB,EAmBtB,iBAnBsB,EAoBtB,eApBsB,EAqBtB,iBArBsB,EAsBtB,gBAtBsB,EAuBtB,aAvBsB,EAwBtB,oBAxBsB,CAA1B;AA0BA,MAAMC,cAAc,GAAGD,iBAAiB,CAACE,GAAlB,CAAsBC,QAAQ,IAAI,IAAIV,OAAJ,CAAYU,QAAZ,CAAlC,CAAvB;;AACA,SAASC,UAAT,CAAoBC,OAApB,EAA6B;AACzB,OAAK,IAAIC,CAAT,IAAcL,cAAd,EAA8B;AAC1B,QAAIK,CAAC,CAACC,QAAF,CAAWF,OAAX,CAAJ,EACI,OAAO,IAAP;AACP;;AACD,SAAO,KAAP;AACH;;AACD,SAASG,UAAT,CAAoBH,OAApB,EAA6B;AACzB,SAAO,OAAOI,IAAP,CAAYJ,OAAZ,KACH,QAAQI,IAAR,CAAaJ,OAAb,CADG,IAEH,kEAAkEI,IAAlE,CAAuEJ,OAAvE,CAFG,IAGH,oEAAoEI,IAApE,CAAyEJ,OAAzE,CAHG,IAIH,oEAAoEI,IAApE,CAAyEJ,OAAzE,CAJG,IAKH,wFAAwFI,IAAxF,CAA6FJ,OAA7F,CALG,IAMH,iIAAiII,IAAjI,CAAsIJ,OAAtI,CANG,IAOH,6IAA6II,IAA7I,CAAkJJ,OAAlJ,CAPG,IAQH,oIAAoII,IAApI,CAAyIJ,OAAzI,CARG,IASH,oJAAoJI,IAApJ,CAAyJJ,OAAzJ,CATG,IAUH,8BAA8BI,IAA9B,CAAmCJ,OAAnC,CAVG,IAWH,8BAA8BI,IAA9B,CAAmCJ,OAAnC,CAXG,IAYH,0BAA0BI,IAA1B,CAA+BJ,OAA/B,CAZJ;AAaH;;AACD,gBAAgBK,EAAD,IAAQ;AACnB,MAAIZ,QAAQ,CAACY,EAAD,CAAZ,EAAkB;AACd,UAAMC,MAAM,GAAGZ,KAAK,CAACW,EAAD,CAApB;AACA,QAAIC,MAAM,CAACC,IAAP,OAAkB,MAAtB,EACI,OAAOR,UAAU,CAACO,MAAM,CAACE,kBAAP,EAAD,CAAjB,CADJ,KAEK,IAAIF,MAAM,CAACC,IAAP,OAAkB,MAAtB,EACD,OAAOJ,UAAU,CAACE,EAAD,CAAjB;AACP,GAND,MAOK,IAAIf,IAAI,CAACe,EAAD,CAAJ,IAAYhB,QAAQ,CAACoB,EAAT,GAAcL,IAAd,CAAmBC,EAAnB,CAAhB,EACD,OAAOF,UAAU,CAACE,EAAD,CAAjB;;AACJ,SAAOK,SAAP;AACH,CAXD","sourcesContent":["import { Netmask } from 'netmask';\nimport ip_regex from 'ip-regex';\nimport { isIP } from '@chainsafe/is-ip';\nimport ipaddr from 'ipaddr.js';\nconst { isValid: is_valid, parse } = ipaddr;\nconst PRIVATE_IP_RANGES = [\n    '0.0.0.0/8',\n    '10.0.0.0/8',\n    '100.64.0.0/10',\n    '127.0.0.0/8',\n    '169.254.0.0/16',\n    '172.16.0.0/12',\n    '192.0.0.0/24',\n    '192.0.0.0/29',\n    '192.0.0.8/32',\n    '192.0.0.9/32',\n    '192.0.0.10/32',\n    '192.0.0.170/32',\n    '192.0.0.171/32',\n    '192.0.2.0/24',\n    '192.31.196.0/24',\n    '192.52.193.0/24',\n    '192.88.99.0/24',\n    '192.168.0.0/16',\n    '192.175.48.0/24',\n    '198.18.0.0/15',\n    '198.51.100.0/24',\n    '203.0.113.0/24',\n    '240.0.0.0/4',\n    '255.255.255.255/32'\n];\nconst NETMASK_RANGES = PRIVATE_IP_RANGES.map(ip_range => new Netmask(ip_range));\nfunction ipv4_check(ip_addr) {\n    for (let r of NETMASK_RANGES) {\n        if (r.contains(ip_addr))\n            return true;\n    }\n    return false;\n}\nfunction ipv6_check(ip_addr) {\n    return /^::$/.test(ip_addr) ||\n        /^::1$/.test(ip_addr) ||\n        /^::f{4}:([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) ||\n        /^::f{4}:0.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) ||\n        /^64:ff9b::([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})$/.test(ip_addr) ||\n        /^100::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||\n        /^2001::([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||\n        /^2001:2[0-9a-fA-F]:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||\n        /^2001:db8:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||\n        /^2002:([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4}):?([0-9a-fA-F]{0,4})$/.test(ip_addr) ||\n        /^f[c-d]([0-9a-fA-F]{2,2}):/i.test(ip_addr) ||\n        /^fe[8-9a-bA-B][0-9a-fA-F]:/i.test(ip_addr) ||\n        /^ff([0-9a-fA-F]{2,2}):/i.test(ip_addr);\n}\nexport default (ip) => {\n    if (is_valid(ip)) {\n        const parsed = parse(ip);\n        if (parsed.kind() === 'ipv4')\n            return ipv4_check(parsed.toNormalizedString());\n        else if (parsed.kind() === 'ipv6')\n            return ipv6_check(ip);\n    }\n    else if (isIP(ip) && ip_regex.v6().test(ip))\n        return ipv6_check(ip);\n    return undefined;\n};\n"]},"metadata":{},"sourceType":"module"}