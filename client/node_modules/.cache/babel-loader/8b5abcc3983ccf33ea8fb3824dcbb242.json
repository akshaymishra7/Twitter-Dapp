{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { multiaddr } from '@multiformats/multiaddr';\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\nexport function createClear(_ref) {\n  let {\n    repo\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"clear\"]}\n   */\n  async function clear() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const config = await repo.config.getAll(options);\n    const removed = config.Bootstrap || [];\n    config.Bootstrap = [];\n    await repo.config.replace(config);\n    return {\n      Peers: removed.map(ma => multiaddr(ma))\n    };\n  }\n\n  return withTimeoutOption(clear);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/bootstrap/clear.js"],"names":["withTimeoutOption","multiaddr","createClear","repo","clear","options","config","getAll","removed","Bootstrap","replace","Peers","map","ma"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qCAAlC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,OAAgC;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;;AACrC;AACF;AACA;AACE,iBAAeC,KAAf,GAAoC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAClC,UAAMC,MAAM,GAAG,MAAMH,IAAI,CAACG,MAAL,CAAYC,MAAZ,CAAmBF,OAAnB,CAArB;AACA,UAAMG,OAAO,GAAGF,MAAM,CAACG,SAAP,IAAoB,EAApC;AACAH,IAAAA,MAAM,CAACG,SAAP,GAAmB,EAAnB;AAEA,UAAMN,IAAI,CAACG,MAAL,CAAYI,OAAZ,CAAoBJ,MAApB,CAAN;AAEA,WAAO;AAAEK,MAAAA,KAAK,EAAEH,OAAO,CAACI,GAAR,CAAYC,EAAE,IAAIZ,SAAS,CAACY,EAAD,CAA3B;AAAT,KAAP;AACD;;AAED,SAAOb,iBAAiB,CAACI,KAAD,CAAxB;AACD","sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createClear ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"clear\"]}\n   */\n  async function clear (options = {}) {\n    const config = await repo.config.getAll(options)\n    const removed = config.Bootstrap || []\n    config.Bootstrap = []\n\n    await repo.config.replace(config)\n\n    return { Peers: removed.map(ma => multiaddr(ma)) }\n  }\n\n  return withTimeoutOption(clear)\n}\n"]},"metadata":{},"sourceType":"module"}