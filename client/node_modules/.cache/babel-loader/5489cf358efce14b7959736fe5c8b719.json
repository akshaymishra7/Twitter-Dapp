{"ast":null,"code":"import { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport { peerIdFromString } from '@libp2p/peer-id';\n\nconst defaultAddressFilter = addrs => addrs;\n\nexport class DefaultAddressManager extends EventEmitter {\n  /**\n   * Responsible for managing the peer addresses.\n   * Peers can specify their listen and announce addresses.\n   * The listen addresses will be used by the libp2p transports to listen for new connections,\n   * while the announce addresses will be used for the peer addresses' to other peers in the network.\n   */\n  constructor(components, init) {\n    super();\n    const {\n      listen = [],\n      announce = []\n    } = init;\n    this.components = components;\n    this.listen = listen.map(ma => ma.toString());\n    this.announce = new Set(announce.map(ma => ma.toString()));\n    this.observed = new Set();\n    this.announceFilter = init.announceFilter ?? defaultAddressFilter;\n  }\n  /**\n   * Get peer listen multiaddrs\n   */\n\n\n  getListenAddrs() {\n    return Array.from(this.listen).map(a => multiaddr(a));\n  }\n  /**\n   * Get peer announcing multiaddrs\n   */\n\n\n  getAnnounceAddrs() {\n    return Array.from(this.announce).map(a => multiaddr(a));\n  }\n  /**\n   * Get observed multiaddrs\n   */\n\n\n  getObservedAddrs() {\n    return Array.from(this.observed).map(a => multiaddr(a));\n  }\n  /**\n   * Add peer observed addresses\n   * Signal that we have confidence an observed multiaddr is publicly dialable -\n   * this will make it appear in the output of getAddresses()\n   */\n\n\n  confirmObservedAddr(addr) {}\n  /**\n   * Signal that we do not have confidence an observed multiaddr is publicly dialable -\n   * this will remove it from the output of getObservedAddrs()\n   */\n\n\n  removeObservedAddr(addr) {}\n  /**\n   * Add peer observed addresses\n   */\n\n\n  addObservedAddr(addr) {\n    let ma = multiaddr(addr);\n    const remotePeer = ma.getPeerId(); // strip our peer id if it has been passed\n\n    if (remotePeer != null) {\n      const remotePeerId = peerIdFromString(remotePeer); // use same encoding for comparison\n\n      if (remotePeerId.equals(this.components.peerId)) {\n        ma = ma.decapsulate(multiaddr(`/p2p/${this.components.peerId.toString()}`));\n      }\n    }\n\n    const addrString = ma.toString(); // do not trigger the change:addresses event if we already know about this address\n\n    if (this.observed.has(addrString)) {\n      return;\n    }\n\n    this.observed.add(addrString);\n    this.dispatchEvent(new CustomEvent('change:addresses'));\n  }\n\n  getAddresses() {\n    let addrs = this.getAnnounceAddrs().map(ma => ma.toString());\n\n    if (addrs.length === 0) {\n      // no configured announce addrs, add configured listen addresses\n      addrs = this.components.transportManager.getAddrs().map(ma => ma.toString());\n    }\n\n    addrs = addrs.concat(this.getObservedAddrs().map(ma => ma.toString())); // dedupe multiaddrs\n\n    const addrSet = new Set(addrs); // Create advertising list\n\n    return this.announceFilter(Array.from(addrSet).map(str => multiaddr(str))).map(ma => {\n      // do not append our peer id to a path multiaddr as it will become invalid\n      if (ma.protos().pop()?.path === true) {\n        return ma;\n      }\n\n      if (ma.getPeerId() === this.components.peerId.toString()) {\n        return ma;\n      }\n\n      return ma.encapsulate(`/p2p/${this.components.peerId.toString()}`);\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["CustomEvent","EventEmitter","multiaddr","peerIdFromString","defaultAddressFilter","addrs","DefaultAddressManager","constructor","components","init","listen","announce","map","ma","toString","Set","observed","announceFilter","getListenAddrs","Array","from","a","getAnnounceAddrs","getObservedAddrs","confirmObservedAddr","addr","removeObservedAddr","addObservedAddr","remotePeer","getPeerId","remotePeerId","equals","peerId","decapsulate","addrString","has","add","dispatchEvent","getAddresses","length","transportManager","getAddrs","concat","addrSet","str","protos","pop","path","encapsulate"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\src\\address-manager\\index.ts"],"sourcesContent":["import type { AddressManagerEvents } from '@libp2p/interface-address-manager'\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { peerIdFromString } from '@libp2p/peer-id'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { TransportManager } from '@libp2p/interface-transport'\n\nexport interface AddressManagerInit {\n  /**\n   * Pass an function in this field to override the list of addresses\n   * that are announced to the network\n   */\n  announceFilter?: AddressFilter\n\n  /**\n   * list of multiaddrs string representation to listen\n   */\n  listen?: string[]\n\n  /**\n   * list of multiaddrs string representation to announce\n   */\n  announce?: string[]\n\n  /**\n   * list of multiaddrs string representation to never announce\n   */\n  noAnnounce?: string[]\n}\n\nexport interface DefaultAddressManagerComponents {\n  peerId: PeerId\n  transportManager: TransportManager\n}\n\n/**\n * A function that takes a list of multiaddrs and returns a list\n * to announce\n */\nexport interface AddressFilter {\n  (addrs: Multiaddr[]): Multiaddr[]\n}\n\nconst defaultAddressFilter = (addrs: Multiaddr[]): Multiaddr[] => addrs\n\nexport class DefaultAddressManager extends EventEmitter<AddressManagerEvents> {\n  private readonly components: DefaultAddressManagerComponents\n  // this is an array to allow for duplicates, e.g. multiples of `/ip4/0.0.0.0/tcp/0`\n  private readonly listen: string[]\n  private readonly announce: Set<string>\n  private readonly observed: Set<string>\n  private readonly announceFilter: AddressFilter\n\n  /**\n   * Responsible for managing the peer addresses.\n   * Peers can specify their listen and announce addresses.\n   * The listen addresses will be used by the libp2p transports to listen for new connections,\n   * while the announce addresses will be used for the peer addresses' to other peers in the network.\n   */\n  constructor (components: DefaultAddressManagerComponents, init: AddressManagerInit) {\n    super()\n\n    const { listen = [], announce = [] } = init\n\n    this.components = components\n    this.listen = listen.map(ma => ma.toString())\n    this.announce = new Set(announce.map(ma => ma.toString()))\n    this.observed = new Set()\n    this.announceFilter = init.announceFilter ?? defaultAddressFilter\n  }\n\n  /**\n   * Get peer listen multiaddrs\n   */\n  getListenAddrs (): Multiaddr[] {\n    return Array.from(this.listen).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get peer announcing multiaddrs\n   */\n  getAnnounceAddrs (): Multiaddr[] {\n    return Array.from(this.announce).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Get observed multiaddrs\n   */\n  getObservedAddrs (): Multiaddr[] {\n    return Array.from(this.observed).map((a) => multiaddr(a))\n  }\n\n  /**\n   * Add peer observed addresses\n   * Signal that we have confidence an observed multiaddr is publicly dialable -\n   * this will make it appear in the output of getAddresses()\n   */\n  confirmObservedAddr (addr: Multiaddr): void {\n\n  }\n\n  /**\n   * Signal that we do not have confidence an observed multiaddr is publicly dialable -\n   * this will remove it from the output of getObservedAddrs()\n   */\n  removeObservedAddr (addr: Multiaddr): void {\n\n  }\n\n  /**\n   * Add peer observed addresses\n   */\n  addObservedAddr (addr: string | Multiaddr): void {\n    let ma = multiaddr(addr)\n    const remotePeer = ma.getPeerId()\n\n    // strip our peer id if it has been passed\n    if (remotePeer != null) {\n      const remotePeerId = peerIdFromString(remotePeer)\n\n      // use same encoding for comparison\n      if (remotePeerId.equals(this.components.peerId)) {\n        ma = ma.decapsulate(multiaddr(`/p2p/${this.components.peerId.toString()}`))\n      }\n    }\n\n    const addrString = ma.toString()\n\n    // do not trigger the change:addresses event if we already know about this address\n    if (this.observed.has(addrString)) {\n      return\n    }\n\n    this.observed.add(addrString)\n    this.dispatchEvent(new CustomEvent('change:addresses'))\n  }\n\n  getAddresses (): Multiaddr[] {\n    let addrs = this.getAnnounceAddrs().map(ma => ma.toString())\n\n    if (addrs.length === 0) {\n      // no configured announce addrs, add configured listen addresses\n      addrs = this.components.transportManager.getAddrs().map(ma => ma.toString())\n    }\n\n    addrs = addrs.concat(this.getObservedAddrs().map(ma => ma.toString()))\n\n    // dedupe multiaddrs\n    const addrSet = new Set(addrs)\n\n    // Create advertising list\n    return this.announceFilter(Array.from(addrSet)\n      .map(str => multiaddr(str)))\n      .map(ma => {\n        // do not append our peer id to a path multiaddr as it will become invalid\n        if (ma.protos().pop()?.path === true) {\n          return ma\n        }\n\n        if (ma.getPeerId() === this.components.peerId.toString()) {\n          return ma\n        }\n\n        return ma.encapsulate(`/p2p/${this.components.peerId.toString()}`)\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}