{"ast":null,"code":"import { BitswapMessage as Message } from '../message/index.js';\nimport { Wantlist } from '../wantlist/index.js';\nimport * as CONSTANTS from '../constants.js';\nimport { MsgQueue } from './msg-queue.js';\nimport { logger } from '../utils/index.js';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { trackedMap } from '@libp2p/tracked-map';\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n */\n\nexport class WantManager {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('../network').Network} network\n   * @param {import('../stats').Stats} stats\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   */\n  constructor(peerId, network, stats, libp2p) {\n    /** @type {Map<string, MsgQueue>} */\n    this.peers = trackedMap({\n      name: 'ipfs_bitswap_want_manager_peers',\n      metrics: libp2p.metrics\n    });\n    this.wantlist = new Wantlist(stats, libp2p);\n    this.network = network;\n    this._stats = stats;\n    this._peerId = peerId;\n    this._log = logger(peerId, 'want');\n  }\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @param {boolean} cancel\n   * @param {boolean} [force]\n   */\n\n\n  _addEntries(cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel);\n    });\n    entries.forEach(e => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid.toString(base58btc));\n        } else {\n          this.wantlist.remove(e.cid);\n        }\n      } else {\n        this._log('adding to wl'); // TODO: Figure out the wantType\n        // @ts-expect-error - requires wantType\n\n\n        this.wantlist.add(e.cid, e.priority);\n      }\n    }); // broadcast changes\n\n    for (const p of this.peers.values()) {\n      p.addEntries(entries);\n    }\n  }\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n\n\n  _startPeerHandler(peerId) {\n    let mq = this.peers.get(peerId.toString());\n\n    if (mq) {\n      mq.refcnt++;\n      return;\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network); // new peer, give them the full wantlist\n\n    const fullwantlist = new Message(true);\n\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority);\n    }\n\n    mq.addMessage(fullwantlist);\n    this.peers.set(peerId.toString(), mq);\n    return mq;\n  }\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n\n\n  _stopPeerHandler(peerId) {\n    const mq = this.peers.get(peerId.toString());\n\n    if (!mq) {\n      return;\n    }\n\n    mq.refcnt--;\n\n    if (mq.refcnt > 0) {\n      return;\n    }\n\n    this.peers.delete(peerId.toString());\n  }\n  /**\n   * add all the cids to the wantlist\n   *\n   * @param {CID[]} cids\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n\n\n  wantBlocks(cids) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    this._addEntries(cids, false);\n\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids);\n      });\n    }\n  }\n  /**\n   * Remove blocks of all the given keys without respecting refcounts\n   *\n   * @param {CID[]} cids\n   */\n\n\n  unwantBlocks(cids) {\n    this._log('unwant blocks: %s', cids.length);\n\n    this._addEntries(cids, true, true);\n  }\n  /**\n   * Cancel wanting all of the given keys\n   *\n   * @param {CID[]} cids\n   */\n\n\n  cancelWants(cids) {\n    this._log('cancel wants: %s', cids.length);\n\n    this._addEntries(cids, true);\n  }\n  /**\n   * Returns a list of all currently connected peers\n   */\n\n\n  connectedPeers() {\n    return Array.from(this.peers.keys());\n  }\n  /**\n   * @param {PeerId} peerId\n   */\n\n\n  connected(peerId) {\n    this._startPeerHandler(peerId);\n  }\n  /**\n   * @param {PeerId} peerId\n   */\n\n\n  disconnected(peerId) {\n    this._stopPeerHandler(peerId);\n  }\n\n  start() {}\n\n  stop() {\n    this.peers.forEach(mq => this.disconnected(mq.peerId));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-bitswap/src/want-manager/index.js"],"names":["BitswapMessage","Message","Wantlist","CONSTANTS","MsgQueue","logger","base58btc","trackedMap","WantManager","constructor","peerId","network","stats","libp2p","peers","name","metrics","wantlist","_stats","_peerId","_log","_addEntries","cids","cancel","force","entries","map","cid","i","Entry","kMaxPriority","WantType","Block","forEach","e","removeForce","toString","remove","add","priority","p","values","addEntries","_startPeerHandler","mq","get","refcnt","fullwantlist","entry","addEntry","addMessage","set","_stopPeerHandler","delete","wantBlocks","options","signal","addEventListener","cancelWants","unwantBlocks","length","connectedPeers","Array","from","keys","connected","disconnected","start","stop"],"mappings":"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","sourcesContent":["\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { Wantlist } from '../wantlist/index.js'\nimport * as CONSTANTS from '../constants.js'\nimport { MsgQueue } from './msg-queue.js'\nimport { logger } from '../utils/index.js'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { trackedMap } from '@libp2p/tracked-map'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n */\n\nexport class WantManager {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('../network').Network} network\n   * @param {import('../stats').Stats} stats\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   */\n  constructor (peerId, network, stats, libp2p) {\n    /** @type {Map<string, MsgQueue>} */\n    this.peers = trackedMap({\n      name: 'ipfs_bitswap_want_manager_peers',\n      metrics: libp2p.metrics\n    })\n    this.wantlist = new Wantlist(stats, libp2p)\n\n    this.network = network\n    this._stats = stats\n\n    this._peerId = peerId\n    this._log = logger(peerId, 'want')\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @param {boolean} cancel\n   * @param {boolean} [force]\n   */\n  _addEntries (cids, cancel, force) {\n    const entries = cids.map((cid, i) => {\n      return new Message.Entry(cid, CONSTANTS.kMaxPriority - i, Message.WantType.Block, cancel)\n    })\n\n    entries.forEach((e) => {\n      // add changes to our wantlist\n      if (e.cancel) {\n        if (force) {\n          this.wantlist.removeForce(e.cid.toString(base58btc))\n        } else {\n          this.wantlist.remove(e.cid)\n        }\n      } else {\n        this._log('adding to wl')\n        // TODO: Figure out the wantType\n        // @ts-expect-error - requires wantType\n        this.wantlist.add(e.cid, e.priority)\n      }\n    })\n\n    // broadcast changes\n    for (const p of this.peers.values()) {\n      p.addEntries(entries)\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _startPeerHandler (peerId) {\n    let mq = this.peers.get(peerId.toString())\n\n    if (mq) {\n      mq.refcnt++\n      return\n    }\n\n    mq = new MsgQueue(this._peerId, peerId, this.network)\n\n    // new peer, give them the full wantlist\n    const fullwantlist = new Message(true)\n\n    for (const entry of this.wantlist.entries()) {\n      fullwantlist.addEntry(entry[1].cid, entry[1].priority)\n    }\n\n    mq.addMessage(fullwantlist)\n\n    this.peers.set(peerId.toString(), mq)\n    return mq\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   */\n  _stopPeerHandler (peerId) {\n    const mq = this.peers.get(peerId.toString())\n\n    if (!mq) {\n      return\n    }\n\n    mq.refcnt--\n    if (mq.refcnt > 0) {\n      return\n    }\n\n    this.peers.delete(peerId.toString())\n  }\n\n  /**\n   * add all the cids to the wantlist\n   *\n   * @param {CID[]} cids\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   */\n  wantBlocks (cids, options = {}) {\n    this._addEntries(cids, false)\n\n    if (options && options.signal) {\n      options.signal.addEventListener('abort', () => {\n        this.cancelWants(cids)\n      })\n    }\n  }\n\n  /**\n   * Remove blocks of all the given keys without respecting refcounts\n   *\n   * @param {CID[]} cids\n   */\n  unwantBlocks (cids) {\n    this._log('unwant blocks: %s', cids.length)\n    this._addEntries(cids, true, true)\n  }\n\n  /**\n   * Cancel wanting all of the given keys\n   *\n   * @param {CID[]} cids\n   */\n  cancelWants (cids) {\n    this._log('cancel wants: %s', cids.length)\n    this._addEntries(cids, true)\n  }\n\n  /**\n   * Returns a list of all currently connected peers\n   */\n  connectedPeers () {\n    return Array.from(this.peers.keys())\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  connected (peerId) {\n    this._startPeerHandler(peerId)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  disconnected (peerId) {\n    this._stopPeerHandler(peerId)\n  }\n\n  start () {\n  }\n\n  stop () {\n    this.peers.forEach((mq) => this.disconnected(mq.peerId))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}