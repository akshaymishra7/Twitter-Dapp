{"ast":null,"code":"import { isValidMultiaddr } from './utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\nexport function createAdd(_ref) {\n  let {\n    repo\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"add\"]}\n   */\n  async function add(multiaddr) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`);\n    }\n\n    const config = await repo.config.getAll(options);\n    const boostrappers = config.Bootstrap || [];\n    boostrappers.push(multiaddr.toString());\n    config.Bootstrap = Array.from(new Set(boostrappers)).sort((a, b) => a.localeCompare(b));\n    await repo.config.replace(config);\n    return {\n      Peers: [multiaddr]\n    };\n  }\n\n  return withTimeoutOption(add);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/bootstrap/add.js"],"names":["isValidMultiaddr","withTimeoutOption","createAdd","repo","add","multiaddr","options","Error","config","getAll","boostrappers","Bootstrap","push","toString","Array","from","Set","sort","a","b","localeCompare","replace","Peers"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,YAAjC;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,OAA8B;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;;AACnC;AACF;AACA;AACE,iBAAeC,GAAf,CAAoBC,SAApB,EAA6C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC3C,QAAI,CAACN,gBAAgB,CAACK,SAAD,CAArB,EAAkC;AAChC,YAAM,IAAIE,KAAJ,CAAW,GAAEF,SAAU,2BAAvB,CAAN;AACD;;AAED,UAAMG,MAAM,GAAG,MAAML,IAAI,CAACK,MAAL,CAAYC,MAAZ,CAAmBH,OAAnB,CAArB;AACA,UAAMI,YAAY,GAAGF,MAAM,CAACG,SAAP,IAAoB,EAAzC;AACAD,IAAAA,YAAY,CAACE,IAAb,CAAkBP,SAAS,CAACQ,QAAV,EAAlB;AAEAL,IAAAA,MAAM,CAACG,SAAP,GAAmBG,KAAK,CAACC,IAAN,CACjB,IAAIC,GAAJ,CAAQN,YAAR,CADiB,EAEjBO,IAFiB,CAEZ,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAACE,aAAF,CAAgBD,CAAhB,CAFE,CAAnB;AAIA,UAAMhB,IAAI,CAACK,MAAL,CAAYa,OAAZ,CAAoBb,MAApB,CAAN;AAEA,WAAO;AACLc,MAAAA,KAAK,EAAE,CAACjB,SAAD;AADF,KAAP;AAGD;;AAED,SAAOJ,iBAAiB,CAACG,GAAD,CAAxB;AACD","sourcesContent":["import { isValidMultiaddr } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createAdd ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"add\"]}\n   */\n  async function add (multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    const config = await repo.config.getAll(options)\n    const boostrappers = config.Bootstrap || []\n    boostrappers.push(multiaddr.toString())\n\n    config.Bootstrap = Array.from(\n      new Set(boostrappers)\n    ).sort((a, b) => a.localeCompare(b))\n\n    await repo.config.replace(config)\n\n    return {\n      Peers: [multiaddr]\n    }\n  }\n\n  return withTimeoutOption(add)\n}\n"]},"metadata":{},"sourceType":"module"}