{"ast":null,"code":"import 'node-forge/lib/asn1.js';\nimport 'node-forge/lib/rsa.js';\nimport { CodeError } from '@libp2p/interfaces/errors'; // @ts-expect-error types are missing\n\nimport forge from 'node-forge/lib/forge.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { bigIntegerToUintBase64url, base64urlToBigInteger } from './../util.js'; // Convert a PKCS#1 in ASN1 DER format to a JWK key\n\nexport function pkcs1ToJwk(bytes) {\n  const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'));\n  const privateKey = forge.pki.privateKeyFromAsn1(asn1); // https://tools.ietf.org/html/rfc7518#section-6.3.1\n\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(privateKey.n),\n    e: bigIntegerToUintBase64url(privateKey.e),\n    d: bigIntegerToUintBase64url(privateKey.d),\n    p: bigIntegerToUintBase64url(privateKey.p),\n    q: bigIntegerToUintBase64url(privateKey.q),\n    dp: bigIntegerToUintBase64url(privateKey.dP),\n    dq: bigIntegerToUintBase64url(privateKey.dQ),\n    qi: bigIntegerToUintBase64url(privateKey.qInv),\n    alg: 'RS256'\n  };\n} // Convert a JWK key into PKCS#1 in ASN1 DER format\n\nexport function jwkToPkcs1(jwk) {\n  if (jwk.n == null || jwk.e == null || jwk.d == null || jwk.p == null || jwk.q == null || jwk.dp == null || jwk.dq == null || jwk.qi == null) {\n    throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n  }\n\n  const asn1 = forge.pki.privateKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e),\n    d: base64urlToBigInteger(jwk.d),\n    p: base64urlToBigInteger(jwk.p),\n    q: base64urlToBigInteger(jwk.q),\n    dP: base64urlToBigInteger(jwk.dp),\n    dQ: base64urlToBigInteger(jwk.dq),\n    qInv: base64urlToBigInteger(jwk.qi)\n  });\n  return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii');\n} // Convert a PKCIX in ASN1 DER format to a JWK key\n\nexport function pkixToJwk(bytes) {\n  const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'));\n  const publicKey = forge.pki.publicKeyFromAsn1(asn1);\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(publicKey.n),\n    e: bigIntegerToUintBase64url(publicKey.e)\n  };\n} // Convert a JWK key to PKCIX in ASN1 DER format\n\nexport function jwkToPkix(jwk) {\n  if (jwk.n == null || jwk.e == null) {\n    throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS');\n  }\n\n  const asn1 = forge.pki.publicKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e)\n  });\n  return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii');\n}","map":{"version":3,"mappings":"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","names":["CodeError","forge","fromString","uint8ArrayFromString","toString","uint8ArrayToString","bigIntegerToUintBase64url","base64urlToBigInteger","pkcs1ToJwk","bytes","asn1","fromDer","privateKey","pki","privateKeyFromAsn1","kty","n","e","d","p","q","dp","dP","dq","dQ","qi","qInv","alg","jwkToPkcs1","jwk","privateKeyToAsn1","toDer","getBytes","pkixToJwk","publicKey","publicKeyFromAsn1","jwkToPkix","publicKeyToAsn1"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\crypto\\src\\keys\\rsa-utils.ts"],"sourcesContent":["import 'node-forge/lib/asn1.js'\nimport 'node-forge/lib/rsa.js'\nimport { CodeError } from '@libp2p/interfaces/errors'\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { bigIntegerToUintBase64url, base64urlToBigInteger } from './../util.js'\n\n// Convert a PKCS#1 in ASN1 DER format to a JWK key\nexport function pkcs1ToJwk (bytes: Uint8Array): JsonWebKey {\n  const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'))\n  const privateKey = forge.pki.privateKeyFromAsn1(asn1)\n\n  // https://tools.ietf.org/html/rfc7518#section-6.3.1\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(privateKey.n),\n    e: bigIntegerToUintBase64url(privateKey.e),\n    d: bigIntegerToUintBase64url(privateKey.d),\n    p: bigIntegerToUintBase64url(privateKey.p),\n    q: bigIntegerToUintBase64url(privateKey.q),\n    dp: bigIntegerToUintBase64url(privateKey.dP),\n    dq: bigIntegerToUintBase64url(privateKey.dQ),\n    qi: bigIntegerToUintBase64url(privateKey.qInv),\n    alg: 'RS256'\n  }\n}\n\n// Convert a JWK key into PKCS#1 in ASN1 DER format\nexport function jwkToPkcs1 (jwk: JsonWebKey): Uint8Array {\n  if (jwk.n == null || jwk.e == null || jwk.d == null || jwk.p == null || jwk.q == null || jwk.dp == null || jwk.dq == null || jwk.qi == null) {\n    throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS')\n  }\n\n  const asn1 = forge.pki.privateKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e),\n    d: base64urlToBigInteger(jwk.d),\n    p: base64urlToBigInteger(jwk.p),\n    q: base64urlToBigInteger(jwk.q),\n    dP: base64urlToBigInteger(jwk.dp),\n    dQ: base64urlToBigInteger(jwk.dq),\n    qInv: base64urlToBigInteger(jwk.qi)\n  })\n\n  return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii')\n}\n\n// Convert a PKCIX in ASN1 DER format to a JWK key\nexport function pkixToJwk (bytes: Uint8Array): JsonWebKey {\n  const asn1 = forge.asn1.fromDer(uint8ArrayToString(bytes, 'ascii'))\n  const publicKey = forge.pki.publicKeyFromAsn1(asn1)\n\n  return {\n    kty: 'RSA',\n    n: bigIntegerToUintBase64url(publicKey.n),\n    e: bigIntegerToUintBase64url(publicKey.e)\n  }\n}\n\n// Convert a JWK key to PKCIX in ASN1 DER format\nexport function jwkToPkix (jwk: JsonWebKey): Uint8Array {\n  if (jwk.n == null || jwk.e == null) {\n    throw new CodeError('JWK was missing components', 'ERR_INVALID_PARAMETERS')\n  }\n\n  const asn1 = forge.pki.publicKeyToAsn1({\n    n: base64urlToBigInteger(jwk.n),\n    e: base64urlToBigInteger(jwk.e)\n  })\n\n  return uint8ArrayFromString(forge.asn1.toDer(asn1).getBytes(), 'ascii')\n}\n"]},"metadata":{},"sourceType":"module"}