{"ast":null,"code":"import { asyncIterableReader, bytesReader, createDecoder } from './decoder.js';\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('./api').Block} Block\n * @typedef {import('./api').RootsReader} RootsReader\n * @typedef {import('./coding').BytesReader} BytesReader\n */\n\n/**\n * @class\n * @implements {RootsReader}\n * @property {number} version The version number of the CAR referenced by this reader (should be `1`).\n */\n\nexport class CarIteratorBase {\n  /**\n   * @param {number} version\n   * @param {CID[]} roots\n   * @param {AsyncIterable<Block>|void} iterable\n   */\n  constructor(version, roots, iterable) {\n    this._version = version;\n    this._roots = roots;\n    this._iterable = iterable;\n    this._decoded = false;\n  }\n\n  get version() {\n    return this._version;\n  }\n  /**\n   * @returns {Promise<CID[]>}\n   */\n\n\n  async getRoots() {\n    return this._roots;\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n\n}\n/**\n * Provides an iterator over all of the `Block`s in a CAR. Implements a\n * `BlockIterator` interface, or `AsyncIterable<Block>`. Where a `Block` is\n * a `{ cid:CID, bytes:Uint8Array }` pair.\n *\n * As an implementer of `AsyncIterable`, this class can be used directly in a\n * `for await (const block of iterator) {}` loop. Where the `iterator` is\n * constructed using {@link CarBlockiterator.fromBytes} or\n * {@link CarBlockiterator.fromIterable}.\n *\n * An iteration can only be performce _once_ per instantiation.\n *\n * `CarBlockIterator` also implements the `RootsReader` interface and provides\n * the {@link CarBlockiterator.getRoots `getRoots()`} method.\n *\n * Load this class with either\n * `import { CarBlockIterator } from '@ipld/car/iterator'`\n * (`const { CarBlockIterator } = require('@ipld/car/iterator')`). Or\n * `import { CarBlockIterator } from '@ipld/car'`\n * (`const { CarBlockIterator } = require('@ipld/car')`).\n *\n * @name CarBlockIterator\n * @class\n * @implements {RootsReader}\n * @implements {AsyncIterable<Block>}\n * @property {number} version The version number of the CAR referenced by this\n * iterator (should be `1`).\n */\n\nexport class CarBlockIterator extends CarIteratorBase {\n  // inherited method\n\n  /**\n   * Get the list of roots defined by the CAR referenced by this iterator. May be\n   * zero or more `CID`s.\n   *\n   * @function getRoots\n   * @memberof CarBlockIterator\n   * @instance\n   * @async\n   * @returns {Promise<CID[]>}\n   */\n\n  /**\n   * @returns {AsyncIterator<Block>}\n   */\n  [Symbol.asyncIterator]() {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once');\n    }\n    /* c8 ignore next 3 */\n\n\n    if (!this._iterable) {\n      throw new Error('Block iterable not found');\n    }\n\n    this._decoded = true;\n    return this._iterable[Symbol.asyncIterator]();\n  }\n  /**\n   * Instantiate a {@link CarBlockIterator} from a `Uint8Array` blob. Rather\n   * than decoding the entire byte array prior to returning the iterator, as in\n   * {@link CarReader.fromBytes}, only the header is decoded and the remainder\n   * of the CAR is parsed as the `Block`s as yielded.\n   *\n   * @async\n   * @static\n   * @memberof CarBlockIterator\n   * @param {Uint8Array} bytes\n   * @returns {Promise<CarBlockIterator>}\n   */\n\n\n  static async fromBytes(bytes) {\n    const {\n      version,\n      roots,\n      iterator\n    } = await fromBytes(bytes);\n    return new CarBlockIterator(version, roots, iterator);\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n  /**\n   * Instantiate a {@link CarBlockIterator} from a `AsyncIterable<Uint8Array>`,\n   * such as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).\n   * Rather than decoding the entire byte array prior to returning the iterator,\n   * as in {@link CarReader.fromIterable}, only the header is decoded and the\n   * remainder of the CAR is parsed as the `Block`s as yielded.\n   *\n   * @async\n   * @static\n   * @param {AsyncIterable<Uint8Array>} asyncIterable\n   * @returns {Promise<CarBlockIterator>}\n   */\n\n\n  static async fromIterable(asyncIterable) {\n    const {\n      version,\n      roots,\n      iterator\n    } = await fromIterable(asyncIterable);\n    return new CarBlockIterator(version, roots, iterator);\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n\n}\n/**\n * Provides an iterator over all of the `CID`s in a CAR. Implements a\n * `CIDIterator` interface, or `AsyncIterable<CID>`. Similar to\n * {@link CarBlockIterator} but only yields the CIDs in the CAR.\n *\n * As an implementer of `AsyncIterable`, this class can be used directly in a\n * `for await (const cid of iterator) {}` loop. Where the `iterator` is\n * constructed using {@link CarCIDiterator.fromBytes} or\n * {@link CarCIDiterator.fromIterable}.\n *\n * An iteration can only be performce _once_ per instantiation.\n *\n * `CarCIDIterator` also implements the `RootsReader` interface and provides\n * the {@link CarCIDiterator.getRoots `getRoots()`} method.\n *\n * Load this class with either\n * `import { CarCIDIterator } from '@ipld/car/iterator'`\n * (`const { CarCIDIterator } = require('@ipld/car/iterator')`). Or\n * `import { CarCIDIterator } from '@ipld/car'`\n * (`const { CarCIDIterator } = require('@ipld/car')`).\n *\n * @name CarCIDIterator\n * @class\n * @implements {RootsReader}\n * @implements {AsyncIterable<CID>}\n * @property {number} version The version number of the CAR referenced by this\n * iterator (should be `1`).\n */\n\nexport class CarCIDIterator extends CarIteratorBase {\n  // inherited method\n\n  /**\n   * Get the list of roots defined by the CAR referenced by this iterator. May be\n   * zero or more `CID`s.\n   *\n   * @function getRoots\n   * @memberof CarCIDIterator\n   * @instance\n   * @async\n   * @returns {Promise<CID[]>}\n   */\n\n  /**\n   * @returns {AsyncIterator<CID>}\n   */\n  [Symbol.asyncIterator]() {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once');\n    }\n    /* c8 ignore next 3 */\n\n\n    if (!this._iterable) {\n      throw new Error('Block iterable not found');\n    }\n\n    this._decoded = true;\n\n    const iterable = this._iterable[Symbol.asyncIterator]();\n\n    return {\n      async next() {\n        const next = await iterable.next();\n\n        if (next.done) {\n          return next;\n        }\n\n        return {\n          done: false,\n          value: next.value.cid\n        };\n        /* c8 ignore next 2 */\n        // Node.js 12 c8 bug\n      }\n\n    };\n  }\n  /**\n   * Instantiate a {@link CarCIDIterator} from a `Uint8Array` blob. Rather\n   * than decoding the entire byte array prior to returning the iterator, as in\n   * {@link CarReader.fromBytes}, only the header is decoded and the remainder\n   * of the CAR is parsed as the `CID`s as yielded.\n   *\n   * @async\n   * @static\n   * @memberof CarCIDIterator\n   * @param {Uint8Array} bytes\n   * @returns {Promise<CarCIDIterator>}\n   */\n\n\n  static async fromBytes(bytes) {\n    const {\n      version,\n      roots,\n      iterator\n    } = await fromBytes(bytes);\n    return new CarCIDIterator(version, roots, iterator);\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n  /**\n   * Instantiate a {@link CarCIDIterator} from a `AsyncIterable<Uint8Array>`,\n   * such as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).\n   * Rather than decoding the entire byte array prior to returning the iterator,\n   * as in {@link CarReader.fromIterable}, only the header is decoded and the\n   * remainder of the CAR is parsed as the `CID`s as yielded.\n   *\n   * @async\n   * @static\n   * @memberof CarCIDIterator\n   * @param {AsyncIterable<Uint8Array>} asyncIterable\n   * @returns {Promise<CarCIDIterator>}\n   */\n\n\n  static async fromIterable(asyncIterable) {\n    const {\n      version,\n      roots,\n      iterator\n    } = await fromIterable(asyncIterable);\n    return new CarCIDIterator(version, roots, iterator);\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n\n}\n/**\n * @param {Uint8Array} bytes\n * @returns {Promise<{ version:number, roots:CID[], iterator:AsyncIterable<Block>}>}\n */\n\nasync function fromBytes(bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new TypeError('fromBytes() requires a Uint8Array');\n  }\n\n  return decodeIterator(bytesReader(bytes));\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n/**\n * @param {AsyncIterable<Uint8Array>} asyncIterable\n * @returns {Promise<{ version:number, roots:CID[], iterator:AsyncIterable<Block>}>}\n */\n\n\nasync function fromIterable(asyncIterable) {\n  if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {\n    throw new TypeError('fromIterable() requires an async iterable');\n  }\n\n  return decodeIterator(asyncIterableReader(asyncIterable));\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n/**\n * @private\n * @param {BytesReader} reader\n * @returns {Promise<{ version:number, roots:CID[], iterator:AsyncIterable<Block>}>}\n */\n\n\nasync function decodeIterator(reader) {\n  const decoder = createDecoder(reader);\n  const {\n    version,\n    roots\n  } = await decoder.header();\n  return {\n    version,\n    roots,\n    iterator: decoder.blocks()\n  };\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/@ipld/car/src/iterator.js"],"names":["asyncIterableReader","bytesReader","createDecoder","CarIteratorBase","constructor","version","roots","iterable","_version","_roots","_iterable","_decoded","getRoots","CarBlockIterator","Symbol","asyncIterator","Error","fromBytes","bytes","iterator","fromIterable","asyncIterable","CarCIDIterator","next","done","value","cid","Uint8Array","TypeError","decodeIterator","reader","decoder","header","blocks"],"mappings":"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","sourcesContent":["import {\n  asyncIterableReader,\n  bytesReader,\n  createDecoder\n} from './decoder.js'\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('./api').Block} Block\n * @typedef {import('./api').RootsReader} RootsReader\n * @typedef {import('./coding').BytesReader} BytesReader\n */\n\n/**\n * @class\n * @implements {RootsReader}\n * @property {number} version The version number of the CAR referenced by this reader (should be `1`).\n */\nexport class CarIteratorBase {\n  /**\n   * @param {number} version\n   * @param {CID[]} roots\n   * @param {AsyncIterable<Block>|void} iterable\n   */\n  constructor (version, roots, iterable) {\n    this._version = version\n    this._roots = roots\n    this._iterable = iterable\n    this._decoded = false\n  }\n\n  get version () {\n    return this._version\n  }\n\n  /**\n   * @returns {Promise<CID[]>}\n   */\n  async getRoots () {\n    return this._roots\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n}\n\n/**\n * Provides an iterator over all of the `Block`s in a CAR. Implements a\n * `BlockIterator` interface, or `AsyncIterable<Block>`. Where a `Block` is\n * a `{ cid:CID, bytes:Uint8Array }` pair.\n *\n * As an implementer of `AsyncIterable`, this class can be used directly in a\n * `for await (const block of iterator) {}` loop. Where the `iterator` is\n * constructed using {@link CarBlockiterator.fromBytes} or\n * {@link CarBlockiterator.fromIterable}.\n *\n * An iteration can only be performce _once_ per instantiation.\n *\n * `CarBlockIterator` also implements the `RootsReader` interface and provides\n * the {@link CarBlockiterator.getRoots `getRoots()`} method.\n *\n * Load this class with either\n * `import { CarBlockIterator } from '@ipld/car/iterator'`\n * (`const { CarBlockIterator } = require('@ipld/car/iterator')`). Or\n * `import { CarBlockIterator } from '@ipld/car'`\n * (`const { CarBlockIterator } = require('@ipld/car')`).\n *\n * @name CarBlockIterator\n * @class\n * @implements {RootsReader}\n * @implements {AsyncIterable<Block>}\n * @property {number} version The version number of the CAR referenced by this\n * iterator (should be `1`).\n */\nexport class CarBlockIterator extends CarIteratorBase {\n  // inherited method\n  /**\n   * Get the list of roots defined by the CAR referenced by this iterator. May be\n   * zero or more `CID`s.\n   *\n   * @function getRoots\n   * @memberof CarBlockIterator\n   * @instance\n   * @async\n   * @returns {Promise<CID[]>}\n   */\n\n  /**\n   * @returns {AsyncIterator<Block>}\n   */\n  [Symbol.asyncIterator] () {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once')\n    }\n    /* c8 ignore next 3 */\n    if (!this._iterable) {\n      throw new Error('Block iterable not found')\n    }\n    this._decoded = true\n    return this._iterable[Symbol.asyncIterator]()\n  }\n\n  /**\n   * Instantiate a {@link CarBlockIterator} from a `Uint8Array` blob. Rather\n   * than decoding the entire byte array prior to returning the iterator, as in\n   * {@link CarReader.fromBytes}, only the header is decoded and the remainder\n   * of the CAR is parsed as the `Block`s as yielded.\n   *\n   * @async\n   * @static\n   * @memberof CarBlockIterator\n   * @param {Uint8Array} bytes\n   * @returns {Promise<CarBlockIterator>}\n   */\n  static async fromBytes (bytes) {\n    const { version, roots, iterator } = await fromBytes(bytes)\n    return new CarBlockIterator(version, roots, iterator)\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n\n  /**\n   * Instantiate a {@link CarBlockIterator} from a `AsyncIterable<Uint8Array>`,\n   * such as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).\n   * Rather than decoding the entire byte array prior to returning the iterator,\n   * as in {@link CarReader.fromIterable}, only the header is decoded and the\n   * remainder of the CAR is parsed as the `Block`s as yielded.\n   *\n   * @async\n   * @static\n   * @param {AsyncIterable<Uint8Array>} asyncIterable\n   * @returns {Promise<CarBlockIterator>}\n   */\n  static async fromIterable (asyncIterable) {\n    const { version, roots, iterator } = await fromIterable(asyncIterable)\n    return new CarBlockIterator(version, roots, iterator)\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n}\n\n/**\n * Provides an iterator over all of the `CID`s in a CAR. Implements a\n * `CIDIterator` interface, or `AsyncIterable<CID>`. Similar to\n * {@link CarBlockIterator} but only yields the CIDs in the CAR.\n *\n * As an implementer of `AsyncIterable`, this class can be used directly in a\n * `for await (const cid of iterator) {}` loop. Where the `iterator` is\n * constructed using {@link CarCIDiterator.fromBytes} or\n * {@link CarCIDiterator.fromIterable}.\n *\n * An iteration can only be performce _once_ per instantiation.\n *\n * `CarCIDIterator` also implements the `RootsReader` interface and provides\n * the {@link CarCIDiterator.getRoots `getRoots()`} method.\n *\n * Load this class with either\n * `import { CarCIDIterator } from '@ipld/car/iterator'`\n * (`const { CarCIDIterator } = require('@ipld/car/iterator')`). Or\n * `import { CarCIDIterator } from '@ipld/car'`\n * (`const { CarCIDIterator } = require('@ipld/car')`).\n *\n * @name CarCIDIterator\n * @class\n * @implements {RootsReader}\n * @implements {AsyncIterable<CID>}\n * @property {number} version The version number of the CAR referenced by this\n * iterator (should be `1`).\n */\nexport class CarCIDIterator extends CarIteratorBase {\n  // inherited method\n  /**\n   * Get the list of roots defined by the CAR referenced by this iterator. May be\n   * zero or more `CID`s.\n   *\n   * @function getRoots\n   * @memberof CarCIDIterator\n   * @instance\n   * @async\n   * @returns {Promise<CID[]>}\n   */\n\n  /**\n   * @returns {AsyncIterator<CID>}\n   */\n  [Symbol.asyncIterator] () {\n    if (this._decoded) {\n      throw new Error('Cannot decode more than once')\n    }\n    /* c8 ignore next 3 */\n    if (!this._iterable) {\n      throw new Error('Block iterable not found')\n    }\n    this._decoded = true\n    const iterable = this._iterable[Symbol.asyncIterator]()\n    return {\n      async next () {\n        const next = await iterable.next()\n        if (next.done) {\n          return next\n        }\n        return { done: false, value: next.value.cid }\n        /* c8 ignore next 2 */\n        // Node.js 12 c8 bug\n      }\n    }\n  }\n\n  /**\n   * Instantiate a {@link CarCIDIterator} from a `Uint8Array` blob. Rather\n   * than decoding the entire byte array prior to returning the iterator, as in\n   * {@link CarReader.fromBytes}, only the header is decoded and the remainder\n   * of the CAR is parsed as the `CID`s as yielded.\n   *\n   * @async\n   * @static\n   * @memberof CarCIDIterator\n   * @param {Uint8Array} bytes\n   * @returns {Promise<CarCIDIterator>}\n   */\n  static async fromBytes (bytes) {\n    const { version, roots, iterator } = await fromBytes(bytes)\n    return new CarCIDIterator(version, roots, iterator)\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n\n  /**\n   * Instantiate a {@link CarCIDIterator} from a `AsyncIterable<Uint8Array>`,\n   * such as a [modern Node.js stream](https://nodejs.org/api/stream.html#stream_streams_compatibility_with_async_generators_and_async_iterators).\n   * Rather than decoding the entire byte array prior to returning the iterator,\n   * as in {@link CarReader.fromIterable}, only the header is decoded and the\n   * remainder of the CAR is parsed as the `CID`s as yielded.\n   *\n   * @async\n   * @static\n   * @memberof CarCIDIterator\n   * @param {AsyncIterable<Uint8Array>} asyncIterable\n   * @returns {Promise<CarCIDIterator>}\n   */\n  static async fromIterable (asyncIterable) {\n    const { version, roots, iterator } = await fromIterable(asyncIterable)\n    return new CarCIDIterator(version, roots, iterator)\n    /* c8 ignore next 2 */\n    // Node.js 12 c8 bug\n  }\n}\n\n/**\n * @param {Uint8Array} bytes\n * @returns {Promise<{ version:number, roots:CID[], iterator:AsyncIterable<Block>}>}\n */\nasync function fromBytes (bytes) {\n  if (!(bytes instanceof Uint8Array)) {\n    throw new TypeError('fromBytes() requires a Uint8Array')\n  }\n  return decodeIterator(bytesReader(bytes))\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n\n/**\n * @param {AsyncIterable<Uint8Array>} asyncIterable\n * @returns {Promise<{ version:number, roots:CID[], iterator:AsyncIterable<Block>}>}\n */\nasync function fromIterable (asyncIterable) {\n  if (!asyncIterable || !(typeof asyncIterable[Symbol.asyncIterator] === 'function')) {\n    throw new TypeError('fromIterable() requires an async iterable')\n  }\n  return decodeIterator(asyncIterableReader(asyncIterable))\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n\n/**\n * @private\n * @param {BytesReader} reader\n * @returns {Promise<{ version:number, roots:CID[], iterator:AsyncIterable<Block>}>}\n */\nasync function decodeIterator (reader) {\n  const decoder = createDecoder(reader)\n  const { version, roots } = await decoder.header()\n  return { version, roots, iterator: decoder.blocks() }\n  /* c8 ignore next 2 */\n  // Node.js 12 c8 bug\n}\n"]},"metadata":{},"sourceType":"module"}