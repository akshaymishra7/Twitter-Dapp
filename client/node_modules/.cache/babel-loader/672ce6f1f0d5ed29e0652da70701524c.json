{"ast":null,"code":"import { createCodec, CODEC_TYPES } from '../codec.js';\nexport function enumeration(v) {\n  function findValue(val) {\n    // Use the reverse mapping to look up the enum key for the stored value\n    // https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\n    if (v[val.toString()] == null) {\n      throw new Error('Invalid enum value');\n    }\n\n    return v[val];\n  }\n\n  const encode = function enumEncode(val, writer) {\n    const enumValue = findValue(val);\n    writer.int32(enumValue);\n  };\n\n  const decode = function enumDecode(reader) {\n    const val = reader.int32();\n    return findValue(val);\n  }; // @ts-expect-error yeah yeah\n\n\n  return createCodec('enum', CODEC_TYPES.VARINT, encode, decode);\n}","map":{"version":3,"mappings":"AACA,SAASA,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAGA,OAAM,SAAUC,WAAV,CAA2BC,CAA3B,EAAiC;AACrC,WAASC,SAAT,CAAoBC,GAApB,EAAwC;AACtC;AACA;AACA,QAAIF,CAAC,CAACE,GAAG,CAACC,QAAJ,EAAD,CAAD,IAAqB,IAAzB,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAED,WAAOJ,CAAC,CAACE,GAAD,CAAR;AACD;;AAED,QAAMG,MAAM,GAAoC,SAASC,UAAT,CAAqBJ,GAArB,EAA0BK,MAA1B,EAAgC;AAC9E,UAAMC,SAAS,GAAGP,SAAS,CAACC,GAAD,CAA3B;AAEAK,UAAM,CAACE,KAAP,CAAaD,SAAb;AACD,GAJD;;AAMA,QAAME,MAAM,GAAoC,SAASC,UAAT,CAAqBC,MAArB,EAA2B;AACzE,UAAMV,GAAG,GAAGU,MAAM,CAACH,KAAP,EAAZ;AAEA,WAAOR,SAAS,CAACC,GAAD,CAAhB;AACD,GAJD,CAjBqC,CAuBrC;;;AACA,SAAOL,WAAW,CAAC,MAAD,EAASC,WAAW,CAACe,MAArB,EAA6BR,MAA7B,EAAqCK,MAArC,CAAlB;AACD","names":["createCodec","CODEC_TYPES","enumeration","v","findValue","val","toString","Error","encode","enumEncode","writer","enumValue","int32","decode","enumDecode","reader","VARINT"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\node_modules\\protons-runtime\\src\\codecs\\enum.ts"],"sourcesContent":["\nimport { createCodec, CODEC_TYPES } from '../codec.js'\nimport type { DecodeFunction, EncodeFunction, Codec } from '../codec.js'\n\nexport function enumeration <T> (v: any): Codec<T> {\n  function findValue (val: string | number): number {\n    // Use the reverse mapping to look up the enum key for the stored value\n    // https://www.typescriptlang.org/docs/handbook/enums.html#reverse-mappings\n    if (v[val.toString()] == null) {\n      throw new Error('Invalid enum value')\n    }\n\n    return v[val]\n  }\n\n  const encode: EncodeFunction<number | string> = function enumEncode (val, writer) {\n    const enumValue = findValue(val)\n\n    writer.int32(enumValue)\n  }\n\n  const decode: DecodeFunction<number | string> = function enumDecode (reader) {\n    const val = reader.int32()\n\n    return findValue(val)\n  }\n\n  // @ts-expect-error yeah yeah\n  return createCodec('enum', CODEC_TYPES.VARINT, encode, decode)\n}\n"]},"metadata":{},"sourceType":"module"}