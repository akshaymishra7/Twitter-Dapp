{"ast":null,"code":"import { Key } from 'interface-datastore/key';\nimport debug from 'debug';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { getWithFallback, hasWithFallback } from './utils/level.js';\nconst log = debug('ipfs:repo:version');\nconst versionKey = new Key('version');\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\n\nexport function version(store) {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    async exists() {\n      // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      return hasWithFallback(versionKey, store.has.bind(store), store);\n    },\n\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    async get() {\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const buf = await getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store);\n      return parseInt(uint8ArrayToString(buf), 10);\n    },\n\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set(version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)));\n    },\n\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    async check(expected) {\n      const version = await this.get();\n      log('comparing version: %s and %s', version, expected); // Version 6 and 7 are the same\n      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n\n      const compatibleVersion = version === 6 && expected === 7 || expected === 6 && version === 7;\n      return version === expected || compatibleVersion;\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-repo/src/version.js"],"names":["Key","debug","toString","uint8ArrayToString","fromString","uint8ArrayFromString","getWithFallback","hasWithFallback","log","versionKey","version","store","exists","has","bind","get","buf","parseInt","set","put","String","check","expected","compatibleVersion"],"mappings":"AACA,SAASA,GAAT,QAAoB,yBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AACA,SAASC,eAAT,EAA0BC,eAA1B,QAAiD,kBAAjD;AAEA,MAAMC,GAAG,GAAGP,KAAK,CAAC,mBAAD,CAAjB;AACA,MAAMQ,UAAU,GAAG,IAAIT,GAAJ,CAAQ,SAAR,CAAnB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASU,OAAT,CAAkBC,KAAlB,EAAyB;AAC9B,SAAO;AACL;AACJ;AACA;AACA;AACI,UAAMC,MAAN,GAAgB;AAAE;AAChB;AACA;AACA;AACA,aAAOL,eAAe,CAACE,UAAD,EAAaE,KAAK,CAACE,GAAN,CAAUC,IAAV,CAAeH,KAAf,CAAb,EAAoCA,KAApC,CAAtB;AACD,KAVI;;AAWL;AACJ;AACA;AACA;AACA;AACI,UAAMI,GAAN,GAAa;AACX;AACA;AACA;AACA,YAAMC,GAAG,GAAG,MAAMV,eAAe,CAACG,UAAD,EAAaE,KAAK,CAACI,GAAN,CAAUD,IAAV,CAAeH,KAAf,CAAb,EAAoCA,KAAK,CAACE,GAAN,CAAUC,IAAV,CAAeH,KAAf,CAApC,EAA2DA,KAA3D,CAAjC;AACA,aAAOM,QAAQ,CAACd,kBAAkB,CAACa,GAAD,CAAnB,EAA0B,EAA1B,CAAf;AACD,KAtBI;;AAuBL;AACJ;AACA;AACA;AACA;AACA;AACIE,IAAAA,GAAG,CAAER,OAAF,EAAW;AACZ,aAAOC,KAAK,CAACQ,GAAN,CAAUV,UAAV,EAAsBJ,oBAAoB,CAACe,MAAM,CAACV,OAAD,CAAP,CAA1C,CAAP;AACD,KA/BI;;AAgCL;AACJ;AACA;AACA;AACA;AACI,UAAMW,KAAN,CAAaC,QAAb,EAAuB;AACrB,YAAMZ,OAAO,GAAG,MAAM,KAAKK,GAAL,EAAtB;AACAP,MAAAA,GAAG,CAAC,8BAAD,EAAiCE,OAAjC,EAA0CY,QAA1C,CAAH,CAFqB,CAGrB;AACA;;AACA,YAAMC,iBAAiB,GAAIb,OAAO,KAAK,CAAZ,IAAiBY,QAAQ,KAAK,CAA/B,IAAsCA,QAAQ,KAAK,CAAb,IAAkBZ,OAAO,KAAK,CAA9F;AAEA,aAAOA,OAAO,KAAKY,QAAZ,IAAwBC,iBAA/B;AACD;;AA7CI,GAAP;AA+CD","sourcesContent":["\nimport { Key } from 'interface-datastore/key'\nimport debug from 'debug'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { getWithFallback, hasWithFallback } from './utils/level.js'\n\nconst log = debug('ipfs:repo:version')\nconst versionKey = new Key('version')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function version (store) {\n  return {\n    /**\n     * Check if a version file exists.\n     *\n     */\n    async exists () { // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      return hasWithFallback(versionKey, store.has.bind(store), store)\n    },\n    /**\n     * Get the current version.\n     *\n     * @returns {Promise<number>}\n     */\n    async get () {\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      const buf = await getWithFallback(versionKey, store.get.bind(store), store.has.bind(store), store)\n      return parseInt(uint8ArrayToString(buf), 10)\n    },\n    /**\n     * Set the version of the repo, writing it to the underlying store.\n     *\n     * @param {number} version\n     * @returns {Promise<void>}\n     */\n    set (version) {\n      return store.put(versionKey, uint8ArrayFromString(String(version)))\n    },\n    /**\n     * Check the current version, and returns true if versions matches\n     *\n     * @param {number} expected\n     */\n    async check (expected) {\n      const version = await this.get()\n      log('comparing version: %s and %s', version, expected)\n      // Version 6 and 7 are the same\n      // TODO: Clean up the compatibility logic. Repo feature detection would be ideal, or a better version schema\n      const compatibleVersion = (version === 6 && expected === 7) || (expected === 6 && version === 7)\n\n      return version === expected || compatibleVersion\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}