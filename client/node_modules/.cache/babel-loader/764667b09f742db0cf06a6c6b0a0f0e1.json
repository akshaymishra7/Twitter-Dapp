{"ast":null,"code":"import { topologySymbol as symbol } from '@libp2p/interface-registrar';\n\nconst noop = () => {};\n\nclass TopologyImpl {\n  constructor(init) {\n    this.min = init.min ?? 0;\n    this.max = init.max ?? Infinity;\n    this.peers = new Set();\n    this.onConnect = init.onConnect ?? noop;\n    this.onDisconnect = init.onDisconnect ?? noop;\n  }\n\n  get [Symbol.toStringTag]() {\n    return symbol.toString();\n  }\n\n  get [symbol]() {\n    return true;\n  }\n\n  async setRegistrar(registrar) {\n    this.registrar = registrar;\n  }\n  /**\n   * Notify about peer disconnected event\n   */\n\n\n  disconnect(peerId) {\n    this.onDisconnect(peerId);\n  }\n\n}\n\nexport function createTopology(init) {\n  return new TopologyImpl(init);\n}","map":{"version":3,"mappings":"AAAA,SAASA,cAAc,IAAIC,MAA3B,QAAyC,6BAAzC;;AAIA,MAAMC,IAAI,GAAG,MAAK,CAAG,CAArB;;AAEA,MAAMC,YAAN,CAAkB;AAahBC,cAAaC,IAAb,EAA+B;AAC7B,SAAKC,GAAL,GAAWD,IAAI,CAACC,GAAL,IAAY,CAAvB;AACA,SAAKC,GAAL,GAAWF,IAAI,CAACE,GAAL,IAAYC,QAAvB;AACA,SAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;AAEA,SAAKC,SAAL,GAAiBN,IAAI,CAACM,SAAL,IAAkBT,IAAnC;AACA,SAAKU,YAAL,GAAoBP,IAAI,CAACO,YAAL,IAAqBV,IAAzC;AACD;;AAEsB,OAAlBW,MAAM,CAACC,WAAW,IAAC;AACtB,WAAOb,MAAM,CAACc,QAAP,EAAP;AACD;;AAEU,OAANd,MAAM,IAAC;AACV,WAAO,IAAP;AACD;;AAEiB,QAAZe,YAAY,CAAEC,SAAF,EAAsB;AACtC,SAAKA,SAAL,GAAiBA,SAAjB;AACD;AAED;;;;;AAGAC,YAAU,CAAEC,MAAF,EAAgB;AACxB,SAAKP,YAAL,CAAkBO,MAAlB;AACD;;AAvCe;;AA0ClB,OAAM,SAAUC,cAAV,CAA0Bf,IAA1B,EAA4C;AAChD,SAAO,IAAIF,YAAJ,CAAiBE,IAAjB,CAAP;AACD","names":["topologySymbol","symbol","noop","TopologyImpl","constructor","init","min","max","Infinity","peers","Set","onConnect","onDisconnect","Symbol","toStringTag","toString","setRegistrar","registrar","disconnect","peerId","createTopology"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\topology\\src\\index.ts"],"sourcesContent":["import { topologySymbol as symbol } from '@libp2p/interface-registrar'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { Topology, TopologyInit, onConnectHandler, onDisconnectHandler, Registrar } from '@libp2p/interface-registrar'\n\nconst noop = () => {}\n\nclass TopologyImpl implements Topology {\n  public min: number\n  public max: number\n\n  /**\n   * Set of peers that support the protocol\n   */\n  public peers: Set<string>\n  public onConnect: onConnectHandler\n  public onDisconnect: onDisconnectHandler\n\n  protected registrar: Registrar | undefined\n\n  constructor (init: TopologyInit) {\n    this.min = init.min ?? 0\n    this.max = init.max ?? Infinity\n    this.peers = new Set()\n\n    this.onConnect = init.onConnect ?? noop\n    this.onDisconnect = init.onDisconnect ?? noop\n  }\n\n  get [Symbol.toStringTag] () {\n    return symbol.toString()\n  }\n\n  get [symbol] () {\n    return true\n  }\n\n  async setRegistrar (registrar: Registrar) {\n    this.registrar = registrar\n  }\n\n  /**\n   * Notify about peer disconnected event\n   */\n  disconnect (peerId: PeerId) {\n    this.onDisconnect(peerId)\n  }\n}\n\nexport function createTopology (init: TopologyInit): Topology {\n  return new TopologyImpl(init)\n}\n"]},"metadata":{},"sourceType":"module"}