{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { Message } from '../../message/index.js';\nimport { removePrivateAddresses, removePublicAddresses } from '../../utils.js';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:kad-dht:rpc:handlers:get-providers');\nexport class GetProvidersHandler {\n  constructor(components, init) {\n    const {\n      peerRouting,\n      providers,\n      lan\n    } = init;\n    this.components = components;\n    this.peerRouting = peerRouting;\n    this.providers = providers;\n    this.lan = Boolean(lan);\n  }\n\n  async handle(peerId, msg) {\n    let cid;\n\n    try {\n      cid = CID.decode(msg.key);\n    } catch (err) {\n      throw new CodeError('Invalid CID', 'ERR_INVALID_CID');\n    }\n\n    log('%p asking for providers for %s', peerId, cid);\n    const [peers, closer] = await Promise.all([this.providers.getProviders(cid), this.peerRouting.getCloserPeersOffline(msg.key, peerId)]);\n    const providerPeers = await this._getPeers(peers);\n    const closerPeers = await this._getPeers(closer.map(_ref => {\n      let {\n        id\n      } = _ref;\n      return id;\n    }));\n    const response = new Message(msg.type, msg.key, msg.clusterLevel);\n\n    if (providerPeers.length > 0) {\n      response.providerPeers = providerPeers;\n    }\n\n    if (closerPeers.length > 0) {\n      response.closerPeers = closerPeers;\n    }\n\n    log('got %s providers %s closerPeers', providerPeers.length, closerPeers.length);\n    return response;\n  }\n\n  async _getAddresses(peerId) {\n    const addrs = await this.components.peerStore.addressBook.get(peerId);\n    return addrs.map(address => address.multiaddr);\n  }\n\n  async _getPeers(peerIds) {\n    const output = [];\n    const addrFilter = this.lan ? removePublicAddresses : removePrivateAddresses;\n\n    for (const peerId of peerIds) {\n      const peer = addrFilter({\n        id: peerId,\n        multiaddrs: await this._getAddresses(peerId),\n        protocols: []\n      });\n\n      if (peer.multiaddrs.length > 0) {\n        output.push(peer);\n      }\n    }\n\n    return output;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["CID","CodeError","Message","removePrivateAddresses","removePublicAddresses","logger","log","GetProvidersHandler","constructor","components","init","peerRouting","providers","lan","Boolean","handle","peerId","msg","cid","decode","key","err","peers","closer","Promise","all","getProviders","getCloserPeersOffline","providerPeers","_getPeers","closerPeers","map","id","response","type","clusterLevel","length","_getAddresses","addrs","peerStore","addressBook","get","address","multiaddr","peerIds","output","addrFilter","peer","multiaddrs","protocols","push"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\kad-dht\\src\\rpc\\handlers\\get-providers.ts"],"sourcesContent":["import { CID } from 'multiformats/cid'\nimport { CodeError } from '@libp2p/interfaces/errors'\nimport { Message } from '../../message/index.js'\nimport {\n  removePrivateAddresses,\n  removePublicAddresses\n} from '../../utils.js'\nimport { logger } from '@libp2p/logger'\nimport type { DHTMessageHandler } from '../index.js'\nimport type { Providers } from '../../providers.js'\nimport type { PeerRouting } from '../../peer-routing/index.js'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { PeerInfo } from '@libp2p/interface-peer-info'\nimport type { PeerStore } from '@libp2p/interface-peer-store'\nimport type { Multiaddr } from '@multiformats/multiaddr'\n\nconst log = logger('libp2p:kad-dht:rpc:handlers:get-providers')\n\nexport interface GetProvidersHandlerInit {\n  peerRouting: PeerRouting\n  providers: Providers\n  lan: boolean\n}\n\nexport interface GetProvidersHandlerComponents {\n  peerStore: PeerStore\n}\n\nexport class GetProvidersHandler implements DHTMessageHandler {\n  private readonly components: GetProvidersHandlerComponents\n  private readonly peerRouting: PeerRouting\n  private readonly providers: Providers\n  private readonly lan: boolean\n\n  constructor (components: GetProvidersHandlerComponents, init: GetProvidersHandlerInit) {\n    const { peerRouting, providers, lan } = init\n\n    this.components = components\n    this.peerRouting = peerRouting\n    this.providers = providers\n    this.lan = Boolean(lan)\n  }\n\n  async handle (peerId: PeerId, msg: Message): Promise<Message> {\n    let cid\n    try {\n      cid = CID.decode(msg.key)\n    } catch (err: any) {\n      throw new CodeError('Invalid CID', 'ERR_INVALID_CID')\n    }\n\n    log('%p asking for providers for %s', peerId, cid)\n\n    const [peers, closer] = await Promise.all([\n      this.providers.getProviders(cid),\n      this.peerRouting.getCloserPeersOffline(msg.key, peerId)\n    ])\n\n    const providerPeers = await this._getPeers(peers)\n    const closerPeers = await this._getPeers(closer.map(({ id }) => id))\n    const response = new Message(msg.type, msg.key, msg.clusterLevel)\n\n    if (providerPeers.length > 0) {\n      response.providerPeers = providerPeers\n    }\n\n    if (closerPeers.length > 0) {\n      response.closerPeers = closerPeers\n    }\n\n    log('got %s providers %s closerPeers', providerPeers.length, closerPeers.length)\n    return response\n  }\n\n  async _getAddresses (peerId: PeerId): Promise<Multiaddr[]> {\n    const addrs = await this.components.peerStore.addressBook.get(peerId)\n\n    return addrs.map(address => address.multiaddr)\n  }\n\n  async _getPeers (peerIds: PeerId[]): Promise<PeerInfo[]> {\n    const output: PeerInfo[] = []\n    const addrFilter = this.lan ? removePublicAddresses : removePrivateAddresses\n\n    for (const peerId of peerIds) {\n      const peer = addrFilter({\n        id: peerId,\n        multiaddrs: await this._getAddresses(peerId),\n        protocols: []\n      })\n\n      if (peer.multiaddrs.length > 0) {\n        output.push(peer)\n      }\n    }\n\n    return output\n  }\n}\n"]},"metadata":{},"sourceType":"module"}