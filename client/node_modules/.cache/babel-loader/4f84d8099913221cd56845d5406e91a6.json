{"ast":null,"code":"import { multiaddr } from '@multiformats/multiaddr';\nimport { CircuitRelay } from '../pb/index.js';\n/**\n * Write a response\n */\n\nfunction writeResponse(streamHandler, status) {\n  streamHandler.write({\n    type: CircuitRelay.Type.STATUS,\n    code: status\n  });\n}\n/**\n * Validate incomming HOP/STOP message\n */\n\n\nexport function validateAddrs(msg, streamHandler) {\n  try {\n    if (msg.dstPeer?.addrs != null) {\n      msg.dstPeer.addrs.forEach(addr => {\n        return multiaddr(addr);\n      });\n    }\n  } catch (err) {\n    writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP ? CircuitRelay.Status.HOP_DST_MULTIADDR_INVALID : CircuitRelay.Status.STOP_DST_MULTIADDR_INVALID);\n    throw err;\n  }\n\n  try {\n    if (msg.srcPeer?.addrs != null) {\n      msg.srcPeer.addrs.forEach(addr => {\n        return multiaddr(addr);\n      });\n    }\n  } catch (err) {\n    writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP ? CircuitRelay.Status.HOP_SRC_MULTIADDR_INVALID : CircuitRelay.Status.STOP_SRC_MULTIADDR_INVALID);\n    throw err;\n  }\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,yBAA1B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AAGA;;;;AAGA,SAASC,aAAT,CAAwBC,aAAxB,EAAsDC,MAAtD,EAAiF;AAC/ED,eAAa,CAACE,KAAd,CAAoB;AAClBC,QAAI,EAAEL,YAAY,CAACM,IAAb,CAAkBC,MADN;AAElBC,QAAI,EAAEL;AAFY,GAApB;AAID;AAED;;;;;AAGA,OAAM,SAAUM,aAAV,CAAyBC,GAAzB,EAA4CR,aAA5C,EAAwE;AAC5E,MAAI;AACF,QAAIQ,GAAG,CAACC,OAAJ,EAAaC,KAAb,IAAsB,IAA1B,EAAgC;AAC9BF,SAAG,CAACC,OAAJ,CAAYC,KAAZ,CAAkBC,OAAlB,CAA2BC,IAAD,IAAS;AACjC,eAAOf,SAAS,CAACe,IAAD,CAAhB;AACD,OAFD;AAGD;AACF,GAND,CAME,OAAOC,GAAP,EAAiB;AACjBd,iBAAa,CAACC,aAAD,EAAgBQ,GAAG,CAACL,IAAJ,KAAaL,YAAY,CAACM,IAAb,CAAkBU,GAA/B,GACzBhB,YAAY,CAACiB,MAAb,CAAoBC,yBADK,GAEzBlB,YAAY,CAACiB,MAAb,CAAoBE,0BAFX,CAAb;AAGA,UAAMJ,GAAN;AACD;;AAED,MAAI;AACF,QAAIL,GAAG,CAACU,OAAJ,EAAaR,KAAb,IAAsB,IAA1B,EAAgC;AAC9BF,SAAG,CAACU,OAAJ,CAAYR,KAAZ,CAAkBC,OAAlB,CAA2BC,IAAD,IAAS;AACjC,eAAOf,SAAS,CAACe,IAAD,CAAhB;AACD,OAFD;AAGD;AACF,GAND,CAME,OAAOC,GAAP,EAAiB;AACjBd,iBAAa,CAACC,aAAD,EAAgBQ,GAAG,CAACL,IAAJ,KAAaL,YAAY,CAACM,IAAb,CAAkBU,GAA/B,GACzBhB,YAAY,CAACiB,MAAb,CAAoBI,yBADK,GAEzBrB,YAAY,CAACiB,MAAb,CAAoBK,0BAFX,CAAb;AAGA,UAAMP,GAAN;AACD;AACF","names":["multiaddr","CircuitRelay","writeResponse","streamHandler","status","write","type","Type","STATUS","code","validateAddrs","msg","dstPeer","addrs","forEach","addr","err","HOP","Status","HOP_DST_MULTIADDR_INVALID","STOP_DST_MULTIADDR_INVALID","srcPeer","HOP_SRC_MULTIADDR_INVALID","STOP_SRC_MULTIADDR_INVALID"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\src\\circuit\\circuit\\utils.ts"],"sourcesContent":["import { multiaddr } from '@multiformats/multiaddr'\nimport { CircuitRelay } from '../pb/index.js'\nimport type { StreamHandler } from './stream-handler.js'\n\n/**\n * Write a response\n */\nfunction writeResponse (streamHandler: StreamHandler, status: CircuitRelay.Status) {\n  streamHandler.write({\n    type: CircuitRelay.Type.STATUS,\n    code: status\n  })\n}\n\n/**\n * Validate incomming HOP/STOP message\n */\nexport function validateAddrs (msg: CircuitRelay, streamHandler: StreamHandler) {\n  try {\n    if (msg.dstPeer?.addrs != null) {\n      msg.dstPeer.addrs.forEach((addr) => {\n        return multiaddr(addr)\n      })\n    }\n  } catch (err: any) {\n    writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP\n      ? CircuitRelay.Status.HOP_DST_MULTIADDR_INVALID\n      : CircuitRelay.Status.STOP_DST_MULTIADDR_INVALID)\n    throw err\n  }\n\n  try {\n    if (msg.srcPeer?.addrs != null) {\n      msg.srcPeer.addrs.forEach((addr) => {\n        return multiaddr(addr)\n      })\n    }\n  } catch (err: any) {\n    writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP\n      ? CircuitRelay.Status.HOP_SRC_MULTIADDR_INVALID\n      : CircuitRelay.Status.STOP_SRC_MULTIADDR_INVALID)\n    throw err\n  }\n}\n"]},"metadata":{},"sourceType":"module"}