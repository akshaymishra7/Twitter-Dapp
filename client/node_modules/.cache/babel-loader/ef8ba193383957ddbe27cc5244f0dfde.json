{"ast":null,"code":"import * as mafmt from '@multiformats/mafmt';\nimport { CODE_CIRCUIT, CODE_P2P, CODE_TCP, CODE_WS, CODE_WSS } from './constants.js';\nexport function all(multiaddrs) {\n  return multiaddrs.filter(ma => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false;\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P);\n    return mafmt.WebSockets.matches(testMa) || mafmt.WebSocketsSecure.matches(testMa);\n  });\n}\nexport function wss(multiaddrs) {\n  return multiaddrs.filter(ma => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false;\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P);\n    return mafmt.WebSocketsSecure.matches(testMa);\n  });\n}\nexport function dnsWss(multiaddrs) {\n  return multiaddrs.filter(ma => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false;\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P);\n    return mafmt.WebSocketsSecure.matches(testMa) && mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS));\n  });\n}\nexport function dnsWsOrWss(multiaddrs) {\n  return multiaddrs.filter(ma => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false;\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P); // WS\n\n    if (mafmt.WebSockets.matches(testMa)) {\n      return mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WS));\n    } // WSS\n\n\n    return mafmt.WebSocketsSecure.matches(testMa) && mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS));\n  });\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,qBAAvB;AAEA,SACEC,YADF,EAEEC,QAFF,EAGEC,QAHF,EAIEC,OAJF,EAKEC,QALF,QAMO,gBANP;AAQA,OAAM,SAAUC,GAAV,CAAeC,UAAf,EAAsC;AAC1C,SAAOA,UAAU,CAACC,MAAX,CAAmBC,EAAD,IAAO;AAC9B,QAAIA,EAAE,CAACC,UAAH,GAAgBC,QAAhB,CAAyBV,YAAzB,CAAJ,EAA4C;AAC1C,aAAO,KAAP;AACD;;AAED,UAAMW,MAAM,GAAGH,EAAE,CAACI,eAAH,CAAmBX,QAAnB,CAAf;AAEA,WAAOF,KAAK,CAACc,UAAN,CAAiBC,OAAjB,CAAyBH,MAAzB,KACLZ,KAAK,CAACgB,gBAAN,CAAuBD,OAAvB,CAA+BH,MAA/B,CADF;AAED,GATM,CAAP;AAUD;AAED,OAAM,SAAUK,GAAV,CAAeV,UAAf,EAAsC;AAC1C,SAAOA,UAAU,CAACC,MAAX,CAAmBC,EAAD,IAAO;AAC9B,QAAIA,EAAE,CAACC,UAAH,GAAgBC,QAAhB,CAAyBV,YAAzB,CAAJ,EAA4C;AAC1C,aAAO,KAAP;AACD;;AAED,UAAMW,MAAM,GAAGH,EAAE,CAACI,eAAH,CAAmBX,QAAnB,CAAf;AAEA,WAAOF,KAAK,CAACgB,gBAAN,CAAuBD,OAAvB,CAA+BH,MAA/B,CAAP;AACD,GARM,CAAP;AASD;AAED,OAAM,SAAUM,MAAV,CAAkBX,UAAlB,EAAyC;AAC7C,SAAOA,UAAU,CAACC,MAAX,CAAmBC,EAAD,IAAO;AAC9B,QAAIA,EAAE,CAACC,UAAH,GAAgBC,QAAhB,CAAyBV,YAAzB,CAAJ,EAA4C;AAC1C,aAAO,KAAP;AACD;;AAED,UAAMW,MAAM,GAAGH,EAAE,CAACI,eAAH,CAAmBX,QAAnB,CAAf;AAEA,WAAOF,KAAK,CAACgB,gBAAN,CAAuBD,OAAvB,CAA+BH,MAA/B,KACLZ,KAAK,CAACmB,GAAN,CAAUJ,OAAV,CAAkBH,MAAM,CAACC,eAAP,CAAuBV,QAAvB,EAAiCU,eAAjC,CAAiDR,QAAjD,CAAlB,CADF;AAED,GATM,CAAP;AAUD;AAED,OAAM,SAAUe,UAAV,CAAsBb,UAAtB,EAA6C;AACjD,SAAOA,UAAU,CAACC,MAAX,CAAmBC,EAAD,IAAO;AAC9B,QAAIA,EAAE,CAACC,UAAH,GAAgBC,QAAhB,CAAyBV,YAAzB,CAAJ,EAA4C;AAC1C,aAAO,KAAP;AACD;;AAED,UAAMW,MAAM,GAAGH,EAAE,CAACI,eAAH,CAAmBX,QAAnB,CAAf,CAL8B,CAO9B;;AACA,QAAIF,KAAK,CAACc,UAAN,CAAiBC,OAAjB,CAAyBH,MAAzB,CAAJ,EAAsC;AACpC,aAAOZ,KAAK,CAACmB,GAAN,CAAUJ,OAAV,CAAkBH,MAAM,CAACC,eAAP,CAAuBV,QAAvB,EAAiCU,eAAjC,CAAiDT,OAAjD,CAAlB,CAAP;AACD,KAV6B,CAY9B;;;AACA,WAAOJ,KAAK,CAACgB,gBAAN,CAAuBD,OAAvB,CAA+BH,MAA/B,KACLZ,KAAK,CAACmB,GAAN,CAAUJ,OAAV,CAAkBH,MAAM,CAACC,eAAP,CAAuBV,QAAvB,EAAiCU,eAAjC,CAAiDR,QAAjD,CAAlB,CADF;AAED,GAfM,CAAP;AAgBD","names":["mafmt","CODE_CIRCUIT","CODE_P2P","CODE_TCP","CODE_WS","CODE_WSS","all","multiaddrs","filter","ma","protoCodes","includes","testMa","decapsulateCode","WebSockets","matches","WebSocketsSecure","wss","dnsWss","DNS","dnsWsOrWss"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\websockets\\src\\filters.ts"],"sourcesContent":["import * as mafmt from '@multiformats/mafmt'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport {\n  CODE_CIRCUIT,\n  CODE_P2P,\n  CODE_TCP,\n  CODE_WS,\n  CODE_WSS\n} from './constants.js'\n\nexport function all (multiaddrs: Multiaddr[]): Multiaddr[] {\n  return multiaddrs.filter((ma) => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P)\n\n    return mafmt.WebSockets.matches(testMa) ||\n      mafmt.WebSocketsSecure.matches(testMa)\n  })\n}\n\nexport function wss (multiaddrs: Multiaddr[]): Multiaddr[] {\n  return multiaddrs.filter((ma) => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P)\n\n    return mafmt.WebSocketsSecure.matches(testMa)\n  })\n}\n\nexport function dnsWss (multiaddrs: Multiaddr[]): Multiaddr[] {\n  return multiaddrs.filter((ma) => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P)\n\n    return mafmt.WebSocketsSecure.matches(testMa) &&\n      mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS))\n  })\n}\n\nexport function dnsWsOrWss (multiaddrs: Multiaddr[]): Multiaddr[] {\n  return multiaddrs.filter((ma) => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P)\n\n    // WS\n    if (mafmt.WebSockets.matches(testMa)) {\n      return mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WS))\n    }\n\n    // WSS\n    return mafmt.WebSocketsSecure.matches(testMa) &&\n      mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS))\n  })\n}\n"]},"metadata":{},"sourceType":"module"}