{"ast":null,"code":"import { equals } from 'uint8arrays/equals';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { BaseBlockstore } from 'blockstore-core';\nexport class VerifyingGetOnlyBlockStore extends BaseBlockstore {\n  constructor(blockstore) {\n    super();\n    this.store = blockstore;\n  }\n\n  async get(cid) {\n    const res = await this.store.get(cid);\n\n    if (!res) {\n      throw new Error(`Incomplete CAR. Block missing for CID ${cid}`);\n    }\n\n    if (!isValid({\n      cid,\n      bytes: res\n    })) {\n      throw new Error(`Invalid CAR. Hash of block data does not match CID ${cid}`);\n    }\n\n    return res;\n  }\n\n  static fromBlockstore(b) {\n    return new VerifyingGetOnlyBlockStore(b);\n  }\n\n  static fromCarReader(cr) {\n    return new VerifyingGetOnlyBlockStore({\n      // Return bytes in the same fashion as a Blockstore implementation\n      get: async cid => {\n        const block = await cr.get(cid);\n        return block === null || block === void 0 ? void 0 : block.bytes;\n      }\n    });\n  }\n\n}\n\nasync function isValid(_ref) {\n  let {\n    cid,\n    bytes\n  } = _ref;\n  const hash = await sha256.digest(bytes);\n  return equals(hash.digest, cid.multihash.digest);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/client/node_modules/ipfs-car/dist/esm/unpack/utils/verifying-get-only-blockstore.js"],"names":["equals","sha256","BaseBlockstore","VerifyingGetOnlyBlockStore","constructor","blockstore","store","get","cid","res","Error","isValid","bytes","fromBlockstore","b","fromCarReader","cr","block","hash","digest","multihash"],"mappings":"AAAA,SAASA,MAAT,QAAuB,oBAAvB;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAO,MAAMC,0BAAN,SAAyCD,cAAzC,CAAwD;AAC3DE,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB;AACA,SAAKC,KAAL,GAAaD,UAAb;AACH;;AACQ,QAAHE,GAAG,CAACC,GAAD,EAAM;AACX,UAAMC,GAAG,GAAG,MAAM,KAAKH,KAAL,CAAWC,GAAX,CAAeC,GAAf,CAAlB;;AACA,QAAI,CAACC,GAAL,EAAU;AACN,YAAM,IAAIC,KAAJ,CAAW,yCAAwCF,GAAI,EAAvD,CAAN;AACH;;AACD,QAAI,CAACG,OAAO,CAAC;AAAEH,MAAAA,GAAF;AAAOI,MAAAA,KAAK,EAAEH;AAAd,KAAD,CAAZ,EAAmC;AAC/B,YAAM,IAAIC,KAAJ,CAAW,sDAAqDF,GAAI,EAApE,CAAN;AACH;;AACD,WAAOC,GAAP;AACH;;AACoB,SAAdI,cAAc,CAACC,CAAD,EAAI;AACrB,WAAO,IAAIX,0BAAJ,CAA+BW,CAA/B,CAAP;AACH;;AACmB,SAAbC,aAAa,CAACC,EAAD,EAAK;AACrB,WAAO,IAAIb,0BAAJ,CAA+B;AAClC;AACAI,MAAAA,GAAG,EAAE,MAAOC,GAAP,IAAe;AAChB,cAAMS,KAAK,GAAG,MAAMD,EAAE,CAACT,GAAH,CAAOC,GAAP,CAApB;AACA,eAAOS,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAK,KAAK,CAAjC,GAAqC,KAAK,CAA1C,GAA8CA,KAAK,CAACL,KAA3D;AACH;AALiC,KAA/B,CAAP;AAOH;;AA1B0D;;AA4B/D,eAAeD,OAAf,OAAuC;AAAA,MAAhB;AAAEH,IAAAA,GAAF;AAAOI,IAAAA;AAAP,GAAgB;AACnC,QAAMM,IAAI,GAAG,MAAMjB,MAAM,CAACkB,MAAP,CAAcP,KAAd,CAAnB;AACA,SAAOZ,MAAM,CAACkB,IAAI,CAACC,MAAN,EAAcX,GAAG,CAACY,SAAJ,CAAcD,MAA5B,CAAb;AACH","sourcesContent":["import { equals } from 'uint8arrays/equals';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { BaseBlockstore } from 'blockstore-core';\nexport class VerifyingGetOnlyBlockStore extends BaseBlockstore {\n    constructor(blockstore) {\n        super();\n        this.store = blockstore;\n    }\n    async get(cid) {\n        const res = await this.store.get(cid);\n        if (!res) {\n            throw new Error(`Incomplete CAR. Block missing for CID ${cid}`);\n        }\n        if (!isValid({ cid, bytes: res })) {\n            throw new Error(`Invalid CAR. Hash of block data does not match CID ${cid}`);\n        }\n        return res;\n    }\n    static fromBlockstore(b) {\n        return new VerifyingGetOnlyBlockStore(b);\n    }\n    static fromCarReader(cr) {\n        return new VerifyingGetOnlyBlockStore({\n            // Return bytes in the same fashion as a Blockstore implementation\n            get: async (cid) => {\n                const block = await cr.get(cid);\n                return block === null || block === void 0 ? void 0 : block.bytes;\n            }\n        });\n    }\n}\nasync function isValid({ cid, bytes }) {\n    const hash = await sha256.digest(bytes);\n    return equals(hash.digest, cid.multihash.digest);\n}\n"]},"metadata":{},"sourceType":"module"}