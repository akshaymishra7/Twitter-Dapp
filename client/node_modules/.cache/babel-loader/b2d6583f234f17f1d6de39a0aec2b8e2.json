{"ast":null,"code":"import { concat as uint8ArrayConcat } from 'uint8arrays/concat';\n/**\n * Takes an (async) iterable that yields buffer-like-objects and concats them\n * into one buffer\n */\n\nexport default async function toBuffer(stream) {\n  let buffer = new Uint8Array(0);\n\n  for await (const buf of stream) {\n    buffer = uint8ArrayConcat([buffer, buf], buffer.length + buf.length);\n  }\n\n  return buffer;\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,IAAIC,gBAAnB,QAA2C,oBAA3C;AAEA;;;;;AAIA,eAAe,eAAeC,QAAf,CAAyBC,MAAzB,EAAiF;AAC9F,MAAIC,MAAM,GAAG,IAAIC,UAAJ,CAAe,CAAf,CAAb;;AAEA,aAAW,MAAMC,GAAjB,IAAwBH,MAAxB,EAAgC;AAC9BC,UAAM,GAAGH,gBAAgB,CAAC,CAACG,MAAD,EAASE,GAAT,CAAD,EAAgBF,MAAM,CAACG,MAAP,GAAgBD,GAAG,CAACC,MAApC,CAAzB;AACD;;AAED,SAAOH,MAAP;AACD","names":["concat","uint8ArrayConcat","toBuffer","stream","buffer","Uint8Array","buf","length"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\it-to-buffer\\src\\index.ts"],"sourcesContent":["import { concat as uint8ArrayConcat } from 'uint8arrays/concat'\n\n/**\n * Takes an (async) iterable that yields buffer-like-objects and concats them\n * into one buffer\n */\nexport default async function toBuffer (stream: AsyncIterable<Uint8Array> | Iterable<Uint8Array>): Promise<Uint8Array> {\n  let buffer = new Uint8Array(0)\n\n  for await (const buf of stream) {\n    buffer = uint8ArrayConcat([buffer, buf], buffer.length + buf.length)\n  }\n\n  return buffer\n}\n"]},"metadata":{},"sourceType":"module"}