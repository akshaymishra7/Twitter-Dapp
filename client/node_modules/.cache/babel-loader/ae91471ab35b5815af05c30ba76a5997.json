{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { BitswapMessage as Message } from '../message/index.js';\nimport { Wantlist } from '../wantlist/index.js';\nimport { Ledger } from './ledger.js';\nimport { RequestQueue } from './req-queue.js';\nimport { TaskMerger } from './task-merger.js';\nimport { logger } from '../utils/index.js';\nimport { trackedMap } from '@libp2p/tracked-map';\n/**\n * @typedef {import('../message/entry').BitswapMessageEntry} BitswapMessageEntry\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\nconst WantType = Message.WantType; // The ideal size of the batched payload. We try to pop this much data off the\n// request queue, but\n// - if there isn't any more data in the queue we send whatever we have\n// - if there are several small items in the queue (eg HAVE response) followed\n//   by one big item (eg a block) that would exceed this target size, we\n//   include the big item in the message\n\nconst TARGET_MESSAGE_SIZE = 16 * 1024; // If the client sends a want-have, and the engine has the corresponding block,\n// we check the size of the block and if it's small enough we send the block\n// itself, rather than sending a HAVE.\n// This constant defines the maximum size up to which we replace a HAVE with\n// a block.\n\nconst MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024;\nexport class DecisionEngine {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('interface-blockstore').Blockstore} blockstore\n   * @param {import('../network').Network} network\n   * @param {import('../stats').Stats} stats\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   * @param {object} [opts]\n   * @param {number} [opts.targetMessageSize]\n   * @param {number} [opts.maxSizeReplaceHasWithBlock]\n   */\n  constructor(peerId, blockstore, network, stats, libp2p) {\n    let opts = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : {};\n    this._log = logger(peerId, 'engine');\n    this.blockstore = blockstore;\n    this.network = network;\n    this._stats = stats;\n    this._opts = this._processOpts(opts); // A list of of ledgers by their partner id\n\n    /** @type {Map<string, Ledger>} */\n\n    this.ledgerMap = trackedMap({\n      name: 'ipfs_bitswap_ledger_map',\n      metrics: libp2p.metrics\n    });\n    this._running = false; // Queue of want-have / want-block per peer\n\n    this._requestQueue = new RequestQueue(TaskMerger);\n  }\n  /**\n   * @template {object} Opts\n   * @param {Opts} opts\n   * @returns {Opts & {maxSizeReplaceHasWithBlock:number, targetMessageSize:number}}\n   * @private\n   */\n\n\n  _processOpts(opts) {\n    return {\n      maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,\n      targetMessageSize: TARGET_MESSAGE_SIZE,\n      ...opts\n    };\n  }\n\n  _scheduleProcessTasks() {\n    setTimeout(() => {\n      this._processTasks();\n    });\n  }\n  /**\n   * Pull tasks off the request queue and send a message to the corresponding\n   * peer\n   */\n\n\n  async _processTasks() {\n    if (!this._running) {\n      return;\n    }\n\n    const {\n      peerId,\n      tasks,\n      pendingSize\n    } = this._requestQueue.popTasks(this._opts.targetMessageSize);\n\n    if (tasks.length === 0) {\n      return;\n    } // Create a new message\n\n\n    const msg = new Message(false); // Amount of data in the request queue still waiting to be popped\n\n    msg.setPendingBytes(pendingSize); // Split out want-blocks, want-haves and DONT_HAVEs\n\n    const blockCids = [];\n    const blockTasks = new Map();\n\n    for (const task of tasks) {\n      const cid = CID.parse(task.topic);\n\n      if (task.data.haveBlock) {\n        if (task.data.isWantBlock) {\n          blockCids.push(cid);\n          blockTasks.set(task.topic, task.data);\n        } else {\n          // Add HAVES to the message\n          msg.addHave(cid);\n        }\n      } else {\n        // Add DONT_HAVEs to the message\n        msg.addDontHave(cid);\n      }\n    }\n\n    const blocks = await this._getBlocks(blockCids);\n\n    for (const [topic, taskData] of blockTasks) {\n      const cid = CID.parse(topic);\n      const blk = blocks.get(topic); // If the block was found (it has not been removed)\n\n      if (blk) {\n        // Add the block to the message\n        msg.addBlock(cid, blk);\n      } else {\n        // The block was not found. If the client requested DONT_HAVE,\n        // add DONT_HAVE to the message.\n        if (taskData.sendDontHave) {\n          msg.addDontHave(cid);\n        }\n      }\n    } // If there's nothing in the message, bail out\n\n\n    if (msg.empty) {\n      peerId && this._requestQueue.tasksDone(peerId, tasks); // Trigger the next round of task processing\n\n      this._scheduleProcessTasks();\n\n      return;\n    }\n\n    try {\n      // Send the message\n      peerId && (await this.network.sendMessage(peerId, msg)); // Peform sent message accounting\n\n      for (const [cidStr, block] of blocks.entries()) {\n        peerId && this.messageSent(peerId, CID.parse(cidStr), block);\n      }\n    } catch (err) {\n      this._log.error(err);\n    } // Free the tasks up from the request queue\n\n\n    peerId && this._requestQueue.tasksDone(peerId, tasks); // Trigger the next round of task processing\n\n    this._scheduleProcessTasks();\n  }\n  /**\n   * @param {PeerId} peerId\n   * @returns {Map<string, import('../wantlist/entry').WantListEntry>}\n   */\n\n\n  wantlistForPeer(peerId) {\n    const peerIdStr = peerId.toString();\n    const ledger = this.ledgerMap.get(peerIdStr);\n    return ledger ? ledger.wantlist.sortedEntries() : new Map();\n  }\n  /**\n   * @param {PeerId} peerId\n   */\n\n\n  ledgerForPeer(peerId) {\n    const peerIdStr = peerId.toString();\n    const ledger = this.ledgerMap.get(peerIdStr);\n\n    if (!ledger) {\n      return null;\n    }\n\n    return {\n      peer: ledger.partner,\n      value: ledger.debtRatio(),\n      sent: ledger.accounting.bytesSent,\n      recv: ledger.accounting.bytesRecv,\n      exchanged: ledger.exchangeCount\n    };\n  }\n  /**\n   * @returns {PeerId[]}\n   */\n\n\n  peers() {\n    return Array.from(this.ledgerMap.values()).map(l => l.partner);\n  }\n  /**\n   * Receive blocks either from an incoming message from the network, or from\n   * blocks being added by the client on the localhost (eg IPFS add)\n   *\n   * @param {{ cid: CID, data: Uint8Array }[]} blocks\n   */\n\n\n  receivedBlocks(blocks) {\n    if (!blocks.length) {\n      return;\n    } // For each connected peer, check if it wants the block we received\n\n\n    for (const ledger of this.ledgerMap.values()) {\n      for (const block of blocks) {\n        // Filter out blocks that we don't want\n        const want = ledger.wantlistContains(block.cid);\n\n        if (!want) {\n          continue;\n        } // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n\n\n        const blockSize = block.data.length;\n\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize);\n\n        let entrySize = blockSize;\n\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid);\n        }\n\n        this._requestQueue.pushTasks(ledger.partner, [{\n          topic: want.cid.toString(base58btc),\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            blockSize,\n            isWantBlock,\n            haveBlock: true,\n            sendDontHave: false\n          }\n        }]);\n      }\n    }\n\n    this._scheduleProcessTasks();\n  }\n  /**\n   * Handle incoming messages\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n\n\n  async messageReceived(peerId, msg) {\n    const ledger = this._findOrCreate(peerId);\n\n    if (msg.empty) {\n      return;\n    } // If the message has a full wantlist, clear the current wantlist\n\n\n    if (msg.full) {\n      ledger.wantlist = new Wantlist();\n    } // Record the amount of block data received\n\n\n    this._updateBlockAccounting(msg.blocks, ledger);\n\n    if (msg.wantlist.size === 0) {\n      this._scheduleProcessTasks();\n\n      return;\n    } // Clear cancelled wants and add new wants to the ledger\n\n    /** @type {CID[]} */\n\n\n    const cancels = [];\n    /** @type {BitswapMessageEntry[]} */\n\n    const wants = [];\n    msg.wantlist.forEach(entry => {\n      if (entry.cancel) {\n        ledger.cancelWant(entry.cid);\n        cancels.push(entry.cid);\n      } else {\n        ledger.wants(entry.cid, entry.priority, entry.wantType);\n        wants.push(entry);\n      }\n    });\n\n    this._cancelWants(peerId, cancels);\n\n    await this._addWants(peerId, wants);\n\n    this._scheduleProcessTasks();\n  }\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {CID[]} cids\n   * @returns {void}\n   */\n\n\n  _cancelWants(peerId, cids) {\n    for (const c of cids) {\n      this._requestQueue.remove(c.toString(base58btc), peerId);\n    }\n  }\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {BitswapMessageEntry[]} wants\n   * @returns {Promise<void>}\n   */\n\n\n  async _addWants(peerId, wants) {\n    // Get the size of each wanted block\n    const blockSizes = await this._getBlockSizes(wants.map(w => w.cid));\n    const tasks = [];\n\n    for (const want of wants) {\n      const id = want.cid.toString(base58btc);\n      const blockSize = blockSizes.get(id); // If the block was not found\n\n      if (blockSize == null) {\n        // Only add the task to the queue if the requester wants a DONT_HAVE\n        if (want.sendDontHave) {\n          tasks.push({\n            topic: id,\n            priority: want.priority,\n            size: Message.blockPresenceSize(want.cid),\n            data: {\n              isWantBlock: want.wantType === WantType.Block,\n              blockSize: 0,\n              haveBlock: false,\n              sendDontHave: want.sendDontHave\n            }\n          });\n        }\n      } else {\n        // The block was found, add it to the queue\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize); // entrySize is the amount of space the entry takes up in the\n        // message we send to the recipient. If we're sending a block, the\n        // entrySize is the size of the block. Otherwise it's the size of\n        // a block presence entry.\n\n\n        let entrySize = blockSize;\n\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid);\n        }\n\n        tasks.push({\n          topic: id,\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            isWantBlock,\n            blockSize,\n            haveBlock: true,\n            sendDontHave: want.sendDontHave\n          }\n        });\n      }\n\n      this._requestQueue.pushTasks(peerId, tasks);\n    }\n  }\n  /**\n   * @private\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   * @param {number} blockSize\n   */\n\n\n  _sendAsBlock(wantType, blockSize) {\n    return wantType === WantType.Block || blockSize <= this._opts.maxSizeReplaceHasWithBlock;\n  }\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, number>>}\n   */\n\n\n  async _getBlockSizes(cids) {\n    const blocks = await this._getBlocks(cids);\n    return new Map([...blocks].map(_ref => {\n      let [k, v] = _ref;\n      return [k, v.length];\n    }));\n  }\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, Uint8Array>>}\n   */\n\n\n  async _getBlocks(cids) {\n    const res = new Map();\n    await Promise.all(cids.map(async cid => {\n      try {\n        const block = await this.blockstore.get(cid);\n        res.set(cid.toString(base58btc), block);\n      } catch (\n      /** @type {any} */\n      e) {\n        if (e.code !== 'ERR_NOT_FOUND') {\n          this._log.error('failed to query blockstore for %s: %s', cid, e);\n        }\n      }\n    }));\n    return res;\n  }\n  /**\n   * @private\n   * @param {Map<string, Uint8Array>} blocksMap\n   * @param {Ledger} ledger\n   */\n\n\n  _updateBlockAccounting(blocksMap, ledger) {\n    for (const block of blocksMap.values()) {\n      this._log('got block (%s bytes)', block.length);\n\n      ledger.receivedBytes(block.length);\n    }\n  }\n  /**\n   * Clear up all accounting things after message was sent\n   *\n   * @param {PeerId} peerId\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   */\n\n\n  messageSent(peerId, cid, block) {\n    const ledger = this._findOrCreate(peerId);\n\n    ledger.sentBytes(block.length);\n    ledger.wantlist.remove(cid);\n  }\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n\n\n  numBytesSentTo(peerId) {\n    return this._findOrCreate(peerId).accounting.bytesSent;\n  }\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n\n\n  numBytesReceivedFrom(peerId) {\n    return this._findOrCreate(peerId).accounting.bytesRecv;\n  }\n  /**\n   *\n   * @param {PeerId} peerId\n   */\n\n\n  peerDisconnected(peerId) {\n    this.ledgerMap.delete(peerId.toString());\n  }\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @returns {Ledger}\n   */\n\n\n  _findOrCreate(peerId) {\n    const peerIdStr = peerId.toString();\n    const ledger = this.ledgerMap.get(peerIdStr);\n\n    if (ledger) {\n      return ledger;\n    }\n\n    const l = new Ledger(peerId);\n    this.ledgerMap.set(peerIdStr, l);\n\n    if (this._stats) {\n      this._stats.push(peerIdStr, 'peerCount', 1);\n    }\n\n    return l;\n  }\n\n  start() {\n    this._running = true;\n  }\n\n  stop() {\n    this._running = false;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-bitswap/src/decision-engine/index.js"],"names":["CID","base58btc","BitswapMessage","Message","Wantlist","Ledger","RequestQueue","TaskMerger","logger","trackedMap","WantType","TARGET_MESSAGE_SIZE","MAX_SIZE_REPLACE_HAS_WITH_BLOCK","DecisionEngine","constructor","peerId","blockstore","network","stats","libp2p","opts","_log","_stats","_opts","_processOpts","ledgerMap","name","metrics","_running","_requestQueue","maxSizeReplaceHasWithBlock","targetMessageSize","_scheduleProcessTasks","setTimeout","_processTasks","tasks","pendingSize","popTasks","length","msg","setPendingBytes","blockCids","blockTasks","Map","task","cid","parse","topic","data","haveBlock","isWantBlock","push","set","addHave","addDontHave","blocks","_getBlocks","taskData","blk","get","addBlock","sendDontHave","empty","tasksDone","sendMessage","cidStr","block","entries","messageSent","err","error","wantlistForPeer","peerIdStr","toString","ledger","wantlist","sortedEntries","ledgerForPeer","peer","partner","value","debtRatio","sent","accounting","bytesSent","recv","bytesRecv","exchanged","exchangeCount","peers","Array","from","values","map","l","receivedBlocks","want","wantlistContains","blockSize","_sendAsBlock","wantType","entrySize","blockPresenceSize","pushTasks","priority","size","messageReceived","_findOrCreate","full","_updateBlockAccounting","cancels","wants","forEach","entry","cancel","cancelWant","_cancelWants","_addWants","cids","c","remove","blockSizes","_getBlockSizes","w","id","Block","k","v","res","Promise","all","e","code","blocksMap","receivedBytes","sentBytes","numBytesSentTo","numBytesReceivedFrom","peerDisconnected","delete","start","stop"],"mappings":"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","sourcesContent":["import { CID } from 'multiformats/cid'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { Wantlist } from '../wantlist/index.js'\nimport { Ledger } from './ledger.js'\nimport { RequestQueue } from './req-queue.js'\nimport { TaskMerger } from './task-merger.js'\nimport { logger } from '../utils/index.js'\nimport { trackedMap } from '@libp2p/tracked-map'\n\n/**\n * @typedef {import('../message/entry').BitswapMessageEntry} BitswapMessageEntry\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\nconst WantType = Message.WantType\n\n// The ideal size of the batched payload. We try to pop this much data off the\n// request queue, but\n// - if there isn't any more data in the queue we send whatever we have\n// - if there are several small items in the queue (eg HAVE response) followed\n//   by one big item (eg a block) that would exceed this target size, we\n//   include the big item in the message\nconst TARGET_MESSAGE_SIZE = 16 * 1024\n\n// If the client sends a want-have, and the engine has the corresponding block,\n// we check the size of the block and if it's small enough we send the block\n// itself, rather than sending a HAVE.\n// This constant defines the maximum size up to which we replace a HAVE with\n// a block.\nconst MAX_SIZE_REPLACE_HAS_WITH_BLOCK = 1024\n\nexport class DecisionEngine {\n  /**\n   * @param {PeerId} peerId\n   * @param {import('interface-blockstore').Blockstore} blockstore\n   * @param {import('../network').Network} network\n   * @param {import('../stats').Stats} stats\n   * @param {import('@libp2p/interface-libp2p').Libp2p} libp2p\n   * @param {object} [opts]\n   * @param {number} [opts.targetMessageSize]\n   * @param {number} [opts.maxSizeReplaceHasWithBlock]\n   */\n  constructor (peerId, blockstore, network, stats, libp2p, opts = {}) {\n    this._log = logger(peerId, 'engine')\n    this.blockstore = blockstore\n    this.network = network\n    this._stats = stats\n    this._opts = this._processOpts(opts)\n\n    // A list of of ledgers by their partner id\n    /** @type {Map<string, Ledger>} */\n    this.ledgerMap = trackedMap({\n      name: 'ipfs_bitswap_ledger_map',\n      metrics: libp2p.metrics\n    })\n    this._running = false\n\n    // Queue of want-have / want-block per peer\n    this._requestQueue = new RequestQueue(TaskMerger)\n  }\n\n  /**\n   * @template {object} Opts\n   * @param {Opts} opts\n   * @returns {Opts & {maxSizeReplaceHasWithBlock:number, targetMessageSize:number}}\n   * @private\n   */\n  _processOpts (opts) {\n    return {\n      maxSizeReplaceHasWithBlock: MAX_SIZE_REPLACE_HAS_WITH_BLOCK,\n      targetMessageSize: TARGET_MESSAGE_SIZE,\n      ...opts\n    }\n  }\n\n  _scheduleProcessTasks () {\n    setTimeout(() => {\n      this._processTasks()\n    })\n  }\n\n  /**\n   * Pull tasks off the request queue and send a message to the corresponding\n   * peer\n   */\n  async _processTasks () {\n    if (!this._running) {\n      return\n    }\n\n    const { peerId, tasks, pendingSize } = this._requestQueue.popTasks(this._opts.targetMessageSize)\n\n    if (tasks.length === 0) {\n      return\n    }\n\n    // Create a new message\n    const msg = new Message(false)\n\n    // Amount of data in the request queue still waiting to be popped\n    msg.setPendingBytes(pendingSize)\n\n    // Split out want-blocks, want-haves and DONT_HAVEs\n    const blockCids = []\n    const blockTasks = new Map()\n    for (const task of tasks) {\n      const cid = CID.parse(task.topic)\n      if (task.data.haveBlock) {\n        if (task.data.isWantBlock) {\n          blockCids.push(cid)\n          blockTasks.set(task.topic, task.data)\n        } else {\n          // Add HAVES to the message\n          msg.addHave(cid)\n        }\n      } else {\n        // Add DONT_HAVEs to the message\n        msg.addDontHave(cid)\n      }\n    }\n\n    const blocks = await this._getBlocks(blockCids)\n    for (const [topic, taskData] of blockTasks) {\n      const cid = CID.parse(topic)\n      const blk = blocks.get(topic)\n      // If the block was found (it has not been removed)\n      if (blk) {\n        // Add the block to the message\n        msg.addBlock(cid, blk)\n      } else {\n        // The block was not found. If the client requested DONT_HAVE,\n        // add DONT_HAVE to the message.\n        if (taskData.sendDontHave) {\n          msg.addDontHave(cid)\n        }\n      }\n    }\n\n    // If there's nothing in the message, bail out\n    if (msg.empty) {\n      peerId && this._requestQueue.tasksDone(peerId, tasks)\n\n      // Trigger the next round of task processing\n      this._scheduleProcessTasks()\n\n      return\n    }\n\n    try {\n      // Send the message\n      peerId && await this.network.sendMessage(peerId, msg)\n\n      // Peform sent message accounting\n      for (const [cidStr, block] of blocks.entries()) {\n        peerId && this.messageSent(peerId, CID.parse(cidStr), block)\n      }\n    } catch (err) {\n      this._log.error(err)\n    }\n\n    // Free the tasks up from the request queue\n    peerId && this._requestQueue.tasksDone(peerId, tasks)\n\n    // Trigger the next round of task processing\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {Map<string, import('../wantlist/entry').WantListEntry>}\n   */\n  wantlistForPeer (peerId) {\n    const peerIdStr = peerId.toString()\n    const ledger = this.ledgerMap.get(peerIdStr)\n    return ledger ? ledger.wantlist.sortedEntries() : new Map()\n  }\n\n  /**\n   * @param {PeerId} peerId\n   */\n  ledgerForPeer (peerId) {\n    const peerIdStr = peerId.toString()\n\n    const ledger = this.ledgerMap.get(peerIdStr)\n\n    if (!ledger) {\n      return null\n    }\n\n    return {\n      peer: ledger.partner,\n      value: ledger.debtRatio(),\n      sent: ledger.accounting.bytesSent,\n      recv: ledger.accounting.bytesRecv,\n      exchanged: ledger.exchangeCount\n    }\n  }\n\n  /**\n   * @returns {PeerId[]}\n   */\n  peers () {\n    return Array.from(this.ledgerMap.values()).map((l) => l.partner)\n  }\n\n  /**\n   * Receive blocks either from an incoming message from the network, or from\n   * blocks being added by the client on the localhost (eg IPFS add)\n   *\n   * @param {{ cid: CID, data: Uint8Array }[]} blocks\n   */\n  receivedBlocks (blocks) {\n    if (!blocks.length) {\n      return\n    }\n\n    // For each connected peer, check if it wants the block we received\n    for (const ledger of this.ledgerMap.values()) {\n      for (const block of blocks) {\n        // Filter out blocks that we don't want\n        const want = ledger.wantlistContains(block.cid)\n\n        if (!want) {\n          continue\n        }\n\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const blockSize = block.data.length\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize)\n\n        let entrySize = blockSize\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid)\n        }\n\n        this._requestQueue.pushTasks(ledger.partner, [{\n          topic: want.cid.toString(base58btc),\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            blockSize,\n            isWantBlock,\n            haveBlock: true,\n            sendDontHave: false\n          }\n        }])\n      }\n    }\n\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * Handle incoming messages\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<void>}\n   */\n  async messageReceived (peerId, msg) {\n    const ledger = this._findOrCreate(peerId)\n\n    if (msg.empty) {\n      return\n    }\n\n    // If the message has a full wantlist, clear the current wantlist\n    if (msg.full) {\n      ledger.wantlist = new Wantlist()\n    }\n\n    // Record the amount of block data received\n    this._updateBlockAccounting(msg.blocks, ledger)\n\n    if (msg.wantlist.size === 0) {\n      this._scheduleProcessTasks()\n      return\n    }\n\n    // Clear cancelled wants and add new wants to the ledger\n    /** @type {CID[]} */\n    const cancels = []\n    /** @type {BitswapMessageEntry[]} */\n    const wants = []\n    msg.wantlist.forEach((entry) => {\n      if (entry.cancel) {\n        ledger.cancelWant(entry.cid)\n        cancels.push(entry.cid)\n      } else {\n        ledger.wants(entry.cid, entry.priority, entry.wantType)\n        wants.push(entry)\n      }\n    })\n\n    this._cancelWants(peerId, cancels)\n    await this._addWants(peerId, wants)\n\n    this._scheduleProcessTasks()\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {CID[]} cids\n   * @returns {void}\n   */\n  _cancelWants (peerId, cids) {\n    for (const c of cids) {\n      this._requestQueue.remove(c.toString(base58btc), peerId)\n    }\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @param {BitswapMessageEntry[]} wants\n   * @returns {Promise<void>}\n   */\n  async _addWants (peerId, wants) {\n    // Get the size of each wanted block\n    const blockSizes = await this._getBlockSizes(wants.map(w => w.cid))\n\n    const tasks = []\n    for (const want of wants) {\n      const id = want.cid.toString(base58btc)\n      const blockSize = blockSizes.get(id)\n\n      // If the block was not found\n      if (blockSize == null) {\n        // Only add the task to the queue if the requester wants a DONT_HAVE\n        if (want.sendDontHave) {\n          tasks.push({\n            topic: id,\n            priority: want.priority,\n            size: Message.blockPresenceSize(want.cid),\n            data: {\n              isWantBlock: want.wantType === WantType.Block,\n              blockSize: 0,\n              haveBlock: false,\n              sendDontHave: want.sendDontHave\n            }\n          })\n        }\n      } else {\n        // The block was found, add it to the queue\n\n        // If the block is small enough, just send the block, even if the\n        // client asked for a HAVE\n        const isWantBlock = this._sendAsBlock(want.wantType, blockSize)\n\n        // entrySize is the amount of space the entry takes up in the\n        // message we send to the recipient. If we're sending a block, the\n        // entrySize is the size of the block. Otherwise it's the size of\n        // a block presence entry.\n        let entrySize = blockSize\n        if (!isWantBlock) {\n          entrySize = Message.blockPresenceSize(want.cid)\n        }\n\n        tasks.push({\n          topic: id,\n          priority: want.priority,\n          size: entrySize,\n          data: {\n            isWantBlock,\n            blockSize,\n            haveBlock: true,\n            sendDontHave: want.sendDontHave\n          }\n        })\n      }\n\n      this._requestQueue.pushTasks(peerId, tasks)\n    }\n  }\n\n  /**\n   * @private\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   * @param {number} blockSize\n   */\n  _sendAsBlock (wantType, blockSize) {\n    return wantType === WantType.Block ||\n      blockSize <= this._opts.maxSizeReplaceHasWithBlock\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, number>>}\n   */\n  async _getBlockSizes (cids) {\n    const blocks = await this._getBlocks(cids)\n    return new Map([...blocks].map(([k, v]) => [k, v.length]))\n  }\n\n  /**\n   * @private\n   * @param {CID[]} cids\n   * @returns {Promise<Map<string, Uint8Array>>}\n   */\n  async _getBlocks (cids) {\n    const res = new Map()\n    await Promise.all(cids.map(async (cid) => {\n      try {\n        const block = await this.blockstore.get(cid)\n        res.set(cid.toString(base58btc), block)\n      } catch (/** @type {any} */ e) {\n        if (e.code !== 'ERR_NOT_FOUND') {\n          this._log.error('failed to query blockstore for %s: %s', cid, e)\n        }\n      }\n    }))\n    return res\n  }\n\n  /**\n   * @private\n   * @param {Map<string, Uint8Array>} blocksMap\n   * @param {Ledger} ledger\n   */\n  _updateBlockAccounting (blocksMap, ledger) {\n    for (const block of blocksMap.values()) {\n      this._log('got block (%s bytes)', block.length)\n      ledger.receivedBytes(block.length)\n    }\n  }\n\n  /**\n   * Clear up all accounting things after message was sent\n   *\n   * @param {PeerId} peerId\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   */\n  messageSent (peerId, cid, block) {\n    const ledger = this._findOrCreate(peerId)\n    ledger.sentBytes(block.length)\n    ledger.wantlist.remove(cid)\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n  numBytesSentTo (peerId) {\n    return this._findOrCreate(peerId).accounting.bytesSent\n  }\n\n  /**\n   * @param {PeerId} peerId\n   * @returns {number}\n   */\n\n  numBytesReceivedFrom (peerId) {\n    return this._findOrCreate(peerId).accounting.bytesRecv\n  }\n\n  /**\n   *\n   * @param {PeerId} peerId\n   */\n  peerDisconnected (peerId) {\n    this.ledgerMap.delete(peerId.toString())\n  }\n\n  /**\n   * @private\n   * @param {PeerId} peerId\n   * @returns {Ledger}\n   */\n  _findOrCreate (peerId) {\n    const peerIdStr = peerId.toString()\n    const ledger = this.ledgerMap.get(peerIdStr)\n    if (ledger) {\n      return ledger\n    }\n\n    const l = new Ledger(peerId)\n\n    this.ledgerMap.set(peerIdStr, l)\n    if (this._stats) {\n      this._stats.push(peerIdStr, 'peerCount', 1)\n    }\n\n    return l\n  }\n\n  start () {\n    this._running = true\n  }\n\n  stop () {\n    this._running = false\n  }\n}\n"]},"metadata":{},"sourceType":"module"}