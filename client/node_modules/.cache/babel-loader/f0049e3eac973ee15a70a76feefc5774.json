{"ast":null,"code":"import { HKDF } from '@stablelib/hkdf';\nimport * as x25519 from '@stablelib/x25519';\nimport { SHA256, hash } from '@stablelib/sha256';\nimport { ChaCha20Poly1305 } from '@stablelib/chacha20poly1305';\nexport const stablelib = {\n  hashSHA256(data) {\n    return hash(data);\n  },\n\n  getHKDF(ck, ikm) {\n    const hkdf = new HKDF(SHA256, ikm, ck);\n    const okmU8Array = hkdf.expand(96);\n    const okm = okmU8Array;\n    const k1 = okm.subarray(0, 32);\n    const k2 = okm.subarray(32, 64);\n    const k3 = okm.subarray(64, 96);\n    return [k1, k2, k3];\n  },\n\n  generateX25519KeyPair() {\n    const keypair = x25519.generateKeyPair();\n    return {\n      publicKey: keypair.publicKey,\n      privateKey: keypair.secretKey\n    };\n  },\n\n  generateX25519KeyPairFromSeed(seed) {\n    const keypair = x25519.generateKeyPairFromSeed(seed);\n    return {\n      publicKey: keypair.publicKey,\n      privateKey: keypair.secretKey\n    };\n  },\n\n  generateX25519SharedKey(privateKey, publicKey) {\n    return x25519.sharedKey(privateKey, publicKey);\n  },\n\n  chaCha20Poly1305Encrypt(plaintext, nonce, ad, k) {\n    const ctx = new ChaCha20Poly1305(k);\n    return ctx.seal(nonce, plaintext, ad);\n  },\n\n  chaCha20Poly1305Decrypt(ciphertext, nonce, ad, k, dst) {\n    const ctx = new ChaCha20Poly1305(k);\n    return ctx.open(nonce, ciphertext, ad, dst);\n  }\n\n};","map":{"version":3,"mappings":"AAAA,SAASA,IAAT,QAAqB,iBAArB;AACA,OAAO,KAAKC,MAAZ,MAAwB,mBAAxB;AACA,SAASC,MAAT,EAAiBC,IAAjB,QAA6B,mBAA7B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AAMA,OAAO,MAAMC,SAAS,GAAqB;AACzCC,YAAU,CAAEC,IAAF,EAAkB;AAC1B,WAAOJ,IAAI,CAACI,IAAD,CAAX;AACD,GAHwC;;AAKzCC,SAAO,CAAEC,EAAF,EAAeC,GAAf,EAA8B;AACnC,UAAMC,IAAI,GAAG,IAAIX,IAAJ,CAASE,MAAT,EAAiBQ,GAAjB,EAAsBD,EAAtB,CAAb;AACA,UAAMG,UAAU,GAAGD,IAAI,CAACE,MAAL,CAAY,EAAZ,CAAnB;AACA,UAAMC,GAAG,GAAGF,UAAZ;AAEA,UAAMG,EAAE,GAAGD,GAAG,CAACE,QAAJ,CAAa,CAAb,EAAgB,EAAhB,CAAX;AACA,UAAMC,EAAE,GAAGH,GAAG,CAACE,QAAJ,CAAa,EAAb,EAAiB,EAAjB,CAAX;AACA,UAAME,EAAE,GAAGJ,GAAG,CAACE,QAAJ,CAAa,EAAb,EAAiB,EAAjB,CAAX;AAEA,WAAO,CAACD,EAAD,EAAKE,EAAL,EAASC,EAAT,CAAP;AACD,GAfwC;;AAiBzCC,uBAAqB;AACnB,UAAMC,OAAO,GAAGnB,MAAM,CAACoB,eAAP,EAAhB;AAEA,WAAO;AACLC,eAAS,EAAEF,OAAO,CAACE,SADd;AAELC,gBAAU,EAAEH,OAAO,CAACI;AAFf,KAAP;AAID,GAxBwC;;AA0BzCC,+BAA6B,CAAEC,IAAF,EAAkB;AAC7C,UAAMN,OAAO,GAAGnB,MAAM,CAAC0B,uBAAP,CAA+BD,IAA/B,CAAhB;AAEA,WAAO;AACLJ,eAAS,EAAEF,OAAO,CAACE,SADd;AAELC,gBAAU,EAAEH,OAAO,CAACI;AAFf,KAAP;AAID,GAjCwC;;AAmCzCI,yBAAuB,CAAEL,UAAF,EAA0BD,SAA1B,EAA+C;AACpE,WAAOrB,MAAM,CAAC4B,SAAP,CAAiBN,UAAjB,EAA6BD,SAA7B,CAAP;AACD,GArCwC;;AAuCzCQ,yBAAuB,CAAEC,SAAF,EAAyBC,KAAzB,EAA4CC,EAA5C,EAA4DC,CAA5D,EAAsE;AAC3F,UAAMC,GAAG,GAAG,IAAI/B,gBAAJ,CAAqB8B,CAArB,CAAZ;AAEA,WAAOC,GAAG,CAACC,IAAJ,CAASJ,KAAT,EAAgBD,SAAhB,EAA2BE,EAA3B,CAAP;AACD,GA3CwC;;AA6CzCI,yBAAuB,CAAEC,UAAF,EAA0BN,KAA1B,EAA6CC,EAA7C,EAA6DC,CAA7D,EAAyEK,GAAzE,EAAyF;AAC9G,UAAMJ,GAAG,GAAG,IAAI/B,gBAAJ,CAAqB8B,CAArB,CAAZ;AAEA,WAAOC,GAAG,CAACK,IAAJ,CAASR,KAAT,EAAgBM,UAAhB,EAA4BL,EAA5B,EAAgCM,GAAhC,CAAP;AACD;;AAjDwC,CAApC","names":["HKDF","x25519","SHA256","hash","ChaCha20Poly1305","stablelib","hashSHA256","data","getHKDF","ck","ikm","hkdf","okmU8Array","expand","okm","k1","subarray","k2","k3","generateX25519KeyPair","keypair","generateKeyPair","publicKey","privateKey","secretKey","generateX25519KeyPairFromSeed","seed","generateKeyPairFromSeed","generateX25519SharedKey","sharedKey","chaCha20Poly1305Encrypt","plaintext","nonce","ad","k","ctx","seal","chaCha20Poly1305Decrypt","ciphertext","dst","open"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@chainsafe\\libp2p-noise\\src\\crypto\\stablelib.ts"],"sourcesContent":["import { HKDF } from '@stablelib/hkdf'\nimport * as x25519 from '@stablelib/x25519'\nimport { SHA256, hash } from '@stablelib/sha256'\nimport { ChaCha20Poly1305 } from '@stablelib/chacha20poly1305'\nimport type { bytes32, bytes } from '../@types/basic.js'\nimport type { Hkdf } from '../@types/handshake.js'\nimport type { KeyPair } from '../@types/libp2p.js'\nimport type { ICryptoInterface } from '../crypto.js'\n\nexport const stablelib: ICryptoInterface = {\n  hashSHA256 (data: Uint8Array): Uint8Array {\n    return hash(data)\n  },\n\n  getHKDF (ck: bytes32, ikm: Uint8Array): Hkdf {\n    const hkdf = new HKDF(SHA256, ikm, ck)\n    const okmU8Array = hkdf.expand(96)\n    const okm = okmU8Array\n\n    const k1 = okm.subarray(0, 32)\n    const k2 = okm.subarray(32, 64)\n    const k3 = okm.subarray(64, 96)\n\n    return [k1, k2, k3]\n  },\n\n  generateX25519KeyPair (): KeyPair {\n    const keypair = x25519.generateKeyPair()\n\n    return {\n      publicKey: keypair.publicKey,\n      privateKey: keypair.secretKey\n    }\n  },\n\n  generateX25519KeyPairFromSeed (seed: Uint8Array): KeyPair {\n    const keypair = x25519.generateKeyPairFromSeed(seed)\n\n    return {\n      publicKey: keypair.publicKey,\n      privateKey: keypair.secretKey\n    }\n  },\n\n  generateX25519SharedKey (privateKey: Uint8Array, publicKey: Uint8Array): Uint8Array {\n    return x25519.sharedKey(privateKey, publicKey)\n  },\n\n  chaCha20Poly1305Encrypt (plaintext: Uint8Array, nonce: Uint8Array, ad: Uint8Array, k: bytes32): bytes {\n    const ctx = new ChaCha20Poly1305(k)\n\n    return ctx.seal(nonce, plaintext, ad)\n  },\n\n  chaCha20Poly1305Decrypt (ciphertext: Uint8Array, nonce: Uint8Array, ad: Uint8Array, k: bytes32, dst?: Uint8Array): bytes | null {\n    const ctx = new ChaCha20Poly1305(k)\n\n    return ctx.open(nonce, ciphertext, ad, dst)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}