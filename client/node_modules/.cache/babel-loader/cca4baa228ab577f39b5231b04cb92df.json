{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport errCode from 'err-code';\nconst IPFS_PREFIX = '/ipfs/';\n/**\n * @param {string|Uint8Array|CID} string\n * @returns {{cid:CID, path?:string}}\n */\n\nexport function toCidAndPath(string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string);\n    } catch (\n    /** @type {any} */\n    err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n  }\n\n  let cid = CID.asCID(string);\n\n  if (cid) {\n    return {\n      cid,\n      path: undefined\n    };\n  }\n\n  string = string.toString();\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length);\n  }\n\n  const parts = string.split('/');\n  let path;\n\n  try {\n    cid = CID.parse(parts.shift() || '');\n  } catch (\n  /** @type {any} */\n  err) {\n    throw errCode(err, 'ERR_INVALID_CID');\n  }\n\n  if (parts.length) {\n    path = `/${parts.join('/')}`;\n  }\n\n  return {\n    cid,\n    path\n  };\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core-utils/src/to-cid-and-path.js"],"names":["CID","errCode","IPFS_PREFIX","toCidAndPath","string","Uint8Array","decode","err","cid","asCID","path","undefined","toString","startsWith","substring","length","parts","split","parse","shift","join"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA,MAAMC,WAAW,GAAG,QAApB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAuBC,MAAvB,EAA+B;AACpC,MAAIA,MAAM,YAAYC,UAAtB,EAAkC;AAChC,QAAI;AACFD,MAAAA,MAAM,GAAGJ,GAAG,CAACM,MAAJ,CAAWF,MAAX,CAAT;AACD,KAFD,CAEE;AAAO;AAAmBG,IAAAA,GAA1B,EAA+B;AAC/B,YAAMN,OAAO,CAACM,GAAD,EAAM,iBAAN,CAAb;AACD;AACF;;AAED,MAAIC,GAAG,GAAGR,GAAG,CAACS,KAAJ,CAAUL,MAAV,CAAV;;AAEA,MAAII,GAAJ,EAAS;AACP,WAAO;AACLA,MAAAA,GADK;AAELE,MAAAA,IAAI,EAAEC;AAFD,KAAP;AAID;;AAEDP,EAAAA,MAAM,GAAGA,MAAM,CAACQ,QAAP,EAAT;;AAEA,MAAIR,MAAM,CAACS,UAAP,CAAkBX,WAAlB,CAAJ,EAAoC;AAClCE,IAAAA,MAAM,GAAGA,MAAM,CAACU,SAAP,CAAiBZ,WAAW,CAACa,MAA7B,CAAT;AACD;;AAED,QAAMC,KAAK,GAAGZ,MAAM,CAACa,KAAP,CAAa,GAAb,CAAd;AACA,MAAIP,IAAJ;;AAEA,MAAI;AACFF,IAAAA,GAAG,GAAGR,GAAG,CAACkB,KAAJ,CAAUF,KAAK,CAACG,KAAN,MAAiB,EAA3B,CAAN;AACD,GAFD,CAEE;AAAO;AAAmBZ,EAAAA,GAA1B,EAA+B;AAC/B,UAAMN,OAAO,CAACM,GAAD,EAAM,iBAAN,CAAb;AACD;;AAED,MAAIS,KAAK,CAACD,MAAV,EAAkB;AAChBL,IAAAA,IAAI,GAAI,IAAGM,KAAK,CAACI,IAAN,CAAW,GAAX,CAAgB,EAA3B;AACD;;AAED,SAAO;AACLZ,IAAAA,GADK;AAELE,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { CID } from 'multiformats/cid'\nimport errCode from 'err-code'\n\nconst IPFS_PREFIX = '/ipfs/'\n\n/**\n * @param {string|Uint8Array|CID} string\n * @returns {{cid:CID, path?:string}}\n */\nexport function toCidAndPath (string) {\n  if (string instanceof Uint8Array) {\n    try {\n      string = CID.decode(string)\n    } catch (/** @type {any} */ err) {\n      throw errCode(err, 'ERR_INVALID_CID')\n    }\n  }\n\n  let cid = CID.asCID(string)\n\n  if (cid) {\n    return {\n      cid,\n      path: undefined\n    }\n  }\n\n  string = string.toString()\n\n  if (string.startsWith(IPFS_PREFIX)) {\n    string = string.substring(IPFS_PREFIX.length)\n  }\n\n  const parts = string.split('/')\n  let path\n\n  try {\n    cid = CID.parse(parts.shift() || '')\n  } catch (/** @type {any} */ err) {\n    throw errCode(err, 'ERR_INVALID_CID')\n  }\n\n  if (parts.length) {\n    path = `/${parts.join('/')}`\n  }\n\n  return {\n    cid,\n    path\n  }\n}\n"]},"metadata":{},"sourceType":"module"}