{"ast":null,"code":"export class TimeoutError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'TimeoutError';\n  }\n\n}\n/**\nAn error to be thrown when the request is aborted by AbortController.\nDOMException is thrown instead of this Error when DOMException is available.\n*/\n\nexport class AbortError extends Error {\n  constructor(message) {\n    super();\n    this.name = 'AbortError';\n    this.message = message;\n  }\n\n}\n/**\nTODO: Remove AbortError and just throw DOMException when targeting Node 18.\n*/\n\nconst getDOMException = errorMessage => globalThis.DOMException === undefined ? new AbortError(errorMessage) : new DOMException(errorMessage);\n/**\nTODO: Remove below function and just 'reject(signal.reason)' when targeting Node 18.\n*/\n\n\nconst getAbortedReason = signal => {\n  const reason = signal.reason === undefined ? getDOMException('This operation was aborted.') : signal.reason;\n  return reason instanceof Error ? reason : getDOMException(reason);\n};\n\nexport default function pTimeout(promise, options) {\n  const {\n    milliseconds,\n    fallback,\n    message,\n    customTimers = {\n      setTimeout,\n      clearTimeout\n    }\n  } = options;\n  let timer;\n  const cancelablePromise = new Promise((resolve, reject) => {\n    if (typeof milliseconds !== 'number' || Math.sign(milliseconds) !== 1) {\n      throw new TypeError(`Expected \\`milliseconds\\` to be a positive number, got \\`${milliseconds}\\``);\n    }\n\n    if (milliseconds === Number.POSITIVE_INFINITY) {\n      resolve(promise);\n      return;\n    }\n\n    if (options.signal) {\n      const {\n        signal\n      } = options;\n\n      if (signal.aborted) {\n        reject(getAbortedReason(signal));\n      }\n\n      signal.addEventListener('abort', () => {\n        reject(getAbortedReason(signal));\n      });\n    } // We create the error outside of `setTimeout` to preserve the stack trace.\n\n\n    const timeoutError = new TimeoutError();\n    timer = customTimers.setTimeout.call(undefined, () => {\n      if (fallback) {\n        try {\n          resolve(fallback());\n        } catch (error) {\n          reject(error);\n        }\n\n        return;\n      }\n\n      if (typeof promise.cancel === 'function') {\n        promise.cancel();\n      }\n\n      if (message === false) {\n        resolve();\n      } else if (message instanceof Error) {\n        reject(message);\n      } else {\n        timeoutError.message = message ?? `Promise timed out after ${milliseconds} milliseconds`;\n        reject(timeoutError);\n      }\n    }, milliseconds);\n\n    (async () => {\n      try {\n        resolve(await promise);\n      } catch (error) {\n        reject(error);\n      } finally {\n        customTimers.clearTimeout.call(undefined, timer);\n      }\n    })();\n  });\n\n  cancelablePromise.clear = () => {\n    customTimers.clearTimeout.call(undefined, timer);\n    timer = undefined;\n  };\n\n  return cancelablePromise;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/p-timeout/index.js"],"names":["TimeoutError","Error","constructor","message","name","AbortError","getDOMException","errorMessage","globalThis","DOMException","undefined","getAbortedReason","signal","reason","pTimeout","promise","options","milliseconds","fallback","customTimers","setTimeout","clearTimeout","timer","cancelablePromise","Promise","resolve","reject","Math","sign","TypeError","Number","POSITIVE_INFINITY","aborted","addEventListener","timeoutError","call","error","cancel","clear"],"mappings":"AAAA,OAAO,MAAMA,YAAN,SAA2BC,KAA3B,CAAiC;AACvCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB,UAAMA,OAAN;AACA,SAAKC,IAAL,GAAY,cAAZ;AACA;;AAJsC;AAOxC;AACA;AACA;AACA;;AACA,OAAO,MAAMC,UAAN,SAAyBJ,KAAzB,CAA+B;AACrCC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACpB;AACA,SAAKC,IAAL,GAAY,YAAZ;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA;;AALoC;AAQtC;AACA;AACA;;AACA,MAAMG,eAAe,GAAGC,YAAY,IAAIC,UAAU,CAACC,YAAX,KAA4BC,SAA5B,GACrC,IAAIL,UAAJ,CAAeE,YAAf,CADqC,GAErC,IAAIE,YAAJ,CAAiBF,YAAjB,CAFH;AAIA;AACA;AACA;;;AACA,MAAMI,gBAAgB,GAAGC,MAAM,IAAI;AAClC,QAAMC,MAAM,GAAGD,MAAM,CAACC,MAAP,KAAkBH,SAAlB,GACZJ,eAAe,CAAC,6BAAD,CADH,GAEZM,MAAM,CAACC,MAFV;AAIA,SAAOA,MAAM,YAAYZ,KAAlB,GAA0BY,MAA1B,GAAmCP,eAAe,CAACO,MAAD,CAAzD;AACA,CAND;;AAQA,eAAe,SAASC,QAAT,CAAkBC,OAAlB,EAA2BC,OAA3B,EAAoC;AAClD,QAAM;AACLC,IAAAA,YADK;AAELC,IAAAA,QAFK;AAGLf,IAAAA,OAHK;AAILgB,IAAAA,YAAY,GAAG;AAACC,MAAAA,UAAD;AAAaC,MAAAA;AAAb;AAJV,MAKFL,OALJ;AAOA,MAAIM,KAAJ;AAEA,QAAMC,iBAAiB,GAAG,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC1D,QAAI,OAAOT,YAAP,KAAwB,QAAxB,IAAoCU,IAAI,CAACC,IAAL,CAAUX,YAAV,MAA4B,CAApE,EAAuE;AACtE,YAAM,IAAIY,SAAJ,CAAe,4DAA2DZ,YAAa,IAAvF,CAAN;AACA;;AAED,QAAIA,YAAY,KAAKa,MAAM,CAACC,iBAA5B,EAA+C;AAC9CN,MAAAA,OAAO,CAACV,OAAD,CAAP;AACA;AACA;;AAED,QAAIC,OAAO,CAACJ,MAAZ,EAAoB;AACnB,YAAM;AAACA,QAAAA;AAAD,UAAWI,OAAjB;;AACA,UAAIJ,MAAM,CAACoB,OAAX,EAAoB;AACnBN,QAAAA,MAAM,CAACf,gBAAgB,CAACC,MAAD,CAAjB,CAAN;AACA;;AAEDA,MAAAA,MAAM,CAACqB,gBAAP,CAAwB,OAAxB,EAAiC,MAAM;AACtCP,QAAAA,MAAM,CAACf,gBAAgB,CAACC,MAAD,CAAjB,CAAN;AACA,OAFD;AAGA,KAnByD,CAqB1D;;;AACA,UAAMsB,YAAY,GAAG,IAAIlC,YAAJ,EAArB;AAEAsB,IAAAA,KAAK,GAAGH,YAAY,CAACC,UAAb,CAAwBe,IAAxB,CAA6BzB,SAA7B,EAAwC,MAAM;AACrD,UAAIQ,QAAJ,EAAc;AACb,YAAI;AACHO,UAAAA,OAAO,CAACP,QAAQ,EAAT,CAAP;AACA,SAFD,CAEE,OAAOkB,KAAP,EAAc;AACfV,UAAAA,MAAM,CAACU,KAAD,CAAN;AACA;;AAED;AACA;;AAED,UAAI,OAAOrB,OAAO,CAACsB,MAAf,KAA0B,UAA9B,EAA0C;AACzCtB,QAAAA,OAAO,CAACsB,MAAR;AACA;;AAED,UAAIlC,OAAO,KAAK,KAAhB,EAAuB;AACtBsB,QAAAA,OAAO;AACP,OAFD,MAEO,IAAItB,OAAO,YAAYF,KAAvB,EAA8B;AACpCyB,QAAAA,MAAM,CAACvB,OAAD,CAAN;AACA,OAFM,MAEA;AACN+B,QAAAA,YAAY,CAAC/B,OAAb,GAAuBA,OAAO,IAAK,2BAA0Bc,YAAa,eAA1E;AACAS,QAAAA,MAAM,CAACQ,YAAD,CAAN;AACA;AACD,KAvBO,EAuBLjB,YAvBK,CAAR;;AAyBA,KAAC,YAAY;AACZ,UAAI;AACHQ,QAAAA,OAAO,CAAC,MAAMV,OAAP,CAAP;AACA,OAFD,CAEE,OAAOqB,KAAP,EAAc;AACfV,QAAAA,MAAM,CAACU,KAAD,CAAN;AACA,OAJD,SAIU;AACTjB,QAAAA,YAAY,CAACE,YAAb,CAA0Bc,IAA1B,CAA+BzB,SAA/B,EAA0CY,KAA1C;AACA;AACD,KARD;AASA,GA1DyB,CAA1B;;AA4DAC,EAAAA,iBAAiB,CAACe,KAAlB,GAA0B,MAAM;AAC/BnB,IAAAA,YAAY,CAACE,YAAb,CAA0Bc,IAA1B,CAA+BzB,SAA/B,EAA0CY,KAA1C;AACAA,IAAAA,KAAK,GAAGZ,SAAR;AACA,GAHD;;AAKA,SAAOa,iBAAP;AACA","sourcesContent":["export class TimeoutError extends Error {\n\tconstructor(message) {\n\t\tsuper(message);\n\t\tthis.name = 'TimeoutError';\n\t}\n}\n\n/**\nAn error to be thrown when the request is aborted by AbortController.\nDOMException is thrown instead of this Error when DOMException is available.\n*/\nexport class AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\n/**\nTODO: Remove AbortError and just throw DOMException when targeting Node 18.\n*/\nconst getDOMException = errorMessage => globalThis.DOMException === undefined\n\t? new AbortError(errorMessage)\n\t: new DOMException(errorMessage);\n\n/**\nTODO: Remove below function and just 'reject(signal.reason)' when targeting Node 18.\n*/\nconst getAbortedReason = signal => {\n\tconst reason = signal.reason === undefined\n\t\t? getDOMException('This operation was aborted.')\n\t\t: signal.reason;\n\n\treturn reason instanceof Error ? reason : getDOMException(reason);\n};\n\nexport default function pTimeout(promise, options) {\n\tconst {\n\t\tmilliseconds,\n\t\tfallback,\n\t\tmessage,\n\t\tcustomTimers = {setTimeout, clearTimeout},\n\t} = options;\n\n\tlet timer;\n\n\tconst cancelablePromise = new Promise((resolve, reject) => {\n\t\tif (typeof milliseconds !== 'number' || Math.sign(milliseconds) !== 1) {\n\t\t\tthrow new TypeError(`Expected \\`milliseconds\\` to be a positive number, got \\`${milliseconds}\\``);\n\t\t}\n\n\t\tif (milliseconds === Number.POSITIVE_INFINITY) {\n\t\t\tresolve(promise);\n\t\t\treturn;\n\t\t}\n\n\t\tif (options.signal) {\n\t\t\tconst {signal} = options;\n\t\t\tif (signal.aborted) {\n\t\t\t\treject(getAbortedReason(signal));\n\t\t\t}\n\n\t\t\tsignal.addEventListener('abort', () => {\n\t\t\t\treject(getAbortedReason(signal));\n\t\t\t});\n\t\t}\n\n\t\t// We create the error outside of `setTimeout` to preserve the stack trace.\n\t\tconst timeoutError = new TimeoutError();\n\n\t\ttimer = customTimers.setTimeout.call(undefined, () => {\n\t\t\tif (fallback) {\n\t\t\t\ttry {\n\t\t\t\t\tresolve(fallback());\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (typeof promise.cancel === 'function') {\n\t\t\t\tpromise.cancel();\n\t\t\t}\n\n\t\t\tif (message === false) {\n\t\t\t\tresolve();\n\t\t\t} else if (message instanceof Error) {\n\t\t\t\treject(message);\n\t\t\t} else {\n\t\t\t\ttimeoutError.message = message ?? `Promise timed out after ${milliseconds} milliseconds`;\n\t\t\t\treject(timeoutError);\n\t\t\t}\n\t\t}, milliseconds);\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tresolve(await promise);\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t} finally {\n\t\t\t\tcustomTimers.clearTimeout.call(undefined, timer);\n\t\t\t}\n\t\t})();\n\t});\n\n\tcancelablePromise.clear = () => {\n\t\tcustomTimers.clearTimeout.call(undefined, timer);\n\t\ttimer = undefined;\n\t};\n\n\treturn cancelablePromise;\n}\n"]},"metadata":{},"sourceType":"module"}