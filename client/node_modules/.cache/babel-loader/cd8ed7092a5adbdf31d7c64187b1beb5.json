{"ast":null,"code":"import { pushable } from 'it-pushable';\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n */\n\nexport default async function* merge() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  const output = pushable({\n    objectMode: true\n  });\n  void Promise.resolve().then(async () => {\n    try {\n      await Promise.all(sources.map(async source => {\n        for await (const item of source) {\n          output.push(item);\n        }\n      }));\n      output.end();\n    } catch (err) {\n      output.end(err);\n    }\n  });\n  yield* output;\n}","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;AAEA;;;;;;;AAMA,eAAe,gBAAiBC,KAAjB,GAA6E;AAAA,oCAA9CC,OAA8C;AAA9CA,WAA8C;AAAA;;AAC1F,QAAMC,MAAM,GAAGH,QAAQ,CAAI;AACzBI,cAAU,EAAE;AADa,GAAJ,CAAvB;AAIA,OAAKC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACrC,QAAI;AACF,YAAMF,OAAO,CAACG,GAAR,CACJN,OAAO,CAACO,GAAR,CAAY,MAAOC,MAAP,IAAiB;AAC3B,mBAAW,MAAMC,IAAjB,IAAyBD,MAAzB,EAAiC;AAC/BP,gBAAM,CAACS,IAAP,CAAYD,IAAZ;AACD;AACF,OAJD,CADI,CAAN;AAQAR,YAAM,CAACU,GAAP;AACD,KAVD,CAUE,OAAOC,GAAP,EAAiB;AACjBX,YAAM,CAACU,GAAP,CAAWC,GAAX;AACD;AACF,GAdI,CAAL;AAgBA,SAAQX,MAAR;AACD","names":["pushable","merge","sources","output","objectMode","Promise","resolve","then","all","map","source","item","push","end","err"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\it-merge\\src\\index.ts"],"sourcesContent":["import { pushable } from 'it-pushable'\n\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n */\nexport default async function * merge <T> (...sources: Array<AsyncIterable<T> | Iterable<T>>): AsyncGenerator<T, void, undefined> {\n  const output = pushable<T>({\n    objectMode: true\n  })\n\n  void Promise.resolve().then(async () => {\n    try {\n      await Promise.all(\n        sources.map(async (source) => {\n          for await (const item of source) {\n            output.push(item)\n          }\n        })\n      )\n\n      output.end()\n    } catch (err: any) {\n      output.end(err)\n    }\n  })\n\n  yield * output\n}\n"]},"metadata":{},"sourceType":"module"}