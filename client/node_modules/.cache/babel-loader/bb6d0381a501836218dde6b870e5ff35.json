{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { MFS_ROOT_KEY } from '../../../utils.js';\nimport errCode from 'err-code';\nconst log = logger('ipfs:mfs:utils:update-mfs-root');\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('multiformats/cid').CID} cid\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\n\nexport async function updateMfsRoot(context, cid, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n      name: 'Aborted'\n    });\n  }\n\n  log(`New MFS root will be ${cid}`);\n  await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes);\n  return cid;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/files/utils/update-mfs-root.js"],"names":["logger","MFS_ROOT_KEY","errCode","log","updateMfsRoot","context","cid","options","signal","aborted","Error","name","repo","datastore","put","bytes"],"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SACEC,YADF,QAEO,mBAFP;AAGA,OAAOC,OAAP,MAAoB,UAApB;AAEA,MAAMC,GAAG,GAAGH,MAAM,CAAC,gCAAD,CAAlB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeI,aAAf,CAA8BC,OAA9B,EAAuCC,GAAvC,EAA4CC,OAA5C,EAAqD;AAC1D,MAAIA,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OAAhD,EAAyD;AACvD,UAAMP,OAAO,CAAC,IAAIQ,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA9C,CAAb;AACD;;AAEDR,EAAAA,GAAG,CAAE,wBAAuBG,GAAI,EAA7B,CAAH;AAEA,QAAMD,OAAO,CAACO,IAAR,CAAaC,SAAb,CAAuBC,GAAvB,CAA2Bb,YAA3B,EAAyCK,GAAG,CAACS,KAA7C,CAAN;AAEA,SAAOT,GAAP;AACD","sourcesContent":["import { logger } from '@libp2p/logger'\nimport {\n  MFS_ROOT_KEY\n} from '../../../utils.js'\nimport errCode from 'err-code'\n\nconst log = logger('ipfs:mfs:utils:update-mfs-root')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('multiformats/cid').CID} cid\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport async function updateMfsRoot (context, cid, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  log(`New MFS root will be ${cid}`)\n\n  await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n\n  return cid\n}\n"]},"metadata":{},"sourceType":"module"}