{"ast":null,"code":"import { UnixFS } from 'ipfs-unixfs';\nimport * as dagPB from '@ipld/dag-pb';\nimport { CID } from 'multiformats/cid';\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\n\nexport async function createNode(context, type, options) {\n  const metadata = new UnixFS({\n    type,\n    mode: options.mode,\n    mtime: options.mtime\n  }); // Persist the new parent PBNode\n\n  const hasher = await context.hashers.getHasher(options.hashAlg);\n  const node = {\n    Data: metadata.marshal(),\n    Links: []\n  };\n  const buf = dagPB.encode(node);\n  const hash = await hasher.digest(buf);\n  const cid = CID.create(options.cidVersion, dagPB.code, hash);\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf);\n  }\n\n  return {\n    cid,\n    node\n  };\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/files/utils/create-node.js"],"names":["UnixFS","dagPB","CID","createNode","context","type","options","metadata","mode","mtime","hasher","hashers","getHasher","hashAlg","node","Data","marshal","Links","buf","encode","hash","digest","cid","create","cidVersion","code","flush","repo","blocks","put"],"mappings":"AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,SAASC,GAAT,QAAoB,kBAApB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,UAAf,CAA2BC,OAA3B,EAAoCC,IAApC,EAA0CC,OAA1C,EAAmD;AACxD,QAAMC,QAAQ,GAAG,IAAIP,MAAJ,CAAW;AAC1BK,IAAAA,IAD0B;AAE1BG,IAAAA,IAAI,EAAEF,OAAO,CAACE,IAFY;AAG1BC,IAAAA,KAAK,EAAEH,OAAO,CAACG;AAHW,GAAX,CAAjB,CADwD,CAOxD;;AACA,QAAMC,MAAM,GAAG,MAAMN,OAAO,CAACO,OAAR,CAAgBC,SAAhB,CAA0BN,OAAO,CAACO,OAAlC,CAArB;AACA,QAAMC,IAAI,GAAG;AACXC,IAAAA,IAAI,EAAER,QAAQ,CAACS,OAAT,EADK;AAEXC,IAAAA,KAAK,EAAE;AAFI,GAAb;AAIA,QAAMC,GAAG,GAAGjB,KAAK,CAACkB,MAAN,CAAaL,IAAb,CAAZ;AACA,QAAMM,IAAI,GAAG,MAAMV,MAAM,CAACW,MAAP,CAAcH,GAAd,CAAnB;AACA,QAAMI,GAAG,GAAGpB,GAAG,CAACqB,MAAJ,CAAWjB,OAAO,CAACkB,UAAnB,EAA+BvB,KAAK,CAACwB,IAArC,EAA2CL,IAA3C,CAAZ;;AAEA,MAAId,OAAO,CAACoB,KAAZ,EAAmB;AACjB,UAAMtB,OAAO,CAACuB,IAAR,CAAaC,MAAb,CAAoBC,GAApB,CAAwBP,GAAxB,EAA6BJ,GAA7B,CAAN;AACD;;AAED,SAAO;AACLI,IAAAA,GADK;AAELR,IAAAA;AAFK,GAAP;AAID","sourcesContent":["import { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {'file' | 'directory'} type\n * @param {object} options\n * @param {string} options.hashAlg\n * @param {CIDVersion} options.cidVersion\n * @param {boolean} options.flush\n * @param {MtimeLike} [options.mtime]\n * @param {number} [options.mode]\n */\nexport async function createNode (context, type, options) {\n  const metadata = new UnixFS({\n    type,\n    mode: options.mode,\n    mtime: options.mtime\n  })\n\n  // Persist the new parent PBNode\n  const hasher = await context.hashers.getHasher(options.hashAlg)\n  const node = {\n    Data: metadata.marshal(),\n    Links: []\n  }\n  const buf = dagPB.encode(node)\n  const hash = await hasher.digest(buf)\n  const cid = CID.create(options.cidVersion, dagPB.code, hash)\n\n  if (options.flush) {\n    await context.repo.blocks.put(cid, buf)\n  }\n\n  return {\n    cid,\n    node\n  }\n}\n"]},"metadata":{},"sourceType":"module"}