{"ast":null,"code":"export default (socket => {\n  // if the socket is closing or closed, return end\n  if (socket.readyState >= 2) {\n    throw new Error('socket closed');\n  } // if open, return\n\n\n  if (socket.readyState === 1) {\n    return;\n  }\n\n  return new Promise((resolve, reject) => {\n    function cleanup() {\n      socket.removeEventListener('open', handleOpen);\n      socket.removeEventListener('error', handleErr);\n    }\n\n    function handleOpen() {\n      cleanup();\n      resolve();\n    }\n\n    function handleErr(event) {\n      cleanup();\n      reject(event.error ?? new Error(`connect ECONNREFUSED ${socket.url}`));\n    }\n\n    socket.addEventListener('open', handleOpen);\n    socket.addEventListener('error', handleErr);\n  });\n});","map":{"version":3,"mappings":"AAEA,gBAAgBA,MAAD,IAAsB;AACnC;AACA,MAAIA,MAAM,CAACC,UAAP,IAAqB,CAAzB,EAA4B;AAC1B,UAAM,IAAIC,KAAJ,CAAU,eAAV,CAAN;AACD,GAJkC,CAMnC;;;AACA,MAAIF,MAAM,CAACC,UAAP,KAAsB,CAA1B,EAA6B;AAC3B;AACD;;AAED,SAAO,IAAIE,OAAJ,CAAkB,CAACC,OAAD,EAAUC,MAAV,KAAoB;AAC3C,aAASC,OAAT,GAAgB;AACdN,YAAM,CAACO,mBAAP,CAA2B,MAA3B,EAAmCC,UAAnC;AACAR,YAAM,CAACO,mBAAP,CAA2B,OAA3B,EAAoCE,SAApC;AACD;;AAED,aAASD,UAAT,GAAmB;AACjBF,aAAO;AACPF,aAAO;AACR;;AAED,aAASK,SAAT,CAAoBC,KAApB,EAAqC;AACnCJ,aAAO;AACPD,YAAM,CAACK,KAAK,CAACC,KAAN,IAAe,IAAIT,KAAJ,CAAU,wBAAwBF,MAAM,CAACY,GAAG,EAA5C,CAAhB,CAAN;AACD;;AAEDZ,UAAM,CAACa,gBAAP,CAAwB,MAAxB,EAAgCL,UAAhC;AACAR,UAAM,CAACa,gBAAP,CAAwB,OAAxB,EAAiCJ,SAAjC;AACD,GAlBM,CAAP;AAmBD,CA9BD","names":["socket","readyState","Error","Promise","resolve","reject","cleanup","removeEventListener","handleOpen","handleErr","event","error","url","addEventListener"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\it-ws\\src\\ready.ts"],"sourcesContent":["import type { ErrorEvent, WebSocket } from 'ws'\n\nexport default (socket: WebSocket) => {\n  // if the socket is closing or closed, return end\n  if (socket.readyState >= 2) {\n    throw new Error('socket closed')\n  }\n\n  // if open, return\n  if (socket.readyState === 1) {\n    return\n  }\n\n  return new Promise<void>((resolve, reject) => {\n    function cleanup () {\n      socket.removeEventListener('open', handleOpen)\n      socket.removeEventListener('error', handleErr)\n    }\n\n    function handleOpen () {\n      cleanup()\n      resolve()\n    }\n\n    function handleErr (event: ErrorEvent) {\n      cleanup()\n      reject(event.error ?? new Error(`connect ECONNREFUSED ${socket.url}`))\n    }\n\n    socket.addEventListener('open', handleOpen)\n    socket.addEventListener('error', handleErr)\n  })\n}\n"]},"metadata":{},"sourceType":"module"}