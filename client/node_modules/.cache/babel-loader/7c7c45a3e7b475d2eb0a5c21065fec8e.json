{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\nexport function createStat(_ref) {\n  let {\n    network\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"stat\"]}\n   */\n  async function stat() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    /** @type {import('ipfs-bitswap').IPFSBitswap} */\n    const bitswap = (await network.use(options)).bitswap;\n    const snapshot = bitswap.stat().snapshot;\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers(),\n      dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n      dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n      dataReceived: BigInt(snapshot.dataReceived.toString()),\n      blocksSent: BigInt(snapshot.blocksSent.toString()),\n      dataSent: BigInt(snapshot.dataSent.toString())\n    };\n  }\n\n  return withTimeoutOption(stat);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/bitswap/stat.js"],"names":["withTimeoutOption","createStat","network","stat","options","bitswap","use","snapshot","provideBufLen","parseInt","providesBufferLength","toString","blocksReceived","BigInt","wantlist","Array","from","getWantlist","map","e","cid","peers","dupBlksReceived","dupDataReceived","dataReceived","blocksSent","dataSent"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qCAAlC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,OAAkC;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;;AACvC;AACF;AACA;AACE,iBAAeC,IAAf,GAAmC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACjC;AACA,UAAMC,OAAO,GAAG,CAAC,MAAMH,OAAO,CAACI,GAAR,CAAYF,OAAZ,CAAP,EAA6BC,OAA7C;AACA,UAAME,QAAQ,GAAGF,OAAO,CAACF,IAAR,GAAeI,QAAhC;AAEA,WAAO;AACLC,MAAAA,aAAa,EAAEC,QAAQ,CAACF,QAAQ,CAACG,oBAAT,CAA8BC,QAA9B,EAAD,CADlB;AAELC,MAAAA,cAAc,EAAEC,MAAM,CAACN,QAAQ,CAACK,cAAT,CAAwBD,QAAxB,EAAD,CAFjB;AAGLG,MAAAA,QAAQ,EAAEC,KAAK,CAACC,IAAN,CAAWX,OAAO,CAACY,WAAR,EAAX,EAAkCC,GAAlC,CAAsCC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,GAAhD,CAHL;AAILC,MAAAA,KAAK,EAAEhB,OAAO,CAACgB,KAAR,EAJF;AAKLC,MAAAA,eAAe,EAAET,MAAM,CAACN,QAAQ,CAACe,eAAT,CAAyBX,QAAzB,EAAD,CALlB;AAMLY,MAAAA,eAAe,EAAEV,MAAM,CAACN,QAAQ,CAACgB,eAAT,CAAyBZ,QAAzB,EAAD,CANlB;AAOLa,MAAAA,YAAY,EAAEX,MAAM,CAACN,QAAQ,CAACiB,YAAT,CAAsBb,QAAtB,EAAD,CAPf;AAQLc,MAAAA,UAAU,EAAEZ,MAAM,CAACN,QAAQ,CAACkB,UAAT,CAAoBd,QAApB,EAAD,CARb;AASLe,MAAAA,QAAQ,EAAEb,MAAM,CAACN,QAAQ,CAACmB,QAAT,CAAkBf,QAAlB,EAAD;AATX,KAAP;AAWD;;AAED,SAAOX,iBAAiB,CAACG,IAAD,CAAxB;AACD","sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createStat ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"stat\"]}\n   */\n  async function stat (options = {}) {\n    /** @type {import('ipfs-bitswap').IPFSBitswap} */\n    const bitswap = (await network.use(options)).bitswap\n    const snapshot = bitswap.stat().snapshot\n\n    return {\n      provideBufLen: parseInt(snapshot.providesBufferLength.toString()),\n      blocksReceived: BigInt(snapshot.blocksReceived.toString()),\n      wantlist: Array.from(bitswap.getWantlist()).map(e => e[1].cid),\n      peers: bitswap.peers(),\n      dupBlksReceived: BigInt(snapshot.dupBlksReceived.toString()),\n      dupDataReceived: BigInt(snapshot.dupDataReceived.toString()),\n      dataReceived: BigInt(snapshot.dataReceived.toString()),\n      blocksSent: BigInt(snapshot.blocksSent.toString()),\n      dataSent: BigInt(snapshot.dataSent.toString())\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n"]},"metadata":{},"sourceType":"module"}