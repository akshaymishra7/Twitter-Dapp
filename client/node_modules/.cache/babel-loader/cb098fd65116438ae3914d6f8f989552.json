{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n/**\n * @typedef {import('ipfs-core-types/src/swarm').PeersResult} PeersResult\n */\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\nexport function createPeers(_ref) {\n  let {\n    network\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"peers\"]}\n   */\n  async function peers() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      libp2p\n    } = await network.use(options);\n\n    if (options.verbose) {\n      const peers = [];\n\n      for (const connection of libp2p.getConnections()) {\n        /** @type {PeersResult} */\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: connection.remotePeer\n        };\n\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction;\n        }\n\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer;\n          peer.latency = 'n/a';\n          peer.streams = []; // TODO: get this from libp2p\n        }\n\n        peers.push(peer);\n      }\n\n      return peers;\n    }\n    /** @type {Map<string, PeersResult>} */\n\n\n    const peers = new Map();\n\n    for (const connection of libp2p.getConnections()) {\n      /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n      const peer = {\n        addr: connection.remoteAddr,\n        peer: connection.remotePeer\n      };\n      peers.set(connection.remotePeer.toString(), peer);\n    }\n\n    return Array.from(peers.values());\n  }\n\n  return withTimeoutOption(peers);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/swarm/peers.js"],"names":["withTimeoutOption","createPeers","network","peers","options","libp2p","use","verbose","connection","getConnections","peer","addr","remoteAddr","remotePeer","direction","stat","muxer","multiplexer","latency","streams","push","Map","set","toString","Array","from","values"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qCAAlC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,OAAmC;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;;AACxC;AACF;AACA;AACE,iBAAeC,KAAf,GAAoC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAClC,UAAM;AAAEC,MAAAA;AAAF,QAAa,MAAMH,OAAO,CAACI,GAAR,CAAYF,OAAZ,CAAzB;;AAEA,QAAIA,OAAO,CAACG,OAAZ,EAAqB;AACnB,YAAMJ,KAAK,GAAG,EAAd;;AACA,WAAK,MAAMK,UAAX,IAAyBH,MAAM,CAACI,cAAP,EAAzB,EAAkD;AAChD;AACA,cAAMC,IAAI,GAAG;AACXC,UAAAA,IAAI,EAAEH,UAAU,CAACI,UADN;AAEXF,UAAAA,IAAI,EAAEF,UAAU,CAACK;AAFN,SAAb;;AAKA,YAAIT,OAAO,CAACG,OAAR,IAAmBH,OAAO,CAACU,SAA/B,EAA0C;AACxCJ,UAAAA,IAAI,CAACI,SAAL,GAAiBN,UAAU,CAACO,IAAX,CAAgBD,SAAjC;AACD;;AAED,YAAIV,OAAO,CAACG,OAAZ,EAAqB;AACnBG,UAAAA,IAAI,CAACM,KAAL,GAAaR,UAAU,CAACO,IAAX,CAAgBE,WAA7B;AACAP,UAAAA,IAAI,CAACQ,OAAL,GAAe,KAAf;AACAR,UAAAA,IAAI,CAACS,OAAL,GAAe,EAAf,CAHmB,CAGD;AACnB;;AAEDhB,QAAAA,KAAK,CAACiB,IAAN,CAAWV,IAAX;AACD;;AAED,aAAOP,KAAP;AACD;AAED;;;AACA,UAAMA,KAAK,GAAG,IAAIkB,GAAJ,EAAd;;AAEA,SAAK,MAAMb,UAAX,IAAyBH,MAAM,CAACI,cAAP,EAAzB,EAAkD;AAChD;AACA,YAAMC,IAAI,GAAG;AACXC,QAAAA,IAAI,EAAEH,UAAU,CAACI,UADN;AAEXF,QAAAA,IAAI,EAAEF,UAAU,CAACK;AAFN,OAAb;AAKAV,MAAAA,KAAK,CAACmB,GAAN,CAAUd,UAAU,CAACK,UAAX,CAAsBU,QAAtB,EAAV,EAA4Cb,IAA5C;AACD;;AAED,WAAOc,KAAK,CAACC,IAAN,CAAWtB,KAAK,CAACuB,MAAN,EAAX,CAAP;AACD;;AAED,SAAO1B,iBAAiB,CAACG,KAAD,CAAxB;AACD","sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('ipfs-core-types/src/swarm').PeersResult} PeersResult\n */\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createPeers ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"peers\"]}\n   */\n  async function peers (options = {}) {\n    const { libp2p } = await network.use(options)\n\n    if (options.verbose) {\n      const peers = []\n      for (const connection of libp2p.getConnections()) {\n        /** @type {PeersResult} */\n        const peer = {\n          addr: connection.remoteAddr,\n          peer: connection.remotePeer\n        }\n\n        if (options.verbose || options.direction) {\n          peer.direction = connection.stat.direction\n        }\n\n        if (options.verbose) {\n          peer.muxer = connection.stat.multiplexer\n          peer.latency = 'n/a'\n          peer.streams = [] // TODO: get this from libp2p\n        }\n\n        peers.push(peer)\n      }\n\n      return peers\n    }\n\n    /** @type {Map<string, PeersResult>} */\n    const peers = new Map()\n\n    for (const connection of libp2p.getConnections()) {\n      /** @type {import('ipfs-core-types/src/swarm').PeersResult} */\n      const peer = {\n        addr: connection.remoteAddr,\n        peer: connection.remotePeer\n      }\n\n      peers.set(connection.remotePeer.toString(), peer)\n    }\n\n    return Array.from(peers.values())\n  }\n\n  return withTimeoutOption(peers)\n}\n"]},"metadata":{},"sourceType":"module"}