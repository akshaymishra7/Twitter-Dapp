{"ast":null,"code":"import { multiaddr } from '@multiformats/multiaddr';\nimport { arrayEquals } from '@libp2p/utils/array-equals';\nimport { peerIdFromBytes } from '@libp2p/peer-id';\nimport { PeerRecord as Protobuf } from './peer-record.js';\nimport { ENVELOPE_DOMAIN_PEER_RECORD, ENVELOPE_PAYLOAD_TYPE_PEER_RECORD } from './consts.js';\n/**\n * The PeerRecord is used for distributing peer routing records across the network.\n * It contains the peer's reachable listen addresses.\n */\n\nexport class PeerRecord {\n  constructor(init) {\n    this.domain = PeerRecord.DOMAIN;\n    this.codec = PeerRecord.CODEC;\n    const {\n      peerId,\n      multiaddrs,\n      seqNumber\n    } = init;\n    this.peerId = peerId;\n    this.multiaddrs = multiaddrs ?? [];\n    this.seqNumber = seqNumber ?? BigInt(Date.now());\n  }\n  /**\n   * Marshal a record to be used in an envelope\n   */\n\n\n  marshal() {\n    if (this.marshaled == null) {\n      this.marshaled = Protobuf.encode({\n        peerId: this.peerId.toBytes(),\n        seq: BigInt(this.seqNumber),\n        addresses: this.multiaddrs.map(m => ({\n          multiaddr: m.bytes\n        }))\n      });\n    }\n\n    return this.marshaled;\n  }\n  /**\n   * Returns true if `this` record equals the `other`\n   */\n\n\n  equals(other) {\n    if (!(other instanceof PeerRecord)) {\n      return false;\n    } // Validate PeerId\n\n\n    if (!this.peerId.equals(other.peerId)) {\n      return false;\n    } // Validate seqNumber\n\n\n    if (this.seqNumber !== other.seqNumber) {\n      return false;\n    } // Validate multiaddrs\n\n\n    if (!arrayEquals(this.multiaddrs, other.multiaddrs)) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\n/**\n * Unmarshal Peer Record Protobuf\n */\n\nPeerRecord.createFromProtobuf = buf => {\n  const peerRecord = Protobuf.decode(buf);\n  const peerId = peerIdFromBytes(peerRecord.peerId);\n  const multiaddrs = (peerRecord.addresses ?? []).map(a => multiaddr(a.multiaddr));\n  const seqNumber = peerRecord.seq;\n  return new PeerRecord({\n    peerId,\n    multiaddrs,\n    seqNumber\n  });\n};\n\nPeerRecord.DOMAIN = ENVELOPE_DOMAIN_PEER_RECORD;\nPeerRecord.CODEC = ENVELOPE_PAYLOAD_TYPE_PEER_RECORD;","map":{"version":3,"mappings":"AAEA,SAASA,SAAT,QAA0B,yBAA1B;AACA,SAASC,WAAT,QAA4B,4BAA5B;AACA,SAASC,eAAT,QAAgC,iBAAhC;AACA,SAASC,UAAU,IAAIC,QAAvB,QAAuC,kBAAvC;AACA,SACEC,2BADF,EAEEC,iCAFF,QAGO,aAHP;AAoBA;;;;;AAIA,OAAM,MAAOH,UAAP,CAAiB;AAuBrBI,cAAaC,IAAb,EAAiC;AAJ1B,kBAASL,UAAU,CAACM,MAApB;AACA,iBAAQN,UAAU,CAACO,KAAnB;AAIL,UAAM;AAAEC,YAAF;AAAUC,gBAAV;AAAsBC;AAAtB,QAAoCL,IAA1C;AAEA,SAAKG,MAAL,GAAcA,MAAd;AACA,SAAKC,UAAL,GAAkBA,UAAU,IAAI,EAAhC;AACA,SAAKC,SAAL,GAAiBA,SAAS,IAAIC,MAAM,CAACC,IAAI,CAACC,GAAL,EAAD,CAApC;AACD;AAED;;;;;AAGAC,SAAO;AACL,QAAI,KAAKC,SAAL,IAAkB,IAAtB,EAA4B;AAC1B,WAAKA,SAAL,GAAiBd,QAAQ,CAACe,MAAT,CAAgB;AAC/BR,cAAM,EAAE,KAAKA,MAAL,CAAYS,OAAZ,EADuB;AAE/BC,WAAG,EAAEP,MAAM,CAAC,KAAKD,SAAN,CAFoB;AAG/BS,iBAAS,EAAE,KAAKV,UAAL,CAAgBW,GAAhB,CAAqBC,CAAD,KAAQ;AACrCxB,mBAAS,EAAEwB,CAAC,CAACC;AADwB,SAAR,CAApB;AAHoB,OAAhB,CAAjB;AAOD;;AAED,WAAO,KAAKP,SAAZ;AACD;AAED;;;;;AAGAQ,QAAM,CAAEC,KAAF,EAAgB;AACpB,QAAI,EAAEA,KAAK,YAAYxB,UAAnB,CAAJ,EAAoC;AAClC,aAAO,KAAP;AACD,KAHmB,CAKpB;;;AACA,QAAI,CAAC,KAAKQ,MAAL,CAAYe,MAAZ,CAAmBC,KAAK,CAAChB,MAAzB,CAAL,EAAuC;AACrC,aAAO,KAAP;AACD,KARmB,CAUpB;;;AACA,QAAI,KAAKE,SAAL,KAAmBc,KAAK,CAACd,SAA7B,EAAwC;AACtC,aAAO,KAAP;AACD,KAbmB,CAepB;;;AACA,QAAI,CAACZ,WAAW,CAAC,KAAKW,UAAN,EAAkBe,KAAK,CAACf,UAAxB,CAAhB,EAAqD;AACnD,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD;;AAxEoB;AACrB;;;;AAGOT,gCAAsByB,GAAD,IAAiD;AAC3E,QAAMC,UAAU,GAAGzB,QAAQ,CAAC0B,MAAT,CAAgBF,GAAhB,CAAnB;AACA,QAAMjB,MAAM,GAAGT,eAAe,CAAC2B,UAAU,CAAClB,MAAZ,CAA9B;AACA,QAAMC,UAAU,GAAG,CAACiB,UAAU,CAACP,SAAX,IAAwB,EAAzB,EAA6BC,GAA7B,CAAkCQ,CAAD,IAAO/B,SAAS,CAAC+B,CAAC,CAAC/B,SAAH,CAAjD,CAAnB;AACA,QAAMa,SAAS,GAAGgB,UAAU,CAACR,GAA7B;AAEA,SAAO,IAAIlB,UAAJ,CAAe;AAAEQ,UAAF;AAAUC,cAAV;AAAsBC;AAAtB,GAAf,CAAP;AACD,CAPM;;AASAV,oBAASE,2BAAT;AACAF,mBAAQG,iCAAR","names":["multiaddr","arrayEquals","peerIdFromBytes","PeerRecord","Protobuf","ENVELOPE_DOMAIN_PEER_RECORD","ENVELOPE_PAYLOAD_TYPE_PEER_RECORD","constructor","init","DOMAIN","CODEC","peerId","multiaddrs","seqNumber","BigInt","Date","now","marshal","marshaled","encode","toBytes","seq","addresses","map","m","bytes","equals","other","buf","peerRecord","decode","a"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\peer-record\\src\\peer-record\\index.ts"],"sourcesContent":["import type { Multiaddr } from '@multiformats/multiaddr'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport { arrayEquals } from '@libp2p/utils/array-equals'\nimport { peerIdFromBytes } from '@libp2p/peer-id'\nimport { PeerRecord as Protobuf } from './peer-record.js'\nimport {\n  ENVELOPE_DOMAIN_PEER_RECORD,\n  ENVELOPE_PAYLOAD_TYPE_PEER_RECORD\n} from './consts.js'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface PeerRecordInit {\n  peerId: PeerId\n\n  /**\n   * Addresses of the associated peer.\n   */\n  multiaddrs?: Multiaddr[]\n\n  /**\n   * Monotonically-increasing sequence counter that's used to order PeerRecords in time.\n   */\n  seqNumber?: bigint\n}\n\n/**\n * The PeerRecord is used for distributing peer routing records across the network.\n * It contains the peer's reachable listen addresses.\n */\nexport class PeerRecord {\n  /**\n   * Unmarshal Peer Record Protobuf\n   */\n  static createFromProtobuf = (buf: Uint8Array | Uint8ArrayList): PeerRecord => {\n    const peerRecord = Protobuf.decode(buf)\n    const peerId = peerIdFromBytes(peerRecord.peerId)\n    const multiaddrs = (peerRecord.addresses ?? []).map((a) => multiaddr(a.multiaddr))\n    const seqNumber = peerRecord.seq\n\n    return new PeerRecord({ peerId, multiaddrs, seqNumber })\n  }\n\n  static DOMAIN = ENVELOPE_DOMAIN_PEER_RECORD\n  static CODEC = ENVELOPE_PAYLOAD_TYPE_PEER_RECORD\n\n  public peerId: PeerId\n  public multiaddrs: Multiaddr[]\n  public seqNumber: bigint\n  public domain = PeerRecord.DOMAIN\n  public codec = PeerRecord.CODEC\n  private marshaled?: Uint8Array\n\n  constructor (init: PeerRecordInit) {\n    const { peerId, multiaddrs, seqNumber } = init\n\n    this.peerId = peerId\n    this.multiaddrs = multiaddrs ?? []\n    this.seqNumber = seqNumber ?? BigInt(Date.now())\n  }\n\n  /**\n   * Marshal a record to be used in an envelope\n   */\n  marshal (): Uint8Array {\n    if (this.marshaled == null) {\n      this.marshaled = Protobuf.encode({\n        peerId: this.peerId.toBytes(),\n        seq: BigInt(this.seqNumber),\n        addresses: this.multiaddrs.map((m) => ({\n          multiaddr: m.bytes\n        }))\n      })\n    }\n\n    return this.marshaled\n  }\n\n  /**\n   * Returns true if `this` record equals the `other`\n   */\n  equals (other: unknown): boolean {\n    if (!(other instanceof PeerRecord)) {\n      return false\n    }\n\n    // Validate PeerId\n    if (!this.peerId.equals(other.peerId)) {\n      return false\n    }\n\n    // Validate seqNumber\n    if (this.seqNumber !== other.seqNumber) {\n      return false\n    }\n\n    // Validate multiaddrs\n    if (!arrayEquals(this.multiaddrs, other.multiaddrs)) {\n      return false\n    }\n\n    return true\n  }\n}\n"]},"metadata":{},"sourceType":"module"}