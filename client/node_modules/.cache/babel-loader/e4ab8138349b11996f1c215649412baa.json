{"ast":null,"code":"/**\n * Exclude up to `ineed` items from a set if item meets condition `cond`\n */\nexport function removeItemsFromSet(superSet, ineed) {\n  let cond = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => true;\n  const subset = new Set();\n  if (ineed <= 0) return subset;\n\n  for (const id of superSet) {\n    if (subset.size >= ineed) break;\n\n    if (cond(id)) {\n      subset.add(id);\n      superSet.delete(id);\n    }\n  }\n\n  return subset;\n}\n/**\n * Exclude up to `ineed` items from a set\n */\n\nexport function removeFirstNItemsFromSet(superSet, ineed) {\n  return removeItemsFromSet(superSet, ineed, () => true);\n}\nexport class MapDef extends Map {\n  constructor(getDefault) {\n    super();\n    this.getDefault = getDefault;\n  }\n\n  getOrDefault(key) {\n    let value = super.get(key);\n\n    if (value === undefined) {\n      value = this.getDefault();\n      this.set(key, value);\n    }\n\n    return value;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;AAGA,OAAM,SAAUA,kBAAV,CACJC,QADI,EAEJC,KAFI,EAGmC;AAAA,MAAvCC,IAAuC,uEAAV,MAAM,IAAI;AAEvC,QAAMC,MAAM,GAAG,IAAIC,GAAJ,EAAf;AACA,MAAIH,KAAK,IAAI,CAAb,EAAgB,OAAOE,MAAP;;AAEhB,OAAK,MAAME,EAAX,IAAiBL,QAAjB,EAA2B;AACzB,QAAIG,MAAM,CAACG,IAAP,IAAeL,KAAnB,EAA0B;;AAC1B,QAAIC,IAAI,CAACG,EAAD,CAAR,EAAc;AACZF,YAAM,CAACI,GAAP,CAAWF,EAAX;AACAL,cAAQ,CAACQ,MAAT,CAAgBH,EAAhB;AACD;AACF;;AAED,SAAOF,MAAP;AACD;AAED;;;;AAGA,OAAM,SAAUM,wBAAV,CAAsCT,QAAtC,EAAwDC,KAAxD,EAAqE;AACzE,SAAOF,kBAAkB,CAACC,QAAD,EAAWC,KAAX,EAAkB,MAAM,IAAxB,CAAzB;AACD;AAED,OAAM,MAAOS,MAAP,SAA4BC,GAA5B,CAAqC;AACzCC,cAA6BC,UAA7B,EAAgD;AAC9C;AAD2B;AAE5B;;AAEDC,cAAY,CAACC,GAAD,EAAO;AACjB,QAAIC,KAAK,GAAG,MAAMC,GAAN,CAAUF,GAAV,CAAZ;;AACA,QAAIC,KAAK,KAAKE,SAAd,EAAyB;AACvBF,WAAK,GAAG,KAAKH,UAAL,EAAR;AACA,WAAKM,GAAL,CAASJ,GAAT,EAAcC,KAAd;AACD;;AACD,WAAOA,KAAP;AACD;;AAZwC","names":["removeItemsFromSet","superSet","ineed","cond","subset","Set","id","size","add","delete","removeFirstNItemsFromSet","MapDef","Map","constructor","getDefault","getOrDefault","key","value","get","undefined","set"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@chainsafe\\libp2p-gossipsub\\src\\utils\\set.ts"],"sourcesContent":["/**\n * Exclude up to `ineed` items from a set if item meets condition `cond`\n */\nexport function removeItemsFromSet<T>(\n  superSet: Set<T>,\n  ineed: number,\n  cond: (peer: T) => boolean = () => true\n): Set<T> {\n  const subset = new Set<T>()\n  if (ineed <= 0) return subset\n\n  for (const id of superSet) {\n    if (subset.size >= ineed) break\n    if (cond(id)) {\n      subset.add(id)\n      superSet.delete(id)\n    }\n  }\n\n  return subset\n}\n\n/**\n * Exclude up to `ineed` items from a set\n */\nexport function removeFirstNItemsFromSet<T>(superSet: Set<T>, ineed: number): Set<T> {\n  return removeItemsFromSet(superSet, ineed, () => true)\n}\n\nexport class MapDef<K, V> extends Map<K, V> {\n  constructor(private readonly getDefault: () => V) {\n    super()\n  }\n\n  getOrDefault(key: K): V {\n    let value = super.get(key)\n    if (value === undefined) {\n      value = this.getDefault()\n      this.set(key, value)\n    }\n    return value\n  }\n}\n"]},"metadata":{},"sourceType":"module"}