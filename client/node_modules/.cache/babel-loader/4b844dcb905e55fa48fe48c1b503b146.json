{"ast":null,"code":"import errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport { encode, prepare } from '@ipld/dag-pb';\nimport parallelBatch from 'it-parallel-batch';\nimport * as rawCodec from 'multiformats/codecs/raw';\nimport * as dagPb from '@ipld/dag-pb';\nimport dagFlat from './flat.js';\nimport dagBalanced from './balanced.js';\nimport dagTrickle from './trickle.js';\nimport bufferImporterFn from './buffer-importer.js';\nconst dagBuilders = {\n  flat: dagFlat,\n  balanced: dagBalanced,\n  trickle: dagTrickle\n};\n\nasync function* buildFileBatch(file, blockstore, options) {\n  let count = -1;\n  let previous;\n  let bufferImporter;\n\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter = options.bufferImporter;\n  } else {\n    bufferImporter = bufferImporterFn;\n  }\n\n  for await (const entry of parallelBatch(bufferImporter(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++;\n\n    if (count === 0) {\n      previous = entry;\n      continue;\n    } else if (count === 1 && previous) {\n      yield previous;\n      previous = null;\n    }\n\n    yield entry;\n  }\n\n  if (previous) {\n    previous.single = true;\n    yield previous;\n  }\n}\n\nconst reduce = (file, blockstore, options) => {\n  async function reducer(leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0];\n\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        let buffer = await blockstore.get(leaf.cid);\n        leaf.unixfs = new UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        });\n        buffer = encode(prepare({\n          Data: leaf.unixfs.marshal()\n        }));\n        leaf.cid = await persist(buffer, blockstore, { ...options,\n          codec: dagPb,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        });\n        leaf.size = buffer.length;\n      }\n\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      };\n    }\n\n    const f = new UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    });\n    const links = leaves.filter(leaf => {\n      if (leaf.cid.code === rawCodec.code && leaf.size) {\n        return true;\n      }\n\n      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n        return true;\n      }\n\n      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n    }).map(leaf => {\n      if (leaf.cid.code === rawCodec.code) {\n        f.addBlockSize(leaf.size);\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        };\n      }\n\n      if (!leaf.unixfs || !leaf.unixfs.data) {\n        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n      } else {\n        f.addBlockSize(leaf.unixfs.data.length);\n      }\n\n      return {\n        Name: '',\n        Tsize: leaf.size,\n        Hash: leaf.cid\n      };\n    });\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    };\n    const buffer = encode(prepare(node));\n    const cid = await persist(buffer, blockstore, options);\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    };\n  }\n\n  return reducer;\n};\n\nfunction fileBuilder(file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy];\n\n  if (!dagBuilder) {\n    throw errCode(new Error(`Unknown importer build strategy name: ${options.strategy}`), 'ERR_BAD_STRATEGY');\n  }\n\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\n\nexport default fileBuilder;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/client/node_modules/ipfs-unixfs-importer/esm/src/dag-builder/file/index.js"],"names":["errCode","UnixFS","persist","encode","prepare","parallelBatch","rawCodec","dagPb","dagFlat","dagBalanced","dagTrickle","bufferImporterFn","dagBuilders","flat","balanced","trickle","buildFileBatch","file","blockstore","options","count","previous","bufferImporter","entry","blockWriteConcurrency","single","reduce","reducer","leaves","length","reduceSingleLeafToSelf","leaf","mtime","undefined","mode","buffer","get","cid","unixfs","type","data","Data","marshal","codec","hasher","cidVersion","size","path","f","links","filter","code","fileSize","Boolean","map","addBlockSize","Name","Tsize","Hash","node","Links","acc","curr","fileBuilder","block","dagBuilder","strategy","Error"],"mappings":"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","sourcesContent":["import errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport {\n  encode,\n  prepare\n} from '@ipld/dag-pb';\nimport parallelBatch from 'it-parallel-batch';\nimport * as rawCodec from 'multiformats/codecs/raw';\nimport * as dagPb from '@ipld/dag-pb';\nimport dagFlat from './flat.js';\nimport dagBalanced from './balanced.js';\nimport dagTrickle from './trickle.js';\nimport bufferImporterFn from './buffer-importer.js';\nconst dagBuilders = {\n  flat: dagFlat,\n  balanced: dagBalanced,\n  trickle: dagTrickle\n};\nasync function* buildFileBatch(file, blockstore, options) {\n  let count = -1;\n  let previous;\n  let bufferImporter;\n  if (typeof options.bufferImporter === 'function') {\n    bufferImporter = options.bufferImporter;\n  } else {\n    bufferImporter = bufferImporterFn;\n  }\n  for await (const entry of parallelBatch(bufferImporter(file, blockstore, options), options.blockWriteConcurrency)) {\n    count++;\n    if (count === 0) {\n      previous = entry;\n      continue;\n    } else if (count === 1 && previous) {\n      yield previous;\n      previous = null;\n    }\n    yield entry;\n  }\n  if (previous) {\n    previous.single = true;\n    yield previous;\n  }\n}\nconst reduce = (file, blockstore, options) => {\n  async function reducer(leaves) {\n    if (leaves.length === 1 && leaves[0].single && options.reduceSingleLeafToSelf) {\n      const leaf = leaves[0];\n      if (file.mtime !== undefined || file.mode !== undefined) {\n        let buffer = await blockstore.get(leaf.cid);\n        leaf.unixfs = new UnixFS({\n          type: 'file',\n          mtime: file.mtime,\n          mode: file.mode,\n          data: buffer\n        });\n        buffer = encode(prepare({ Data: leaf.unixfs.marshal() }));\n        leaf.cid = await persist(buffer, blockstore, {\n          ...options,\n          codec: dagPb,\n          hasher: options.hasher,\n          cidVersion: options.cidVersion\n        });\n        leaf.size = buffer.length;\n      }\n      return {\n        cid: leaf.cid,\n        path: file.path,\n        unixfs: leaf.unixfs,\n        size: leaf.size\n      };\n    }\n    const f = new UnixFS({\n      type: 'file',\n      mtime: file.mtime,\n      mode: file.mode\n    });\n    const links = leaves.filter(leaf => {\n      if (leaf.cid.code === rawCodec.code && leaf.size) {\n        return true;\n      }\n      if (leaf.unixfs && !leaf.unixfs.data && leaf.unixfs.fileSize()) {\n        return true;\n      }\n      return Boolean(leaf.unixfs && leaf.unixfs.data && leaf.unixfs.data.length);\n    }).map(leaf => {\n      if (leaf.cid.code === rawCodec.code) {\n        f.addBlockSize(leaf.size);\n        return {\n          Name: '',\n          Tsize: leaf.size,\n          Hash: leaf.cid\n        };\n      }\n      if (!leaf.unixfs || !leaf.unixfs.data) {\n        f.addBlockSize(leaf.unixfs && leaf.unixfs.fileSize() || 0);\n      } else {\n        f.addBlockSize(leaf.unixfs.data.length);\n      }\n      return {\n        Name: '',\n        Tsize: leaf.size,\n        Hash: leaf.cid\n      };\n    });\n    const node = {\n      Data: f.marshal(),\n      Links: links\n    };\n    const buffer = encode(prepare(node));\n    const cid = await persist(buffer, blockstore, options);\n    return {\n      cid,\n      path: file.path,\n      unixfs: f,\n      size: buffer.length + node.Links.reduce((acc, curr) => acc + curr.Tsize, 0)\n    };\n  }\n  return reducer;\n};\nfunction fileBuilder(file, block, options) {\n  const dagBuilder = dagBuilders[options.strategy];\n  if (!dagBuilder) {\n    throw errCode(new Error(`Unknown importer build strategy name: ${ options.strategy }`), 'ERR_BAD_STRATEGY');\n  }\n  return dagBuilder(buildFileBatch(file, block, options), reduce(file, block, options), options);\n}\nexport default fileBuilder;"]},"metadata":{},"sourceType":"module"}