{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshay Mishra\\\\OneDrive\\\\Desktop\\\\twitter-clone-dapp\\\\client\\\\src\\\\TweetBox.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./TweetBox.css\";\nimport Avatar from 'avataaars';\nimport { generateRandomAvatarOptions } from './avatar';\nimport { Button } from \"@material-ui/core\";\nimport axios from 'axios';\nimport { TwitterContractAddress } from './config.js';\nimport { ethers } from 'ethers';\nimport Twitter from './utils/TwitterContract.json';\nimport { create } from \"ipfs-http-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = create('https://ipfs.infura.io:5001/api/v0');\n\nfunction TweetBox() {\n  _s();\n\n  const [tweetMessage, setTweetMessage] = useState(\"\");\n  const [tweetImage, setTweetImage] = useState(\"\");\n  const [avatarOptions, setAvatarOptions] = useState(\"\");\n  const [urlArr, setUrlArr] = useState([]);\n\n  const addTweet = async () => {\n    let tweet = {\n      'tweetText': tweetMessage,\n      'isDeleted': false\n    };\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let twitterTx = await TwitterContract.addTweet(tweet.tweetText, tweet.isDeleted);\n        console.log(twitterTx);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(\"Error submitting new Tweet\", error);\n    }\n  };\n\n  const sendTweet = e => {\n    e.preventDefault();\n    addTweet();\n    setTweetMessage(\"\");\n    setTweetImage(\"\");\n  }; // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(() => {\n    let avatar = generateRandomAvatarOptions();\n    setAvatarOptions(avatar);\n  }, []);\n  const [file, setFile] = useState(null);\n\n  const retrieveFile = e => {\n    const data = e.target.files[0];\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(data);\n\n    reader.onloadend = () => {\n      setFile(Buffer(reader.result));\n    };\n\n    e.preventDefault();\n  };\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      const created = await client.add(file);\n      const url = `https://ipfs.infura.io/ipfs/${created.path}`;\n      setUrlArr(prev => [...prev, url]);\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tweetBox\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tweetBox__input\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          style: {\n            width: '100px',\n            height: '100px'\n          },\n          avatarStyle: \"Circle\",\n          ...avatarOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setTweetMessage(e.target.value),\n          value: tweetMessage,\n          placeholder: \"What's happening?\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: tweetImage,\n        onChange: e => setTweetImage(e.target.value),\n        className: \"tweetBox__imageInput\",\n        placeholder: \"Optional: Enter image URL\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: sendTweet,\n        type: \"submit\",\n        className: \"tweetBox__tweetButton\",\n        children: \"Tweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"form\",\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        name: \"data\",\n        onChange: retrieveFile\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn\",\n        children: \"Upload file\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TweetBox, \"Cl8OIGvgkUewaJ+En8mRiF/Ay3A=\");\n\n_c = TweetBox;\nexport default TweetBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetBox\");","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/client/src/TweetBox.jsx"],"names":["React","useState","useEffect","Avatar","generateRandomAvatarOptions","Button","axios","TwitterContractAddress","ethers","Twitter","create","client","TweetBox","tweetMessage","setTweetMessage","tweetImage","setTweetImage","avatarOptions","setAvatarOptions","urlArr","setUrlArr","addTweet","tweet","ethereum","window","provider","providers","Web3Provider","signer","getSigner","TwitterContract","Contract","abi","twitterTx","tweetText","isDeleted","console","log","error","sendTweet","e","preventDefault","avatar","file","setFile","retrieveFile","data","target","files","reader","FileReader","readAsArrayBuffer","onloadend","Buffer","result","handleSubmit","created","add","url","path","prev","message","width","height","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAO,gBAAP;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,2BAAT,QAA4C,UAA5C;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,sBAAT,QAAuC,aAAvC;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,OAAP,MAAoB,8BAApB;AACA,SAASC,MAAT,QAAuB,kBAAvB;;AAEA,MAAMC,MAAM,GAAGD,MAAM,CAAC,oCAAD,CAArB;;AAEA,SAASE,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCb,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACc,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACgB,aAAD,EAAgBC,gBAAhB,IAAoCjB,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACkB,MAAD,EAASC,SAAT,IAAsBnB,QAAQ,CAAC,EAAD,CAApC;;AAEA,QAAMoB,QAAQ,GAAG,YAAY;AAC3B,QAAIC,KAAK,GAAG;AACV,mBAAaT,YADH;AAEV,mBAAa;AAFH,KAAZ;;AAKA,QAAI;AACF,YAAM;AAACU,QAAAA;AAAD,UAAaC,MAAnB;;AAEA,UAAGD,QAAH,EAAa;AACX,cAAME,QAAQ,GAAG,IAAIjB,MAAM,CAACkB,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;AACA,cAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,eAAe,GAAG,IAAItB,MAAM,CAACuB,QAAX,CACtBxB,sBADsB,EAEtBE,OAAO,CAACuB,GAFc,EAGtBJ,MAHsB,CAAxB;AAMA,YAAIK,SAAS,GAAG,MAAMH,eAAe,CAACT,QAAhB,CAAyBC,KAAK,CAACY,SAA/B,EAA0CZ,KAAK,CAACa,SAAhD,CAAtB;AAEAC,QAAAA,OAAO,CAACC,GAAR,CAAYJ,SAAZ;AACD,OAZD,MAYO;AACLG,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACF,KAlBD,CAkBE,OAAMC,KAAN,EAAa;AACbF,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CC,KAA1C;AACD;AACF,GA3BD;;AA6BA,QAAMC,SAAS,GAAIC,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAACC,cAAF;AAEApB,IAAAA,QAAQ;AAERP,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAPD,CAnCkB,CA4ClB;;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIwC,MAAM,GAAGtC,2BAA2B,EAAxC;AACAc,IAAAA,gBAAgB,CAACwB,MAAD,CAAhB;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkB3C,QAAQ,CAAC,IAAD,CAAhC;;AAEA,QAAM4C,YAAY,GAAIL,CAAD,IAAO;AAC1B,UAAMM,IAAI,GAAGN,CAAC,CAACO,MAAF,CAASC,KAAT,CAAe,CAAf,CAAb;AACA,UAAMC,MAAM,GAAG,IAAIzB,MAAM,CAAC0B,UAAX,EAAf;AACAD,IAAAA,MAAM,CAACE,iBAAP,CAAyBL,IAAzB;;AACAG,IAAAA,MAAM,CAACG,SAAP,GAAmB,MAAM;AACvBR,MAAAA,OAAO,CAACS,MAAM,CAACJ,MAAM,CAACK,MAAR,CAAP,CAAP;AACD,KAFD;;AAIAd,IAAAA,CAAC,CAACC,cAAF;AACD,GATD;;AAUA,QAAMc,YAAY,GAAG,MAAOf,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI;AACF,YAAMe,OAAO,GAAG,MAAM7C,MAAM,CAAC8C,GAAP,CAAWd,IAAX,CAAtB;AACA,YAAMe,GAAG,GAAI,+BAA8BF,OAAO,CAACG,IAAK,EAAxD;AACAvC,MAAAA,SAAS,CAACwC,IAAI,IAAI,CAAC,GAAGA,IAAJ,EAAUF,GAAV,CAAT,CAAT;AACD,KAJD,CAIE,OAAOpB,KAAP,EAAc;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAYC,KAAK,CAACuB,OAAlB;AACD;AACF,GATD;;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACE,QAAC,MAAD;AACE,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE,OAAT;AAAkBC,YAAAA,MAAM,EAAE;AAA1B,WADT;AAEE,UAAA,WAAW,EAAC,QAFd;AAAA,aAGM9C;AAHN;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AACE,UAAA,QAAQ,EAAGuB,CAAD,IAAO1B,eAAe,CAAC0B,CAAC,CAACO,MAAF,CAASiB,KAAV,CADlC;AAEE,UAAA,KAAK,EAAEnD,YAFT;AAGE,UAAA,WAAW,EAAC,mBAHd;AAIE,UAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAcE;AACE,QAAA,KAAK,EAAEE,UADT;AAEE,QAAA,QAAQ,EAAGyB,CAAD,IAAOxB,aAAa,CAACwB,CAAC,CAACO,MAAF,CAASiB,KAAV,CAFhC;AAGE,QAAA,SAAS,EAAC,sBAHZ;AAIE,QAAA,WAAW,EAAC,2BAJd;AAKE,QAAA,IAAI,EAAC;AALP;AAAA;AAAA;AAAA;AAAA,cAdF,eAsBE,QAAC,MAAD;AACE,QAAA,OAAO,EAAEzB,SADX;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,SAAS,EAAC,uBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eA+BE;AAAM,MAAA,SAAS,EAAC,MAAhB;AAAuB,MAAA,QAAQ,EAAEgB,YAAjC;AAAA,8BACE;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,IAAI,EAAC,MAAxB;AAA+B,QAAA,QAAQ,EAAEV;AAAzC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD;;GA/GQjC,Q;;KAAAA,Q;AAiHT,eAAeA,QAAf","sourcesContent":["import React, { useState , useEffect } from \"react\";\r\nimport \"./TweetBox.css\";\r\nimport Avatar from 'avataaars';\r\nimport { generateRandomAvatarOptions } from './avatar';\r\nimport { Button } from \"@material-ui/core\";\r\nimport axios from 'axios';\r\nimport { TwitterContractAddress } from './config.js';\r\nimport {ethers} from 'ethers';\r\nimport Twitter from './utils/TwitterContract.json'\r\nimport { create } from \"ipfs-http-client\";\r\n\r\nconst client = create('https://ipfs.infura.io:5001/api/v0');\r\n\r\nfunction TweetBox() {\r\n  const [tweetMessage, setTweetMessage] = useState(\"\");\r\n  const [tweetImage, setTweetImage] = useState(\"\");\r\n  const [avatarOptions, setAvatarOptions] = useState(\"\");\r\n  const [urlArr, setUrlArr] = useState([]);\r\n\r\n  const addTweet = async () => {\r\n    let tweet = {\r\n      'tweetText': tweetMessage,\r\n      'isDeleted': false\r\n    };\r\n\r\n    try {\r\n      const {ethereum} = window\r\n\r\n      if(ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const TwitterContract = new ethers.Contract(\r\n          TwitterContractAddress,\r\n          Twitter.abi,\r\n          signer\r\n        )\r\n\r\n        let twitterTx = await TwitterContract.addTweet(tweet.tweetText, tweet.isDeleted);\r\n\r\n        console.log(twitterTx);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch(error) {\r\n      console.log(\"Error submitting new Tweet\", error);\r\n    }\r\n  }\r\n\r\n  const sendTweet = (e) => {\r\n    e.preventDefault();\r\n\r\n    addTweet();\r\n\r\n    setTweetMessage(\"\");\r\n    setTweetImage(\"\");\r\n  };\r\n\r\n  // Similar to componentDidMount and componentDidUpdate:\r\n  useEffect(() => {\r\n    let avatar = generateRandomAvatarOptions();\r\n    setAvatarOptions(avatar);\r\n  }, []);\r\n  \r\n  const [file, setFile] = useState(null);\r\n\r\n  const retrieveFile = (e) => {\r\n    const data = e.target.files[0];\r\n    const reader = new window.FileReader();\r\n    reader.readAsArrayBuffer(data);\r\n    reader.onloadend = () => {\r\n      setFile(Buffer(reader.result));\r\n    }\r\n\r\n    e.preventDefault();  \r\n  }\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    try {\r\n      const created = await client.add(file);\r\n      const url = `https://ipfs.infura.io/ipfs/${created.path}`;\r\n      setUrlArr(prev => [...prev, url]);      \r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"tweetBox\">\r\n      <form>\r\n        <div className=\"tweetBox__input\">\r\n          <Avatar\r\n            style={{ width: '100px', height: '100px' }}\r\n            avatarStyle='Circle'\r\n            {...avatarOptions }\r\n          />\r\n          <input\r\n            onChange={(e) => setTweetMessage(e.target.value)}\r\n            value={tweetMessage}\r\n            placeholder=\"What's happening?\"\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <input\r\n          value={tweetImage}\r\n          onChange={(e) => setTweetImage(e.target.value)}\r\n          className=\"tweetBox__imageInput\"\r\n          placeholder=\"Optional: Enter image URL\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <Button\r\n          onClick={sendTweet}\r\n          type=\"submit\"\r\n          className=\"tweetBox__tweetButton\"\r\n        >\r\n          Tweet\r\n        </Button>\r\n      </form>\r\n      <form className=\"form\" onSubmit={handleSubmit}>\r\n        <input type=\"file\" name=\"data\" onChange={retrieveFile} />\r\n        <button type=\"submit\" className=\"btn\">Upload file</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetBox;\r\n"]},"metadata":{},"sourceType":"module"}