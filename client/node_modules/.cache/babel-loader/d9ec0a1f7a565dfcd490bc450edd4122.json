{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshay Mishra\\\\OneDrive\\\\Desktop\\\\twitter-clone-dapp\\\\client\\\\src\\\\TweetBox.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./TweetBox.css\";\nimport Avatar from 'avataaars';\nimport { generateRandomAvatarOptions } from './avatar';\nimport { Button } from \"@material-ui/core\";\nimport axios from 'axios';\nimport { TwitterContractAddress } from './config.js';\nimport { ethers } from 'ethers';\nimport Twitter from './utils/TwitterContract.json';\nimport process from 'process';\nimport minimist from 'minimist';\nimport { Web3Storage, getFilesFromPath } from 'web3.storage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nasync function TweetBox() {\n  _s();\n\n  const [tweetMessage, setTweetMessage] = useState(\"\");\n  const [tweetImage, setTweetImage] = useState(\"\");\n  const [avatarOptions, setAvatarOptions] = useState(\"\"); ////////////////////////////////////\n\n  const args = minimist(process.argv.slice(2));\n  const token = args.token;\n\n  if (!token) {\n    return console.error('A token is needed. You can create one on https://web3.storage');\n  }\n\n  if (args._.length < 1) {\n    return console.error('Please supply the path to a file or directory');\n  }\n\n  const storage = new Web3Storage({\n    token\n  });\n  const files = [];\n\n  for (const path of args._) {\n    const pathFiles = await getFilesFromPath(path);\n    files.push(...pathFiles);\n  }\n\n  console.log(`Uploading ${files.length} files`);\n  const cid = await storage.put(files);\n  console.log('Content added with CID:', cid); //////////////////////////////////////\n\n  const addTweet = async () => {\n    let tweet = {\n      'tweetText': tweetMessage,\n      'isDeleted': false\n    };\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let twitterTx = await TwitterContract.addTweet(tweet.tweetText, tweet.isDeleted);\n        console.log(twitterTx);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(\"Error submitting new Tweet\", error);\n    }\n  };\n\n  const sendTweet = e => {\n    e.preventDefault();\n    addTweet();\n    setTweetMessage(\"\");\n    setTweetImage(\"\");\n  }; // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(() => {\n    let avatar = generateRandomAvatarOptions();\n    setAvatarOptions(avatar);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tweetBox\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tweetBox__input\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          style: {\n            width: '100px',\n            height: '100px'\n          },\n          avatarStyle: \"Circle\",\n          ...avatarOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setTweetMessage(e.target.value),\n          value: tweetMessage,\n          placeholder: \"What's happening?\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: tweetImage,\n        onChange: e => setTweetImage(e.target.value),\n        className: \"tweetBox__imageInput\",\n        placeholder: \"Optional: Enter image URL\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: sendTweet,\n        type: \"submit\",\n        className: \"tweetBox__tweetButton\",\n        children: \"Tweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TweetBox, \"k4asxlUUnJh8SGMYRTVRKXmi8s4=\");\n\n_c = TweetBox;\nexport default TweetBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetBox\");","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/client/src/TweetBox.jsx"],"names":["React","useState","useEffect","Avatar","generateRandomAvatarOptions","Button","axios","TwitterContractAddress","ethers","Twitter","process","minimist","Web3Storage","getFilesFromPath","TweetBox","tweetMessage","setTweetMessage","tweetImage","setTweetImage","avatarOptions","setAvatarOptions","args","argv","slice","token","console","error","_","length","storage","files","path","pathFiles","push","log","cid","put","addTweet","tweet","ethereum","window","provider","providers","Web3Provider","signer","getSigner","TwitterContract","Contract","abi","twitterTx","tweetText","isDeleted","sendTweet","e","preventDefault","avatar","width","height","target","value"],"mappings":"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","sourcesContent":["import React, { useState , useEffect } from \"react\";\r\nimport \"./TweetBox.css\";\r\nimport Avatar from 'avataaars';\r\nimport { generateRandomAvatarOptions } from './avatar';\r\nimport { Button } from \"@material-ui/core\";\r\nimport axios from 'axios';\r\nimport { TwitterContractAddress } from './config.js';\r\nimport {ethers} from 'ethers';\r\nimport Twitter from './utils/TwitterContract.json'\r\n\r\nimport process from 'process'\r\nimport minimist from 'minimist'\r\nimport { Web3Storage, getFilesFromPath } from 'web3.storage'\r\n\r\nasync function TweetBox() {\r\n  const [tweetMessage, setTweetMessage] = useState(\"\");\r\n  const [tweetImage, setTweetImage] = useState(\"\");\r\n  const [avatarOptions, setAvatarOptions] = useState(\"\");\r\n\r\n////////////////////////////////////\r\n  const args = minimist(process.argv.slice(2))\r\n  const token = args.token\r\n\r\n  if (!token) {\r\n    return console.error('A token is needed. You can create one on https://web3.storage')\r\n  }\r\n\r\n  if (args._.length < 1) {\r\n    return console.error('Please supply the path to a file or directory')\r\n  }\r\n\r\n  const storage = new Web3Storage({ token })\r\n  const files = []\r\n\r\n  for (const path of args._) {\r\n    const pathFiles = await getFilesFromPath(path)\r\n    files.push(...pathFiles)\r\n  }\r\n\r\n  console.log(`Uploading ${files.length} files`)\r\n  const cid = await storage.put(files)\r\n  console.log('Content added with CID:', cid)\r\n//////////////////////////////////////\r\n\r\n  const addTweet = async () => {\r\n    let tweet = {\r\n      'tweetText': tweetMessage,\r\n      'isDeleted': false\r\n    };\r\n\r\n    try {\r\n      const {ethereum} = window\r\n\r\n      if(ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const TwitterContract = new ethers.Contract(\r\n          TwitterContractAddress,\r\n          Twitter.abi,\r\n          signer\r\n        )\r\n\r\n        let twitterTx = await TwitterContract.addTweet(tweet.tweetText, tweet.isDeleted);\r\n\r\n        console.log(twitterTx);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch(error) {\r\n      console.log(\"Error submitting new Tweet\", error);\r\n    }\r\n  }\r\n\r\n  const sendTweet = (e) => {\r\n    e.preventDefault();\r\n\r\n    addTweet();\r\n\r\n    setTweetMessage(\"\");\r\n    setTweetImage(\"\");\r\n  };\r\n\r\n  // Similar to componentDidMount and componentDidUpdate:\r\n  useEffect(() => {\r\n    let avatar = generateRandomAvatarOptions();\r\n    setAvatarOptions(avatar);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tweetBox\">\r\n      <form>\r\n        <div className=\"tweetBox__input\">\r\n          <Avatar\r\n            style={{ width: '100px', height: '100px' }}\r\n            avatarStyle='Circle'\r\n            {...avatarOptions }\r\n          />\r\n          <input\r\n            onChange={(e) => setTweetMessage(e.target.value)}\r\n            value={tweetMessage}\r\n            placeholder=\"What's happening?\"\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <input\r\n          value={tweetImage}\r\n          onChange={(e) => setTweetImage(e.target.value)}\r\n          className=\"tweetBox__imageInput\"\r\n          placeholder=\"Optional: Enter image URL\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <Button\r\n          onClick={sendTweet}\r\n          type=\"submit\"\r\n          className=\"tweetBox__tweetButton\"\r\n        >\r\n          Tweet\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetBox;\r\n"]},"metadata":{},"sourceType":"module"}