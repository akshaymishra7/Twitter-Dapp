{"ast":null,"code":"/* eslint-disable jsdoc/check-indentation */\n\n/** Auto-generated with ipld-schema-validator@0.0.0-dev at Thu Jun 17 2021 from IPLD Schema:\n *\n * type CarHeader struct {\n *   version Int\n *   roots optional [&Any]\n *   # roots is _not_ optional for CarV1 but we defer that check within code to\n *   # gracefully handle the >V1 case where it's just {version:X}\n * }\n *\n */\nconst Kinds = {\n  Null:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => obj === null,\n  Int:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => Number.isInteger(obj),\n  Float:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => typeof obj === 'number' && Number.isFinite(obj),\n  String:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => typeof obj === 'string',\n  Bool:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => typeof obj === 'boolean',\n  Bytes:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => obj instanceof Uint8Array,\n  Link:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => !Kinds.Null(obj) && typeof obj === 'object' && obj.asCID === obj,\n  List:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => Array.isArray(obj),\n  Map:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => !Kinds.Null(obj) && typeof obj === 'object' && obj.asCID !== obj && !Kinds.List(obj) && !Kinds.Bytes(obj)\n};\n/** @type {{ [k in string]: (obj:any)=>boolean}} */\n\nconst Types = {\n  Int: Kinds.Int,\n  'CarHeader > version':\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => Types.Int(obj),\n  'CarHeader > roots (anon) > valueType (anon)': Kinds.Link,\n  'CarHeader > roots (anon)':\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => Kinds.List(obj) && Array.prototype.every.call(obj, Types['CarHeader > roots (anon) > valueType (anon)']),\n  'CarHeader > roots':\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => Types['CarHeader > roots (anon)'](obj),\n  CarHeader:\n  /**\n   * @param {any} obj\n   * @returns {boolean}\n   */\n  (\n  /** @type {any} */\n  obj) => {\n    const keys = obj && Object.keys(obj);\n    return Kinds.Map(obj) && ['version'].every(k => keys.includes(k)) && Object.entries(obj).every(_ref => {\n      let [name, value] = _ref;\n      return Types['CarHeader > ' + name] && Types['CarHeader > ' + name](value);\n    });\n  }\n};\nexport const CarHeader = Types.CarHeader;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/@ipld/car/src/header-validator.js"],"names":["Kinds","Null","obj","Int","Number","isInteger","Float","isFinite","String","Bool","Bytes","Uint8Array","Link","asCID","List","Array","isArray","Map","Types","prototype","every","call","CarHeader","keys","Object","k","includes","entries","name","value"],"mappings":"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","sourcesContent":["/* eslint-disable jsdoc/check-indentation */\n\n/** Auto-generated with ipld-schema-validator@0.0.0-dev at Thu Jun 17 2021 from IPLD Schema:\n *\n * type CarHeader struct {\n *   version Int\n *   roots optional [&Any]\n *   # roots is _not_ optional for CarV1 but we defer that check within code to\n *   # gracefully handle the >V1 case where it's just {version:X}\n * }\n *\n */\n\nconst Kinds = {\n  Null: /**\n         * @param {any} obj\n         * @returns {boolean}\n         */ (/** @type {any} */ obj) => obj === null,\n  Int: /**\n        * @param {any} obj\n        * @returns {boolean}\n        */ (/** @type {any} */ obj) => Number.isInteger(obj),\n  Float: /**\n          * @param {any} obj\n          * @returns {boolean}\n          */ (/** @type {any} */ obj) => typeof obj === 'number' && Number.isFinite(obj),\n  String: /**\n           * @param {any} obj\n           * @returns {boolean}\n           */ (/** @type {any} */ obj) => typeof obj === 'string',\n  Bool: /**\n         * @param {any} obj\n         * @returns {boolean}\n         */ (/** @type {any} */ obj) => typeof obj === 'boolean',\n  Bytes: /**\n          * @param {any} obj\n          * @returns {boolean}\n          */ (/** @type {any} */ obj) => obj instanceof Uint8Array,\n  Link: /**\n         * @param {any} obj\n         * @returns {boolean}\n         */ (/** @type {any} */ obj) => !Kinds.Null(obj) && typeof obj === 'object' && obj.asCID === obj,\n  List: /**\n         * @param {any} obj\n         * @returns {boolean}\n         */ (/** @type {any} */ obj) => Array.isArray(obj),\n  Map: /**\n        * @param {any} obj\n        * @returns {boolean}\n        */ (/** @type {any} */ obj) => !Kinds.Null(obj) && typeof obj === 'object' && obj.asCID !== obj && !Kinds.List(obj) && !Kinds.Bytes(obj)\n}\n/** @type {{ [k in string]: (obj:any)=>boolean}} */\nconst Types = {\n  Int: Kinds.Int,\n  'CarHeader > version': /**\n                          * @param {any} obj\n                          * @returns {boolean}\n                          */ (/** @type {any} */ obj) => Types.Int(obj),\n  'CarHeader > roots (anon) > valueType (anon)': Kinds.Link,\n  'CarHeader > roots (anon)': /**\n                               * @param {any} obj\n                               * @returns {boolean}\n                               */ (/** @type {any} */ obj) => Kinds.List(obj) && Array.prototype.every.call(obj, Types['CarHeader > roots (anon) > valueType (anon)']),\n  'CarHeader > roots': /**\n                        * @param {any} obj\n                        * @returns {boolean}\n                        */ (/** @type {any} */ obj) => Types['CarHeader > roots (anon)'](obj),\n  CarHeader: /**\n              * @param {any} obj\n              * @returns {boolean}\n              */ (/** @type {any} */ obj) => { const keys = obj && Object.keys(obj); return Kinds.Map(obj) && ['version'].every((k) => keys.includes(k)) && Object.entries(obj).every(([name, value]) => Types['CarHeader > ' + name] && Types['CarHeader > ' + name](value)) }\n}\n\nexport const CarHeader = Types.CarHeader\n"]},"metadata":{},"sourceType":"module"}