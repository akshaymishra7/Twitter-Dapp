{"ast":null,"code":"import defaultConfig from 'ipfs-core-config/config';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { multiaddr } from '@multiformats/multiaddr';\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\nexport function createReset(_ref) {\n  let {\n    repo\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"reset\"]}\n   */\n  async function reset() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const config = await repo.config.getAll(options);\n    config.Bootstrap = defaultConfig().Bootstrap;\n    await repo.config.replace(config);\n    return {\n      Peers: defaultConfig().Bootstrap.map(ma => multiaddr(ma))\n    };\n  }\n\n  return withTimeoutOption(reset);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/bootstrap/reset.js"],"names":["defaultConfig","withTimeoutOption","multiaddr","createReset","repo","reset","options","config","getAll","Bootstrap","replace","Peers","map","ma"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,yBAA1B;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,OAAgC;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;;AACrC;AACF;AACA;AACE,iBAAeC,KAAf,GAAoC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAClC,UAAMC,MAAM,GAAG,MAAMH,IAAI,CAACG,MAAL,CAAYC,MAAZ,CAAmBF,OAAnB,CAArB;AACAC,IAAAA,MAAM,CAACE,SAAP,GAAmBT,aAAa,GAAGS,SAAnC;AAEA,UAAML,IAAI,CAACG,MAAL,CAAYG,OAAZ,CAAoBH,MAApB,CAAN;AAEA,WAAO;AACLI,MAAAA,KAAK,EAAEX,aAAa,GAAGS,SAAhB,CAA0BG,GAA1B,CAA8BC,EAAE,IAAIX,SAAS,CAACW,EAAD,CAA7C;AADF,KAAP;AAGD;;AAED,SAAOZ,iBAAiB,CAACI,KAAD,CAAxB;AACD","sourcesContent":["import defaultConfig from 'ipfs-core-config/config'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { multiaddr } from '@multiformats/multiaddr'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createReset ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"reset\"]}\n   */\n  async function reset (options = {}) {\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = defaultConfig().Bootstrap\n\n    await repo.config.replace(config)\n\n    return {\n      Peers: defaultConfig().Bootstrap.map(ma => multiaddr(ma))\n    }\n  }\n\n  return withTimeoutOption(reset)\n}\n"]},"metadata":{},"sourceType":"module"}