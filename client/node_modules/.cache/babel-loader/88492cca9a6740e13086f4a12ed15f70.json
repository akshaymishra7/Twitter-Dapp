{"ast":null,"code":"import { fetch as nativeFetch, Headers } from 'native-fetch';\n/**\n * Build fetch resource for request\n */\n\nexport function buildResource(serverResolver, hostname, recordType) {\n  return `${serverResolver}?name=${hostname}&type=${recordType}`;\n}\n/**\n * Use fetch to find the record\n */\n\nexport async function request(resource, signal) {\n  const req = await nativeFetch(resource, {\n    headers: new Headers({\n      accept: 'application/dns-json'\n    }),\n    signal\n  });\n  const res = await req.json();\n  return res;\n}\n/**\n * Creates cache key composed by recordType and hostname\n *\n * @param {string} hostname\n * @param {string} recordType\n */\n\nexport function getCacheKey(hostname, recordType) {\n  return `${recordType}_${hostname}`;\n}","map":{"version":3,"mappings":"AAAA,SAASA,KAAK,IAAIC,WAAlB,EAA+BC,OAA/B,QAA8C,cAA9C;AAEA;;;;AAGA,OAAM,SAAUC,aAAV,CAAyBC,cAAzB,EAAiDC,QAAjD,EAAmEC,UAAnE,EAAqF;AACzF,SAAO,GAAGF,cAAc,SAASC,QAAQ,SAASC,UAAU,EAA5D;AACD;AAmBD;;;;AAGA,OAAO,eAAeC,OAAf,CAAwBC,QAAxB,EAA0CC,MAA1C,EAA6D;AAClE,QAAMC,GAAG,GAAG,MAAMT,WAAW,CAACO,QAAD,EAAW;AACtCG,WAAO,EAAE,IAAIT,OAAJ,CAAY;AACnBU,YAAM,EAAE;AADW,KAAZ,CAD6B;AAItCH;AAJsC,GAAX,CAA7B;AAMA,QAAMI,GAAG,GAAG,MAAMH,GAAG,CAACI,IAAJ,EAAlB;AAEA,SAAOD,GAAP;AACD;AAED;;;;;;;AAMA,OAAM,SAAUE,WAAV,CAAuBV,QAAvB,EAAyCC,UAAzC,EAA2D;AAC/D,SAAO,GAAGA,UAAU,IAAID,QAAQ,EAAhC;AACD","names":["fetch","nativeFetch","Headers","buildResource","serverResolver","hostname","recordType","request","resource","signal","req","headers","accept","res","json","getCacheKey"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\dns-over-http-resolver\\src\\utils.ts"],"sourcesContent":["import { fetch as nativeFetch, Headers } from 'native-fetch'\n\n/**\n * Build fetch resource for request\n */\nexport function buildResource (serverResolver: string, hostname: string, recordType: string) {\n  return `${serverResolver}?name=${hostname}&type=${recordType}`\n}\n\nexport interface DNSJSON {\n  Question: Question[]\n  Answer: Answer[]\n}\n\ninterface Question {\n  name: string\n  type: number\n}\n\ninterface Answer {\n  name: string\n  type: number\n  data: string\n  TTL: number\n}\n\n/**\n * Use fetch to find the record\n */\nexport async function request (resource: string, signal: AbortSignal) {\n  const req = await nativeFetch(resource, {\n    headers: new Headers({\n      accept: 'application/dns-json'\n    }),\n    signal\n  })\n  const res = await req.json()\n\n  return res as DNSJSON\n}\n\n/**\n * Creates cache key composed by recordType and hostname\n *\n * @param {string} hostname\n * @param {string} recordType\n */\nexport function getCacheKey (hostname: string, recordType: string) {\n  return `${recordType}_${hostname}`\n}\n"]},"metadata":{},"sourceType":"module"}