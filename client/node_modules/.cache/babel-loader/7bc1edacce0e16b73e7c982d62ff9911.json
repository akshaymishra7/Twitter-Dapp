{"ast":null,"code":"import { CodeError } from '@libp2p/interfaces/errors';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\n/**\n * @typedef {import('interface-datastore').Key} Key\n */\n\nconst namespace = '/record/';\n/**\n * @param {Uint8Array} buf\n */\n\nexport function encodeBase32(buf) {\n  return uint8ArrayToString(buf, 'base32');\n}\n/**\n * converts a binary record key to a pubsub topic key\n *\n * @param {Uint8Array | string} key\n */\n\nexport function keyToTopic(key) {\n  // Record-store keys are arbitrary binary. However, pubsub requires UTF-8 string topic IDs\n  // Encodes to \"/record/base64url(key)\"\n  if (typeof key === 'string' || key instanceof String) {\n    key = uint8ArrayFromString(key.toString());\n  }\n\n  const b64url = uint8ArrayToString(key, 'base64url');\n  return `${namespace}${b64url}`;\n}\n/**\n * converts a pubsub topic key to a binary record key\n *\n * @param {string} topic\n */\n\nexport function topicToKey(topic) {\n  if (topic.substring(0, namespace.length) !== namespace) {\n    throw new CodeError('topic received is not from a record', 'ERR_TOPIC_IS_NOT_FROM_RECORD_NAMESPACE');\n  }\n\n  const key = topic.substring(namespace.length);\n  return uint8ArrayFromString(key, 'base64url');\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/datastore-pubsub/src/utils.js"],"names":["CodeError","toString","uint8ArrayToString","fromString","uint8ArrayFromString","namespace","encodeBase32","buf","keyToTopic","key","String","b64url","topicToKey","topic","substring","length"],"mappings":"AAAA,SAASA,SAAT,QAA0B,2BAA1B;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AAEA;AACA;AACA;;AAEA,MAAMC,SAAS,GAAG,UAAlB;AAEA;AACA;AACA;;AACA,OAAO,SAASC,YAAT,CAAuBC,GAAvB,EAA4B;AACjC,SAAOL,kBAAkB,CAACK,GAAD,EAAM,QAAN,CAAzB;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAqBC,GAArB,EAA0B;AAC/B;AACA;AACA,MAAI,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,YAAYC,MAA9C,EAAsD;AACpDD,IAAAA,GAAG,GAAGL,oBAAoB,CAACK,GAAG,CAACR,QAAJ,EAAD,CAA1B;AACD;;AAED,QAAMU,MAAM,GAAGT,kBAAkB,CAACO,GAAD,EAAM,WAAN,CAAjC;AAEA,SAAQ,GAAEJ,SAAU,GAAEM,MAAO,EAA7B;AACD;AAED;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAqBC,KAArB,EAA4B;AACjC,MAAIA,KAAK,CAACC,SAAN,CAAgB,CAAhB,EAAmBT,SAAS,CAACU,MAA7B,MAAyCV,SAA7C,EAAwD;AACtD,UAAM,IAAIL,SAAJ,CAAc,qCAAd,EAAqD,wCAArD,CAAN;AACD;;AAED,QAAMS,GAAG,GAAGI,KAAK,CAACC,SAAN,CAAgBT,SAAS,CAACU,MAA1B,CAAZ;AAEA,SAAOX,oBAAoB,CAACK,GAAD,EAAM,WAAN,CAA3B;AACD","sourcesContent":["import { CodeError } from '@libp2p/interfaces/errors'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\n/**\n * @typedef {import('interface-datastore').Key} Key\n */\n\nconst namespace = '/record/'\n\n/**\n * @param {Uint8Array} buf\n */\nexport function encodeBase32 (buf) {\n  return uint8ArrayToString(buf, 'base32')\n}\n\n/**\n * converts a binary record key to a pubsub topic key\n *\n * @param {Uint8Array | string} key\n */\nexport function keyToTopic (key) {\n  // Record-store keys are arbitrary binary. However, pubsub requires UTF-8 string topic IDs\n  // Encodes to \"/record/base64url(key)\"\n  if (typeof key === 'string' || key instanceof String) {\n    key = uint8ArrayFromString(key.toString())\n  }\n\n  const b64url = uint8ArrayToString(key, 'base64url')\n\n  return `${namespace}${b64url}`\n}\n\n/**\n * converts a pubsub topic key to a binary record key\n *\n * @param {string} topic\n */\nexport function topicToKey (topic) {\n  if (topic.substring(0, namespace.length) !== namespace) {\n    throw new CodeError('topic received is not from a record', 'ERR_TOPIC_IS_NOT_FROM_RECORD_NAMESPACE')\n  }\n\n  const key = topic.substring(namespace.length)\n\n  return uint8ArrayFromString(key, 'base64url')\n}\n"]},"metadata":{},"sourceType":"module"}