{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { Key } from 'interface-datastore/key';\nimport debug from 'debug';\nimport length from 'it-length';\nimport { base32 } from 'multiformats/bases/base32';\nimport * as raw from 'multiformats/codecs/raw';\nimport * as mhd from 'multiformats/hashes/digest';\nconst log = debug('ipfs:repo:migrator:migration-8');\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {*} blockstore\n * @returns {Datastore}\n */\n\nfunction unwrap(blockstore) {\n  if (blockstore.child) {\n    return unwrap(blockstore.child);\n  }\n\n  return blockstore;\n}\n/**\n * @param {Key} key\n */\n\n\nfunction keyToMultihash(key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`); // Extract multihash from CID\n\n    const multihash = CID.decode(buf).multihash.bytes; // Encode and slice off multibase codec\n    // Should be uppercase for interop with go\n\n    const multihashStr = base32.encode(multihash).slice(1).toUpperCase();\n    return new Key(`/${multihashStr}`, false);\n  } catch (\n  /** @type {any} */\n  err) {\n    return key;\n  }\n}\n/**\n * @param {Key} key\n */\n\n\nfunction keyToCid(key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`);\n    const digest = mhd.decode(buf); // CID to Key\n\n    const multihash = base32.encode(CID.createV1(raw.code, digest).bytes).slice(1);\n    return new Key(`/${multihash.toUpperCase()}`, false);\n  } catch {\n    return key;\n  }\n}\n/**\n * @param {import('../../types').Backends} backends\n * @param {(percent: number, message: string) => void} onProgress\n * @param {(key: Key) => Key} keyFunction\n */\n\n\nasync function process(backends, onProgress, keyFunction) {\n  const blockstore = backends.blocks;\n  await blockstore.open();\n  const unwrapped = unwrap(blockstore);\n  const blockCount = await length(unwrapped.queryKeys({\n    filters: [key => {\n      const newKey = keyFunction(key);\n      return newKey.toString() !== key.toString();\n    }]\n  }));\n\n  try {\n    let counter = 0;\n\n    for await (const block of unwrapped.query({})) {\n      const newKey = keyFunction(block.key); // If the Key is base32 CIDv0 then there's nothing to do\n\n      if (newKey.toString() !== block.key.toString()) {\n        counter += 1;\n        log(`Migrating Block from ${block.key} to ${newKey}`, await unwrapped.has(block.key));\n        await unwrapped.delete(block.key);\n        await unwrapped.put(newKey, block.value);\n        onProgress(counter / blockCount * 100, `Migrated Block from ${block.key} to ${newKey}`);\n      }\n    }\n  } finally {\n    await blockstore.close();\n  }\n}\n/** @type {Migration} */\n\n\nexport const migration = {\n  version: 8,\n  description: 'Transforms key names into base32 encoding and converts Block store to use bare multihashes encoded as base32',\n  migrate: function (backends) {\n    let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    return process(backends, onProgress, keyToMultihash);\n  },\n  revert: function (backends) {\n    let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n    return process(backends, onProgress, keyToCid);\n  }\n};","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-repo-migrations/src/migrations/migration-8/index.js"],"names":["CID","Key","debug","length","base32","raw","mhd","log","unwrap","blockstore","child","keyToMultihash","key","buf","decode","toString","toLowerCase","slice","multihash","bytes","multihashStr","encode","toUpperCase","err","keyToCid","digest","createV1","code","process","backends","onProgress","keyFunction","blocks","open","unwrapped","blockCount","queryKeys","filters","newKey","counter","block","query","has","delete","put","value","close","migration","version","description","migrate","revert"],"mappings":"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","sourcesContent":["\nimport { CID } from 'multiformats/cid'\nimport { Key } from 'interface-datastore/key'\nimport debug from 'debug'\nimport length from 'it-length'\nimport { base32 } from 'multiformats/bases/base32'\nimport * as raw from 'multiformats/codecs/raw'\nimport * as mhd from 'multiformats/hashes/digest'\n\nconst log = debug('ipfs:repo:migrator:migration-8')\n\n/**\n * @typedef {import('../../types').Migration} Migration\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\n/**\n * @param {*} blockstore\n * @returns {Datastore}\n */\nfunction unwrap (blockstore) {\n  if (blockstore.child) {\n    return unwrap(blockstore.child)\n  }\n\n  return blockstore\n}\n\n/**\n * @param {Key} key\n */\nfunction keyToMultihash (key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`)\n\n    // Extract multihash from CID\n    const multihash = CID.decode(buf).multihash.bytes\n\n    // Encode and slice off multibase codec\n    // Should be uppercase for interop with go\n    const multihashStr = base32.encode(multihash).slice(1).toUpperCase()\n\n    return new Key(`/${multihashStr}`, false)\n  } catch (/** @type {any} */ err) {\n    return key\n  }\n}\n\n/**\n * @param {Key} key\n */\nfunction keyToCid (key) {\n  try {\n    const buf = base32.decode(`b${key.toString().toLowerCase().slice(1)}`)\n    const digest = mhd.decode(buf)\n\n    // CID to Key\n    const multihash = base32.encode(CID.createV1(raw.code, digest).bytes).slice(1)\n\n    return new Key(`/${multihash.toUpperCase()}`, false)\n  } catch {\n    return key\n  }\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {(percent: number, message: string) => void} onProgress\n * @param {(key: Key) => Key} keyFunction\n */\nasync function process (backends, onProgress, keyFunction) {\n  const blockstore = backends.blocks\n  await blockstore.open()\n\n  const unwrapped = unwrap(blockstore)\n\n  const blockCount = await length(unwrapped.queryKeys({\n    filters: [(key) => {\n      const newKey = keyFunction(key)\n\n      return newKey.toString() !== key.toString()\n    }]\n  }))\n\n  try {\n    let counter = 0\n\n    for await (const block of unwrapped.query({})) {\n      const newKey = keyFunction(block.key)\n\n      // If the Key is base32 CIDv0 then there's nothing to do\n      if (newKey.toString() !== block.key.toString()) {\n        counter += 1\n        log(`Migrating Block from ${block.key} to ${newKey}`, await unwrapped.has(block.key))\n\n        await unwrapped.delete(block.key)\n        await unwrapped.put(newKey, block.value)\n\n        onProgress((counter / blockCount) * 100, `Migrated Block from ${block.key} to ${newKey}`)\n      }\n    }\n  } finally {\n    await blockstore.close()\n  }\n}\n\n/** @type {Migration} */\nexport const migration = {\n  version: 8,\n  description: 'Transforms key names into base32 encoding and converts Block store to use bare multihashes encoded as base32',\n  migrate: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keyToMultihash)\n  },\n  revert: (backends, onProgress = () => {}) => {\n    return process(backends, onProgress, keyToCid)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}