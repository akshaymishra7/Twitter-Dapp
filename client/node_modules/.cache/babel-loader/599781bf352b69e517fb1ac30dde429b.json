{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { codes } from '../errors.js';\nimport { setDelayedInterval, clearDelayedInterval // @ts-expect-error set-delayed-interval does not export types\n} from 'set-delayed-interval';\nimport { AutoRelay } from './auto-relay.js';\nimport { namespaceToCid } from './utils.js';\nimport { RELAY_RENDEZVOUS_NS } from './constants.js';\nconst log = logger('libp2p:relay');\nexport class Relay {\n  /**\n   * Creates an instance of Relay\n   */\n  constructor(components, init) {\n    this.components = components; // Create autoRelay if enabled\n\n    this.autoRelay = init.autoRelay?.enabled !== false ? new AutoRelay(components, {\n      addressSorter: init.addressSorter,\n      ...init.autoRelay\n    }) : undefined;\n    this.started = false;\n    this.init = init;\n    this._advertiseService = this._advertiseService.bind(this);\n  }\n\n  isStarted() {\n    return this.started;\n  }\n  /**\n   * Start Relay service\n   */\n\n\n  async start() {\n    // Advertise service if HOP enabled\n    if (this.init.hop.enabled !== false && this.init.advertise.enabled !== false) {\n      this.timeout = setDelayedInterval(this._advertiseService, this.init.advertise.ttl, this.init.advertise.bootDelay);\n    }\n\n    this.started = true;\n  }\n  /**\n   * Stop Relay service\n   */\n\n\n  async stop() {\n    if (this.timeout != null) {\n      clearDelayedInterval(this.timeout);\n    }\n\n    this.started = false;\n  }\n  /**\n   * Advertise hop relay service in the network.\n   */\n\n\n  async _advertiseService() {\n    try {\n      const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS);\n      await this.components.contentRouting.provide(cid);\n    } catch (err) {\n      if (err.code === codes.ERR_NO_ROUTERS_AVAILABLE) {\n        log.error('a content router, such as a DHT, must be provided in order to advertise the relay service', err); // Stop the advertise\n\n        await this.stop();\n      } else {\n        log.error(err);\n      }\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,KAAT,QAAsB,cAAtB;AACA,SACEC,kBADF,EAEEC,oBAFF,CAGA;AAHA,OAIO,sBAJP;AAKA,SAASC,SAAT,QAA0B,iBAA1B;AACA,SAASC,cAAT,QAA+B,YAA/B;AACA,SACEC,mBADF,QAEO,gBAFP;AAwBA,MAAMC,GAAG,GAAGP,MAAM,CAAC,cAAD,CAAlB;AA6BA,OAAM,MAAOQ,KAAP,CAAY;AAQhB;;;AAGAC,cAAaC,UAAb,EAA0CC,IAA1C,EAAyD;AACvD,SAAKD,UAAL,GAAkBA,UAAlB,CADuD,CAEvD;;AACA,SAAKE,SAAL,GAAiBD,IAAI,CAACC,SAAL,EAAgBC,OAAhB,KAA4B,KAA5B,GACb,IAAIT,SAAJ,CAAcM,UAAd,EAA0B;AAC1BI,mBAAa,EAAEH,IAAI,CAACG,aADM;AAE1B,SAAGH,IAAI,CAACC;AAFkB,KAA1B,CADa,GAKbG,SALJ;AAOA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKL,IAAL,GAAYA,IAAZ;AACA,SAAKM,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzB;AACD;;AAEDC,WAAS;AACP,WAAO,KAAKH,OAAZ;AACD;AAED;;;;;AAGW,QAALI,KAAK;AACT;AACA,QAAI,KAAKT,IAAL,CAAUU,GAAV,CAAcR,OAAd,KAA0B,KAA1B,IAAmC,KAAKF,IAAL,CAAUW,SAAV,CAAoBT,OAApB,KAAgC,KAAvE,EAA8E;AAC5E,WAAKU,OAAL,GAAerB,kBAAkB,CAC/B,KAAKe,iBAD0B,EACP,KAAKN,IAAL,CAAUW,SAAV,CAAoBE,GADb,EACkB,KAAKb,IAAL,CAAUW,SAAV,CAAoBG,SADtC,CAAjC;AAGD;;AAED,SAAKT,OAAL,GAAe,IAAf;AACD;AAED;;;;;AAGU,QAAJU,IAAI;AACR,QAAI,KAAKH,OAAL,IAAgB,IAApB,EAA0B;AACxBpB,0BAAoB,CAAC,KAAKoB,OAAN,CAApB;AACD;;AAED,SAAKP,OAAL,GAAe,KAAf;AACD;AAED;;;;;AAGuB,QAAjBC,iBAAiB;AACrB,QAAI;AACF,YAAMU,GAAG,GAAG,MAAMtB,cAAc,CAACC,mBAAD,CAAhC;AACA,YAAM,KAAKI,UAAL,CAAgBkB,cAAhB,CAA+BC,OAA/B,CAAuCF,GAAvC,CAAN;AACD,KAHD,CAGE,OAAOG,GAAP,EAAiB;AACjB,UAAIA,GAAG,CAACC,IAAJ,KAAa9B,KAAK,CAAC+B,wBAAvB,EAAiD;AAC/CzB,WAAG,CAAC0B,KAAJ,CAAU,2FAAV,EAAuGH,GAAvG,EAD+C,CAE/C;;AACA,cAAM,KAAKJ,IAAL,EAAN;AACD,OAJD,MAIO;AACLnB,WAAG,CAAC0B,KAAJ,CAAUH,GAAV;AACD;AACF;AACF;;AAvEe","names":["logger","codes","setDelayedInterval","clearDelayedInterval","AutoRelay","namespaceToCid","RELAY_RENDEZVOUS_NS","log","Relay","constructor","components","init","autoRelay","enabled","addressSorter","undefined","started","_advertiseService","bind","isStarted","start","hop","advertise","timeout","ttl","bootDelay","stop","cid","contentRouting","provide","err","code","ERR_NO_ROUTERS_AVAILABLE","error"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\src\\circuit\\index.ts"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport { codes } from '../errors.js'\nimport {\n  setDelayedInterval,\n  clearDelayedInterval\n// @ts-expect-error set-delayed-interval does not export types\n} from 'set-delayed-interval'\nimport { AutoRelay } from './auto-relay.js'\nimport { namespaceToCid } from './utils.js'\nimport {\n  RELAY_RENDEZVOUS_NS\n} from './constants.js'\nimport type { AddressSorter, PeerStore } from '@libp2p/interface-peer-store'\nimport type { Startable } from '@libp2p/interfaces/startable'\nimport type { ContentRouting } from '@libp2p/interface-content-routing'\nimport type { ConnectionManager } from '@libp2p/interface-connection-manager'\nimport type { TransportManager } from '@libp2p/interface-transport'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { StreamHandlerOptions } from '@libp2p/interface-registrar'\n\nexport interface RelayConfig extends StreamHandlerOptions {\n  enabled: boolean\n  advertise: RelayAdvertiseConfig\n  hop: HopConfig\n  autoRelay: AutoRelayConfig\n}\n\nexport interface HopConfig {\n  enabled?: boolean\n  active?: boolean\n  timeout: number\n}\n\nconst log = logger('libp2p:relay')\n\nexport interface RelayAdvertiseConfig {\n  bootDelay?: number\n  enabled?: boolean\n  ttl?: number\n}\n\nexport interface AutoRelayConfig {\n  enabled?: boolean\n\n  /**\n   * maximum number of relays to listen\n   */\n  maxListeners: number\n}\n\nexport interface RelayInit extends RelayConfig {\n  addressSorter?: AddressSorter\n}\n\nexport interface RelayComponents {\n  peerId: PeerId\n  contentRouting: ContentRouting\n  peerStore: PeerStore\n  connectionManager: ConnectionManager\n  transportManager: TransportManager\n}\n\nexport class Relay implements Startable {\n  private readonly components: RelayComponents\n  private readonly init: RelayInit\n  // @ts-expect-error this field isn't used anywhere?\n  private readonly autoRelay?: AutoRelay\n  private timeout?: any\n  private started: boolean\n\n  /**\n   * Creates an instance of Relay\n   */\n  constructor (components: RelayComponents, init: RelayInit) {\n    this.components = components\n    // Create autoRelay if enabled\n    this.autoRelay = init.autoRelay?.enabled !== false\n      ? new AutoRelay(components, {\n        addressSorter: init.addressSorter,\n        ...init.autoRelay\n      })\n      : undefined\n\n    this.started = false\n    this.init = init\n    this._advertiseService = this._advertiseService.bind(this)\n  }\n\n  isStarted () {\n    return this.started\n  }\n\n  /**\n   * Start Relay service\n   */\n  async start () {\n    // Advertise service if HOP enabled\n    if (this.init.hop.enabled !== false && this.init.advertise.enabled !== false) {\n      this.timeout = setDelayedInterval(\n        this._advertiseService, this.init.advertise.ttl, this.init.advertise.bootDelay\n      )\n    }\n\n    this.started = true\n  }\n\n  /**\n   * Stop Relay service\n   */\n  async stop () {\n    if (this.timeout != null) {\n      clearDelayedInterval(this.timeout)\n    }\n\n    this.started = false\n  }\n\n  /**\n   * Advertise hop relay service in the network.\n   */\n  async _advertiseService () {\n    try {\n      const cid = await namespaceToCid(RELAY_RENDEZVOUS_NS)\n      await this.components.contentRouting.provide(cid)\n    } catch (err: any) {\n      if (err.code === codes.ERR_NO_ROUTERS_AVAILABLE) {\n        log.error('a content router, such as a DHT, must be provided in order to advertise the relay service', err)\n        // Stop the advertise\n        await this.stop()\n      } else {\n        log.error(err)\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}