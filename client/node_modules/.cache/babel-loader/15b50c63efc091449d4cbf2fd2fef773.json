{"ast":null,"code":"import { Service } from '../utils/service.js';\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../types').Options} config.options\n */\n\nexport function createStart(_ref) {\n  let {\n    network,\n    preload,\n    peerId,\n    keychain,\n    repo,\n    ipns,\n    mfsPreload,\n    print,\n    hashers,\n    options\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"start\"]}\n   */\n  const start = async () => {\n    const {\n      libp2p\n    } = await Service.start(network, {\n      peerId,\n      repo,\n      print,\n      hashers,\n      options\n    });\n    await Promise.all([ipns.startOnline({\n      keychain,\n      libp2p,\n      peerId,\n      repo\n    }), preload.start(), mfsPreload.start()]);\n  };\n\n  return start;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/start.js"],"names":["Service","createStart","network","preload","peerId","keychain","repo","ipns","mfsPreload","print","hashers","options","start","libp2p","Promise","all","startOnline"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,OAA+G;AAAA,MAAzF;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA,MAApB;AAA4BC,IAAAA,QAA5B;AAAsCC,IAAAA,IAAtC;AAA4CC,IAAAA,IAA5C;AAAkDC,IAAAA,UAAlD;AAA8DC,IAAAA,KAA9D;AAAqEC,IAAAA,OAArE;AAA8EC,IAAAA;AAA9E,GAAyF;;AACpH;AACF;AACA;AACE,QAAMC,KAAK,GAAG,YAAY;AACxB,UAAM;AAAEC,MAAAA;AAAF,QAAa,MAAMb,OAAO,CAACY,KAAR,CAAcV,OAAd,EAAuB;AAC9CE,MAAAA,MAD8C;AAE9CE,MAAAA,IAF8C;AAG9CG,MAAAA,KAH8C;AAI9CC,MAAAA,OAJ8C;AAK9CC,MAAAA;AAL8C,KAAvB,CAAzB;AAQA,UAAMG,OAAO,CAACC,GAAR,CAAY,CAChBR,IAAI,CAACS,WAAL,CAAiB;AAAEX,MAAAA,QAAF;AAAYQ,MAAAA,MAAZ;AAAoBT,MAAAA,MAApB;AAA4BE,MAAAA;AAA5B,KAAjB,CADgB,EAEhBH,OAAO,CAACS,KAAR,EAFgB,EAGhBJ,UAAU,CAACI,KAAX,EAHgB,CAAZ,CAAN;AAKD,GAdD;;AAgBA,SAAOA,KAAP;AACD","sourcesContent":["import { Service } from '../utils/service.js'\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').Print} config.print\n * @param {import('../types').Preload} config.preload\n * @param {import('../types').MfsPreload} config.mfsPreload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../types').Options} config.options\n */\nexport function createStart ({ network, preload, peerId, keychain, repo, ipns, mfsPreload, print, hashers, options }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"start\"]}\n   */\n  const start = async () => {\n    const { libp2p } = await Service.start(network, {\n      peerId,\n      repo,\n      print,\n      hashers,\n      options\n    })\n\n    await Promise.all([\n      ipns.startOnline({ keychain, libp2p, peerId, repo }),\n      preload.start(),\n      mfsPreload.start()\n    ])\n  }\n\n  return start\n}\n"]},"metadata":{},"sourceType":"module"}