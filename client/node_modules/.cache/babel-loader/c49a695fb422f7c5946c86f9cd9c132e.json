{"ast":null,"code":"import * as dagPB from '@ipld/dag-pb';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { createGet } from './get.js';\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\nexport function createStat(_ref) {\n  let {\n    repo,\n    preload\n  } = _ref;\n  const get = createGet({\n    repo,\n    preload\n  });\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"stat\"]}\n   */\n\n  async function stat(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const node = await get(cid, options);\n    const serialized = dagPB.encode(node);\n    const blockSize = serialized.length;\n    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0);\n    return {\n      Hash: cid,\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - (node.Data || []).length,\n      DataSize: (node.Data || []).length,\n      CumulativeSize: blockSize + linkLength\n    };\n  }\n\n  return withTimeoutOption(stat);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/object/stat.js"],"names":["dagPB","withTimeoutOption","createGet","createStat","repo","preload","get","stat","cid","options","node","serialized","encode","blockSize","length","linkLength","Links","reduce","a","l","Tsize","Hash","NumLinks","BlockSize","LinksSize","Data","DataSize","CumulativeSize"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,cAAvB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,SAAT,QAA0B,UAA1B;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,OAAwC;AAAA,MAAnB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAmB;AAC7C,QAAMC,GAAG,GAAGJ,SAAS,CAAC;AAAEE,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,CAArB;AAEA;AACF;AACA;;AACE,iBAAeE,IAAf,CAAqBC,GAArB,EAAwC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACtC,UAAMC,IAAI,GAAG,MAAMJ,GAAG,CAACE,GAAD,EAAMC,OAAN,CAAtB;AACA,UAAME,UAAU,GAAGX,KAAK,CAACY,MAAN,CAAaF,IAAb,CAAnB;AACA,UAAMG,SAAS,GAAGF,UAAU,CAACG,MAA7B;AACA,UAAMC,UAAU,GAAGL,IAAI,CAACM,KAAL,CAAWC,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,IAAIC,CAAC,CAACC,KAAF,IAAW,CAAf,CAA7B,EAAgD,CAAhD,CAAnB;AAEA,WAAO;AACLC,MAAAA,IAAI,EAAEb,GADD;AAELc,MAAAA,QAAQ,EAAEZ,IAAI,CAACM,KAAL,CAAWF,MAFhB;AAGLS,MAAAA,SAAS,EAAEV,SAHN;AAILW,MAAAA,SAAS,EAAEX,SAAS,GAAG,CAACH,IAAI,CAACe,IAAL,IAAa,EAAd,EAAkBX,MAJpC;AAKLY,MAAAA,QAAQ,EAAE,CAAChB,IAAI,CAACe,IAAL,IAAa,EAAd,EAAkBX,MALvB;AAMLa,MAAAA,cAAc,EAAEd,SAAS,GAAGE;AANvB,KAAP;AAQD;;AAED,SAAOd,iBAAiB,CAACM,IAAD,CAAxB;AACD","sourcesContent":["import * as dagPB from '@ipld/dag-pb'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { createGet } from './get.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createStat ({ repo, preload }) {\n  const get = createGet({ repo, preload })\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    const node = await get(cid, options)\n    const serialized = dagPB.encode(node)\n    const blockSize = serialized.length\n    const linkLength = node.Links.reduce((a, l) => a + (l.Tsize || 0), 0)\n\n    return {\n      Hash: cid,\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - (node.Data || []).length,\n      DataSize: (node.Data || []).length,\n      CumulativeSize: blockSize + linkLength\n    }\n  }\n\n  return withTimeoutOption(stat)\n}\n"]},"metadata":{},"sourceType":"module"}