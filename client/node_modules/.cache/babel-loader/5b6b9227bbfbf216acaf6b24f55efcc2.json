{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { codes } from './errors.js';\nimport { peerIdFromPeerId } from '@libp2p/peer-id';\nimport { equals as uint8arrayEquals } from 'uint8arrays/equals';\nimport { CustomEvent } from '@libp2p/interfaces/events';\nconst log = logger('libp2p:peer-store:key-book');\nconst EVENT_NAME = 'change:pubkey';\nexport class PeerStoreKeyBook {\n  /**\n   * The KeyBook is responsible for keeping the known public keys of a peer\n   */\n  constructor(dispatchEvent, store) {\n    this.dispatchEvent = dispatchEvent;\n    this.store = store;\n  }\n  /**\n   * Set the Peer public key\n   */\n\n\n  async set(peerId, publicKey) {\n    peerId = peerIdFromPeerId(peerId);\n\n    if (!(publicKey instanceof Uint8Array)) {\n      log.error('publicKey must be an instance of Uint8Array to store data');\n      throw new CodeError('publicKey must be an instance of PublicKey', codes.ERR_INVALID_PARAMETERS);\n    }\n\n    log.trace('set await write lock');\n    const release = await this.store.lock.writeLock();\n    log.trace('set got write lock');\n    let updatedKey = false;\n    let peer;\n\n    try {\n      try {\n        peer = await this.store.load(peerId);\n\n        if (peer.pubKey != null && uint8arrayEquals(peer.pubKey, publicKey)) {\n          return;\n        }\n      } catch (err) {\n        if (err.code !== codes.ERR_NOT_FOUND) {\n          throw err;\n        }\n      }\n\n      await this.store.patchOrCreate(peerId, {\n        pubKey: publicKey\n      });\n      updatedKey = true;\n    } finally {\n      log.trace('set release write lock');\n      release();\n    }\n\n    if (updatedKey) {\n      this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n        detail: {\n          peerId,\n          publicKey,\n          oldPublicKey: peer == null ? undefined : peer.pubKey\n        }\n      }));\n    }\n  }\n  /**\n   * Get Public key of the given PeerId, if stored\n   */\n\n\n  async get(peerId) {\n    peerId = peerIdFromPeerId(peerId);\n    log.trace('get await write lock');\n    const release = await this.store.lock.readLock();\n    log.trace('get got write lock');\n\n    try {\n      const peer = await this.store.load(peerId);\n      return peer.pubKey;\n    } catch (err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err;\n      }\n    } finally {\n      log('get release write lock');\n      release();\n    }\n  }\n\n  async delete(peerId) {\n    peerId = peerIdFromPeerId(peerId);\n    log.trace('delete await write lock');\n    const release = await this.store.lock.writeLock();\n    log.trace('delete got write lock');\n    let peer;\n\n    try {\n      try {\n        peer = await this.store.load(peerId);\n      } catch (err) {\n        if (err.code !== codes.ERR_NOT_FOUND) {\n          throw err;\n        }\n      }\n\n      await this.store.patchOrCreate(peerId, {\n        pubKey: undefined\n      });\n    } catch (err) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err;\n      }\n    } finally {\n      log.trace('delete release write lock');\n      release();\n    }\n\n    this.dispatchEvent(new CustomEvent(EVENT_NAME, {\n      detail: {\n        peerId,\n        publicKey: undefined,\n        oldPublicKey: peer == null ? undefined : peer.pubKey\n      }\n    }));\n  }\n\n}","map":{"version":3,"mappings":"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","names":["logger","CodeError","codes","peerIdFromPeerId","equals","uint8arrayEquals","CustomEvent","log","EVENT_NAME","PeerStoreKeyBook","constructor","dispatchEvent","store","set","peerId","publicKey","Uint8Array","error","ERR_INVALID_PARAMETERS","trace","release","lock","writeLock","updatedKey","peer","load","pubKey","err","code","ERR_NOT_FOUND","patchOrCreate","detail","oldPublicKey","undefined","get","readLock","delete"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\peer-store\\src\\key-book.ts"],"sourcesContent":["import { logger } from '@libp2p/logger'\nimport { CodeError } from '@libp2p/interfaces/errors'\nimport { codes } from './errors.js'\nimport { peerIdFromPeerId } from '@libp2p/peer-id'\nimport { equals as uint8arrayEquals } from 'uint8arrays/equals'\nimport { CustomEvent } from '@libp2p/interfaces/events'\nimport type { Store } from './store.js'\nimport type { PeerStore, KeyBook, PeerPublicKeyChangeData, Peer } from '@libp2p/interface-peer-store'\nimport type { PeerId } from '@libp2p/interface-peer-id'\n\nconst log = logger('libp2p:peer-store:key-book')\n\nconst EVENT_NAME = 'change:pubkey'\n\nexport class PeerStoreKeyBook implements KeyBook {\n  private readonly dispatchEvent: PeerStore['dispatchEvent']\n  private readonly store: Store\n\n  /**\n   * The KeyBook is responsible for keeping the known public keys of a peer\n   */\n  constructor (dispatchEvent: PeerStore['dispatchEvent'], store: Store) {\n    this.dispatchEvent = dispatchEvent\n    this.store = store\n  }\n\n  /**\n   * Set the Peer public key\n   */\n  async set (peerId: PeerId, publicKey: Uint8Array): Promise<void> {\n    peerId = peerIdFromPeerId(peerId)\n\n    if (!(publicKey instanceof Uint8Array)) {\n      log.error('publicKey must be an instance of Uint8Array to store data')\n      throw new CodeError('publicKey must be an instance of PublicKey', codes.ERR_INVALID_PARAMETERS)\n    }\n\n    log.trace('set await write lock')\n    const release = await this.store.lock.writeLock()\n    log.trace('set got write lock')\n\n    let updatedKey = false\n    let peer: Peer | undefined\n\n    try {\n      try {\n        peer = await this.store.load(peerId)\n\n        if ((peer.pubKey != null) && uint8arrayEquals(peer.pubKey, publicKey)) {\n          return\n        }\n      } catch (err: any) {\n        if (err.code !== codes.ERR_NOT_FOUND) {\n          throw err\n        }\n      }\n\n      await this.store.patchOrCreate(peerId, {\n        pubKey: publicKey\n      })\n      updatedKey = true\n    } finally {\n      log.trace('set release write lock')\n      release()\n    }\n\n    if (updatedKey) {\n      this.dispatchEvent(new CustomEvent<PeerPublicKeyChangeData>(EVENT_NAME, {\n        detail: {\n          peerId,\n          publicKey,\n          oldPublicKey: peer == null ? undefined : peer.pubKey\n        }\n      }))\n    }\n  }\n\n  /**\n   * Get Public key of the given PeerId, if stored\n   */\n  async get (peerId: PeerId): Promise<Uint8Array | undefined> {\n    peerId = peerIdFromPeerId(peerId)\n\n    log.trace('get await write lock')\n    const release = await this.store.lock.readLock()\n    log.trace('get got write lock')\n\n    try {\n      const peer = await this.store.load(peerId)\n\n      return peer.pubKey\n    } catch (err: any) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err\n      }\n    } finally {\n      log('get release write lock')\n      release()\n    }\n  }\n\n  async delete (peerId: PeerId): Promise<void> {\n    peerId = peerIdFromPeerId(peerId)\n\n    log.trace('delete await write lock')\n    const release = await this.store.lock.writeLock()\n    log.trace('delete got write lock')\n\n    let peer: Peer | undefined\n\n    try {\n      try {\n        peer = await this.store.load(peerId)\n      } catch (err: any) {\n        if (err.code !== codes.ERR_NOT_FOUND) {\n          throw err\n        }\n      }\n\n      await this.store.patchOrCreate(peerId, {\n        pubKey: undefined\n      })\n    } catch (err: any) {\n      if (err.code !== codes.ERR_NOT_FOUND) {\n        throw err\n      }\n    } finally {\n      log.trace('delete release write lock')\n      release()\n    }\n\n    this.dispatchEvent(new CustomEvent<PeerPublicKeyChangeData>(EVENT_NAME, {\n      detail: {\n        peerId,\n        publicKey: undefined,\n        oldPublicKey: peer == null ? undefined : peer.pubKey\n      }\n    }))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}