{"ast":null,"code":"import { EventEmitter } from '@libp2p/interfaces/events';\nimport errCode from 'err-code';\nimport { messages, codes } from '../errors.js';\nexport class DummyPubSub extends EventEmitter {\n  constructor() {\n    super(...arguments);\n    this.topicValidators = new Map();\n  }\n\n  isStarted() {\n    return false;\n  }\n\n  start() {}\n\n  stop() {}\n\n  get globalSignaturePolicy() {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n  }\n\n  get multicodecs() {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n  }\n\n  getPeers() {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n  }\n\n  getTopics() {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n  }\n\n  subscribe() {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n  }\n\n  unsubscribe() {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n  }\n\n  getSubscribers() {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n  }\n\n  async publish() {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED);\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAA6B,2BAA7B;AAGA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,QAAT,EAAmBC,KAAnB,QAAgC,cAAhC;AAEA,OAAM,MAAOC,WAAP,SAA2BJ,YAA3B,CAAqD;AAA3DK;;AACS,2BAAkB,IAAIC,GAAJ,EAAlB;AA6CR;;AA3CCC,WAAS;AACP,WAAO,KAAP;AACD;;AAEDC,OAAK,IAEJ;;AAEDC,MAAI,IAEH;;AAEwB,MAArBC,qBAAqB;AACvB,UAAMT,OAAO,CAAC,IAAIU,KAAJ,CAAUT,QAAQ,CAACU,eAAnB,CAAD,EAAsCT,KAAK,CAACU,mBAA5C,CAAb;AACD;;AAEc,MAAXC,WAAW;AACb,UAAMb,OAAO,CAAC,IAAIU,KAAJ,CAAUT,QAAQ,CAACU,eAAnB,CAAD,EAAsCT,KAAK,CAACU,mBAA5C,CAAb;AACD;;AAEDE,UAAQ;AACN,UAAMd,OAAO,CAAC,IAAIU,KAAJ,CAAUT,QAAQ,CAACU,eAAnB,CAAD,EAAsCT,KAAK,CAACU,mBAA5C,CAAb;AACD;;AAEDG,WAAS;AACP,UAAMf,OAAO,CAAC,IAAIU,KAAJ,CAAUT,QAAQ,CAACU,eAAnB,CAAD,EAAsCT,KAAK,CAACU,mBAA5C,CAAb;AACD;;AAEDI,WAAS;AACP,UAAMhB,OAAO,CAAC,IAAIU,KAAJ,CAAUT,QAAQ,CAACU,eAAnB,CAAD,EAAsCT,KAAK,CAACU,mBAA5C,CAAb;AACD;;AAEDK,aAAW;AACT,UAAMjB,OAAO,CAAC,IAAIU,KAAJ,CAAUT,QAAQ,CAACU,eAAnB,CAAD,EAAsCT,KAAK,CAACU,mBAA5C,CAAb;AACD;;AAEDM,gBAAc;AACZ,UAAMlB,OAAO,CAAC,IAAIU,KAAJ,CAAUT,QAAQ,CAACU,eAAnB,CAAD,EAAsCT,KAAK,CAACU,mBAA5C,CAAb;AACD;;AAEY,QAAPO,OAAO;AACX,UAAMnB,OAAO,CAAC,IAAIU,KAAJ,CAAUT,QAAQ,CAACU,eAAnB,CAAD,EAAsCT,KAAK,CAACU,mBAA5C,CAAb;AACD;;AA7CwD","names":["EventEmitter","errCode","messages","codes","DummyPubSub","constructor","Map","isStarted","start","stop","globalSignaturePolicy","Error","PUBSUB_DISABLED","ERR_PUBSUB_DISABLED","multicodecs","getPeers","getTopics","subscribe","unsubscribe","getSubscribers","publish"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\src\\pubsub\\dummy-pubsub.ts"],"sourcesContent":["import { EventEmitter } from '@libp2p/interfaces/events'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { PublishResult, PubSub, PubSubEvents, StrictNoSign, StrictSign, TopicValidatorFn } from '@libp2p/interface-pubsub'\nimport errCode from 'err-code'\nimport { messages, codes } from '../errors.js'\n\nexport class DummyPubSub extends EventEmitter<PubSubEvents> implements PubSub {\n  public topicValidators = new Map<string, TopicValidatorFn>()\n\n  isStarted (): boolean {\n    return false\n  }\n\n  start (): void | Promise<void> {\n\n  }\n\n  stop (): void | Promise<void> {\n\n  }\n\n  get globalSignaturePolicy (): typeof StrictSign | typeof StrictNoSign {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED)\n  }\n\n  get multicodecs (): string[] {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED)\n  }\n\n  getPeers (): PeerId[] {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED)\n  }\n\n  getTopics (): string[] {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED)\n  }\n\n  subscribe (): void {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED)\n  }\n\n  unsubscribe (): void {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED)\n  }\n\n  getSubscribers (): PeerId[] {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED)\n  }\n\n  async publish (): Promise<PublishResult> {\n    throw errCode(new Error(messages.PUBSUB_DISABLED), codes.ERR_PUBSUB_DISABLED)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}