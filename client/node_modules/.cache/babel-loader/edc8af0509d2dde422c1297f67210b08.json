{"ast":null,"code":"/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events';\nimport { logger } from '@libp2p/logger';\nconst log = logger('libp2p:connection-manager:latency-monitor:visibility-change-emitter');\n/**\n * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.\n *\n * Warning: This does not work on all browsers, but should work on all modern browsers\n *\n * @example\n *\n *     const myVisibilityEmitter = new VisibilityChangeEmitter();\n *\n *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {\n *        if ( pageInFocus ){\n *            // Page is in focus\n *            console.log('In focus');\n *        }\n *        else {\n *            // Page is blurred\n *            console.log('Out of focus');\n *        }\n *     });\n *     // To access the visibility state directly, call:\n *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());\n */\n\nexport class VisibilityChangeEmitter extends EventEmitter {\n  constructor() {\n    super();\n    this.hidden = 'hidden';\n    this.visibilityChange = 'visibilityChange';\n\n    if (globalThis.document != null) {\n      this._initializeVisibilityVarNames();\n\n      this._addVisibilityChangeListener();\n    }\n  }\n  /**\n   * document.hidden and document.visibilityChange are the two variables we need to check for;\n   * Since these variables are named differently in different browsers, this function sets\n   * the appropriate name based on the browser being used. Once executed, tha actual names of\n   * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange\n   * respectively\n   *\n   * @private\n   */\n\n\n  _initializeVisibilityVarNames() {\n    let hidden = 'hidden';\n    let visibilityChange = 'visibilitychange';\n\n    if (typeof globalThis.document.hidden !== 'undefined') {\n      // Opera 12.10 and Firefox 18 and later support\n      hidden = 'hidden';\n      visibilityChange = 'visibilitychange'; // @ts-expect-error mozHidden is a non-standard field name\n    } else if (typeof globalThis.document.mozHidden !== 'undefined') {\n      hidden = 'mozHidden';\n      visibilityChange = 'mozvisibilitychange'; // @ts-expect-error msHidden is a non-standard field name\n    } else if (typeof globalThis.document.msHidden !== 'undefined') {\n      hidden = 'msHidden';\n      visibilityChange = 'msvisibilitychange'; // @ts-expect-error webkitHidden is a non-standard field name\n    } else if (typeof globalThis.document.webkitHidden !== 'undefined') {\n      hidden = 'webkitHidden';\n      visibilityChange = 'webkitvisibilitychange';\n    }\n\n    this.hidden = hidden;\n    this.visibilityChange = visibilityChange;\n  }\n  /**\n   * Adds an event listener on the document that listens to changes in document.visibilityChange\n   * (or whatever name by which the visibilityChange variable is known in the browser)\n   *\n   * @private\n   */\n\n\n  _addVisibilityChangeListener() {\n    // @ts-expect-error cannot index document object with string key\n    if (typeof globalThis.document.addEventListener === 'undefined' || typeof document[this.hidden] === 'undefined') {\n      log('Checking page visibility requires a browser that supports the Page Visibility API.');\n    } else {\n      // Handle page visibility change\n      globalThis.document.addEventListener(this.visibilityChange, this._handleVisibilityChange.bind(this), false);\n    }\n  }\n  /**\n   * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and\n   * ```undefined``` if the page visibility API is not supported by the browser.\n   */\n\n\n  isVisible() {\n    // @ts-expect-error cannot index document object with string key\n    if (this.hidden === undefined || document[this.hidden] === undefined) {\n      return undefined;\n    } // @ts-expect-error cannot index document object with string key\n\n\n    return document[this.hidden] == null;\n  }\n  /**\n   * The function that is called when document.visibilityChange has changed\n   * It emits an event called visibilityChange and sends the value of document.hidden as a\n   * parameter\n   *\n   * @private\n   */\n\n\n  _handleVisibilityChange() {\n    // @ts-expect-error cannot index document object with string key\n    const visible = globalThis.document[this.hidden] === false;\n    log(visible ? 'Page Visible' : 'Page Hidden'); // Emit the event\n\n    this.dispatchEvent(new CustomEvent('visibilityChange', {\n      detail: visible\n    }));\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;AAIA,SAASA,WAAT,EAAsBC,YAAtB,QAA0C,2BAA1C;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,MAAMC,GAAG,GAAGD,MAAM,CAAC,qEAAD,CAAlB;AAQA;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAM,MAAOE,uBAAP,SAAuCH,YAAvC,CAAkF;AAItFI;AACE;AAEA,SAAKC,MAAL,GAAc,QAAd;AACA,SAAKC,gBAAL,GAAwB,kBAAxB;;AAEA,QAAIC,UAAU,CAACC,QAAX,IAAuB,IAA3B,EAAiC;AAC/B,WAAKC,6BAAL;;AACA,WAAKC,4BAAL;AACD;AACF;AAED;;;;;;;;;;;AASAD,+BAA6B;AAC3B,QAAIJ,MAAM,GAAW,QAArB;AACA,QAAIC,gBAAgB,GAAG,kBAAvB;;AAEA,QAAI,OAAOC,UAAU,CAACC,QAAX,CAAoBH,MAA3B,KAAsC,WAA1C,EAAuD;AAAE;AACvDA,YAAM,GAAG,QAAT;AACAC,sBAAgB,GAAG,kBAAnB,CAFqD,CAGrD;AACD,KAJD,MAIO,IAAI,OAAOC,UAAU,CAACC,QAAX,CAAoBG,SAA3B,KAAyC,WAA7C,EAA0D;AAC/DN,YAAM,GAAG,WAAT;AACAC,sBAAgB,GAAG,qBAAnB,CAF+D,CAG/D;AACD,KAJM,MAIA,IAAI,OAAOC,UAAU,CAACC,QAAX,CAAoBI,QAA3B,KAAwC,WAA5C,EAAyD;AAC9DP,YAAM,GAAG,UAAT;AACAC,sBAAgB,GAAG,oBAAnB,CAF8D,CAG9D;AACD,KAJM,MAIA,IAAI,OAAOC,UAAU,CAACC,QAAX,CAAoBK,YAA3B,KAA4C,WAAhD,EAA6D;AAClER,YAAM,GAAG,cAAT;AACAC,sBAAgB,GAAG,wBAAnB;AACD;;AAED,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,gBAAL,GAAwBA,gBAAxB;AACD;AAED;;;;;;;;AAMAI,8BAA4B;AAC1B;AACA,QAAI,OAAOH,UAAU,CAACC,QAAX,CAAoBM,gBAA3B,KAAgD,WAAhD,IAA+D,OAAON,QAAQ,CAAC,KAAKH,MAAN,CAAf,KAAiC,WAApG,EAAiH;AAC/GH,SAAG,CAAC,oFAAD,CAAH;AACD,KAFD,MAEO;AACL;AACAK,gBAAU,CAACC,QAAX,CAAoBM,gBAApB,CAAqC,KAAKR,gBAA1C,EAA4D,KAAKS,uBAAL,CAA6BC,IAA7B,CAAkC,IAAlC,CAA5D,EAAqG,KAArG;AACD;AACF;AAED;;;;;;AAIAC,WAAS;AACP;AACA,QAAI,KAAKZ,MAAL,KAAgBa,SAAhB,IAA6BV,QAAQ,CAAC,KAAKH,MAAN,CAAR,KAA0Ba,SAA3D,EAAsE;AACpE,aAAOA,SAAP;AACD,KAJM,CAMP;;;AACA,WAAOV,QAAQ,CAAC,KAAKH,MAAN,CAAR,IAAyB,IAAhC;AACD;AAED;;;;;;;;;AAOAU,yBAAuB;AACrB;AACA,UAAMI,OAAO,GAAGZ,UAAU,CAACC,QAAX,CAAoB,KAAKH,MAAzB,MAAqC,KAArD;AACAH,OAAG,CAACiB,OAAO,GAAG,cAAH,GAAoB,aAA5B,CAAH,CAHqB,CAKrB;;AACA,SAAKC,aAAL,CAAmB,IAAIrB,WAAJ,CAAyB,kBAAzB,EAA6C;AAC9DsB,YAAM,EAAEF;AADsD,KAA7C,CAAnB;AAGD;;AAhGqF","names":["CustomEvent","EventEmitter","logger","log","VisibilityChangeEmitter","constructor","hidden","visibilityChange","globalThis","document","_initializeVisibilityVarNames","_addVisibilityChangeListener","mozHidden","msHidden","webkitHidden","addEventListener","_handleVisibilityChange","bind","isVisible","undefined","visible","dispatchEvent","detail"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\src\\connection-manager\\visibility-change-emitter.ts"],"sourcesContent":["/**\n * This code is based on `latency-monitor` (https://github.com/mlucool/latency-monitor) by `mlucool` (https://github.com/mlucool), available under Apache License 2.0 (https://github.com/mlucool/latency-monitor/blob/master/LICENSE)\n */\n\nimport { CustomEvent, EventEmitter } from '@libp2p/interfaces/events'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('libp2p:connection-manager:latency-monitor:visibility-change-emitter')\n\ninterface VisibilityChangeEmitterEvents {\n  'visibilityChange': CustomEvent<boolean>\n}\n\ntype Hidden = 'hidden' | 'mozHidden' | 'msHidden' | 'webkitHidden'\n\n/**\n * Listen to page visibility change events (i.e. when the page is focused / blurred) by an event emitter.\n *\n * Warning: This does not work on all browsers, but should work on all modern browsers\n *\n * @example\n *\n *     const myVisibilityEmitter = new VisibilityChangeEmitter();\n *\n *     myVisibilityEmitter.on('visibilityChange', (pageInFocus) => {\n *        if ( pageInFocus ){\n *            // Page is in focus\n *            console.log('In focus');\n *        }\n *        else {\n *            // Page is blurred\n *            console.log('Out of focus');\n *        }\n *     });\n *     // To access the visibility state directly, call:\n *     console.log('Am I focused now? ' + myVisibilityEmitter.isVisible());\n */\nexport class VisibilityChangeEmitter extends EventEmitter<VisibilityChangeEmitterEvents> {\n  private hidden: Hidden\n  private visibilityChange: string\n\n  constructor () {\n    super()\n\n    this.hidden = 'hidden'\n    this.visibilityChange = 'visibilityChange'\n\n    if (globalThis.document != null) {\n      this._initializeVisibilityVarNames()\n      this._addVisibilityChangeListener()\n    }\n  }\n\n  /**\n   * document.hidden and document.visibilityChange are the two variables we need to check for;\n   * Since these variables are named differently in different browsers, this function sets\n   * the appropriate name based on the browser being used. Once executed, tha actual names of\n   * document.hidden and document.visibilityChange are found in this._hidden and this._visibilityChange\n   * respectively\n   *\n   * @private\n   */\n  _initializeVisibilityVarNames () {\n    let hidden: Hidden = 'hidden'\n    let visibilityChange = 'visibilitychange'\n\n    if (typeof globalThis.document.hidden !== 'undefined') { // Opera 12.10 and Firefox 18 and later support\n      hidden = 'hidden'\n      visibilityChange = 'visibilitychange'\n      // @ts-expect-error mozHidden is a non-standard field name\n    } else if (typeof globalThis.document.mozHidden !== 'undefined') {\n      hidden = 'mozHidden'\n      visibilityChange = 'mozvisibilitychange'\n      // @ts-expect-error msHidden is a non-standard field name\n    } else if (typeof globalThis.document.msHidden !== 'undefined') {\n      hidden = 'msHidden'\n      visibilityChange = 'msvisibilitychange'\n      // @ts-expect-error webkitHidden is a non-standard field name\n    } else if (typeof globalThis.document.webkitHidden !== 'undefined') {\n      hidden = 'webkitHidden'\n      visibilityChange = 'webkitvisibilitychange'\n    }\n\n    this.hidden = hidden\n    this.visibilityChange = visibilityChange\n  }\n\n  /**\n   * Adds an event listener on the document that listens to changes in document.visibilityChange\n   * (or whatever name by which the visibilityChange variable is known in the browser)\n   *\n   * @private\n   */\n  _addVisibilityChangeListener () {\n    // @ts-expect-error cannot index document object with string key\n    if (typeof globalThis.document.addEventListener === 'undefined' || typeof document[this.hidden] === 'undefined') {\n      log('Checking page visibility requires a browser that supports the Page Visibility API.')\n    } else {\n      // Handle page visibility change\n      globalThis.document.addEventListener(this.visibilityChange, this._handleVisibilityChange.bind(this), false)\n    }\n  }\n\n  /**\n   * The function returns ```true``` if the page is visible or ```false``` if the page is not visible and\n   * ```undefined``` if the page visibility API is not supported by the browser.\n   */\n  isVisible () {\n    // @ts-expect-error cannot index document object with string key\n    if (this.hidden === undefined || document[this.hidden] === undefined) {\n      return undefined\n    }\n\n    // @ts-expect-error cannot index document object with string key\n    return document[this.hidden] == null\n  }\n\n  /**\n   * The function that is called when document.visibilityChange has changed\n   * It emits an event called visibilityChange and sends the value of document.hidden as a\n   * parameter\n   *\n   * @private\n   */\n  _handleVisibilityChange () {\n    // @ts-expect-error cannot index document object with string key\n    const visible = globalThis.document[this.hidden] === false\n    log(visible ? 'Page Visible' : 'Page Hidden')\n\n    // Emit the event\n    this.dispatchEvent(new CustomEvent<boolean>('visibilityChange', {\n      detail: visible\n    }))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}