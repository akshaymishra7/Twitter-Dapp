{"ast":null,"code":"import { BaseBlockstore } from './base.js';\nimport { base32 } from 'multiformats/bases/base32';\nimport * as raw from 'multiformats/codecs/raw';\nimport { CID } from 'multiformats/cid';\nimport * as Digest from 'multiformats/hashes/digest';\nimport * as Errors from './errors.js';\n/**\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-store').Options} Options\n */\n\n/**\n * @class MemoryBlockstore\n * @implements {Blockstore}\n */\n\nexport class MemoryBlockstore extends BaseBlockstore {\n  constructor() {\n    super();\n    /** @type {Record<string, Uint8Array>} */\n\n    this.data = {};\n  }\n\n  open() {\n    return Promise.resolve();\n  }\n\n  close() {\n    return Promise.resolve();\n  }\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   */\n\n\n  async put(key, val) {\n    // eslint-disable-line require-await\n    this.data[base32.encode(key.multihash.bytes)] = val;\n  }\n  /**\n   * @param {CID} key\n   */\n\n\n  async get(key) {\n    const exists = await this.has(key);\n    if (!exists) throw Errors.notFoundError();\n    return this.data[base32.encode(key.multihash.bytes)];\n  }\n  /**\n   * @param {CID} key\n   */\n\n\n  async has(key) {\n    // eslint-disable-line require-await\n    return this.data[base32.encode(key.multihash.bytes)] !== undefined;\n  }\n  /**\n   * @param {CID} key\n   */\n\n\n  async delete(key) {\n    // eslint-disable-line require-await\n    delete this.data[base32.encode(key.multihash.bytes)];\n  }\n\n  async *_all() {\n    yield* Object.entries(this.data).map(_ref => {\n      let [key, value] = _ref;\n      return {\n        key: CID.createV1(raw.code, Digest.decode(base32.decode(key))),\n        value\n      };\n    });\n  }\n\n  async *_allKeys() {\n    yield* Object.entries(this.data).map(_ref2 => {\n      let [key] = _ref2;\n      return CID.createV1(raw.code, Digest.decode(base32.decode(key)));\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/blockstore-core/src/memory.js"],"names":["BaseBlockstore","base32","raw","CID","Digest","Errors","MemoryBlockstore","constructor","data","open","Promise","resolve","close","put","key","val","encode","multihash","bytes","get","exists","has","notFoundError","undefined","delete","_all","Object","entries","map","value","createV1","code","decode","_allKeys"],"mappings":"AAAA,SAASA,cAAT,QAA+B,WAA/B;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,yBAArB;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,OAAO,KAAKC,MAAZ,MAAwB,4BAAxB;AACA,OAAO,KAAKC,MAAZ,MAAwB,aAAxB;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,gBAAN,SAA+BN,cAA/B,CAA8C;AACnDO,EAAAA,WAAW,GAAI;AACb;AAEA;;AACA,SAAKC,IAAL,GAAY,EAAZ;AACD;;AAEDC,EAAAA,IAAI,GAAI;AACN,WAAOC,OAAO,CAACC,OAAR,EAAP;AACD;;AAEDC,EAAAA,KAAK,GAAI;AACP,WAAOF,OAAO,CAACC,OAAR,EAAP;AACD;AAED;AACF;AACA;AACA;;;AACW,QAAHE,GAAG,CAAEC,GAAF,EAAOC,GAAP,EAAY;AAAE;AACrB,SAAKP,IAAL,CAAUP,MAAM,CAACe,MAAP,CAAcF,GAAG,CAACG,SAAJ,CAAcC,KAA5B,CAAV,IAAgDH,GAAhD;AACD;AAED;AACF;AACA;;;AACW,QAAHI,GAAG,CAAEL,GAAF,EAAO;AACd,UAAMM,MAAM,GAAG,MAAM,KAAKC,GAAL,CAASP,GAAT,CAArB;AACA,QAAI,CAACM,MAAL,EAAa,MAAMf,MAAM,CAACiB,aAAP,EAAN;AACb,WAAO,KAAKd,IAAL,CAAUP,MAAM,CAACe,MAAP,CAAcF,GAAG,CAACG,SAAJ,CAAcC,KAA5B,CAAV,CAAP;AACD;AAED;AACF;AACA;;;AACW,QAAHG,GAAG,CAAEP,GAAF,EAAO;AAAE;AAChB,WAAO,KAAKN,IAAL,CAAUP,MAAM,CAACe,MAAP,CAAcF,GAAG,CAACG,SAAJ,CAAcC,KAA5B,CAAV,MAAkDK,SAAzD;AACD;AAED;AACF;AACA;;;AACc,QAANC,MAAM,CAAEV,GAAF,EAAO;AAAE;AACnB,WAAO,KAAKN,IAAL,CAAUP,MAAM,CAACe,MAAP,CAAcF,GAAG,CAACG,SAAJ,CAAcC,KAA5B,CAAV,CAAP;AACD;;AAEW,SAAJO,IAAI,GAAI;AACd,WAAQC,MAAM,CAACC,OAAP,CAAe,KAAKnB,IAApB,EACLoB,GADK,CACD;AAAA,UAAC,CAACd,GAAD,EAAMe,KAAN,CAAD;AAAA,aAAmB;AAAEf,QAAAA,GAAG,EAAEX,GAAG,CAAC2B,QAAJ,CAAa5B,GAAG,CAAC6B,IAAjB,EAAuB3B,MAAM,CAAC4B,MAAP,CAAc/B,MAAM,CAAC+B,MAAP,CAAclB,GAAd,CAAd,CAAvB,CAAP;AAAkEe,QAAAA;AAAlE,OAAnB;AAAA,KADC,CAAR;AAED;;AAEe,SAARI,QAAQ,GAAI;AAClB,WAAQP,MAAM,CAACC,OAAP,CAAe,KAAKnB,IAApB,EACLoB,GADK,CACD;AAAA,UAAC,CAACd,GAAD,CAAD;AAAA,aAAWX,GAAG,CAAC2B,QAAJ,CAAa5B,GAAG,CAAC6B,IAAjB,EAAuB3B,MAAM,CAAC4B,MAAP,CAAc/B,MAAM,CAAC+B,MAAP,CAAclB,GAAd,CAAd,CAAvB,CAAX;AAAA,KADC,CAAR;AAED;;AAvDkD","sourcesContent":["import { BaseBlockstore } from './base.js'\nimport { base32 } from 'multiformats/bases/base32'\nimport * as raw from 'multiformats/codecs/raw'\nimport { CID } from 'multiformats/cid'\nimport * as Digest from 'multiformats/hashes/digest'\nimport * as Errors from './errors.js'\n\n/**\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('interface-store').Options} Options\n */\n\n/**\n * @class MemoryBlockstore\n * @implements {Blockstore}\n */\nexport class MemoryBlockstore extends BaseBlockstore {\n  constructor () {\n    super()\n\n    /** @type {Record<string, Uint8Array>} */\n    this.data = {}\n  }\n\n  open () {\n    return Promise.resolve()\n  }\n\n  close () {\n    return Promise.resolve()\n  }\n\n  /**\n   * @param {CID} key\n   * @param {Uint8Array} val\n   */\n  async put (key, val) { // eslint-disable-line require-await\n    this.data[base32.encode(key.multihash.bytes)] = val\n  }\n\n  /**\n   * @param {CID} key\n   */\n  async get (key) {\n    const exists = await this.has(key)\n    if (!exists) throw Errors.notFoundError()\n    return this.data[base32.encode(key.multihash.bytes)]\n  }\n\n  /**\n   * @param {CID} key\n   */\n  async has (key) { // eslint-disable-line require-await\n    return this.data[base32.encode(key.multihash.bytes)] !== undefined\n  }\n\n  /**\n   * @param {CID} key\n   */\n  async delete (key) { // eslint-disable-line require-await\n    delete this.data[base32.encode(key.multihash.bytes)]\n  }\n\n  async * _all () {\n    yield * Object.entries(this.data)\n      .map(([key, value]) => ({ key: CID.createV1(raw.code, Digest.decode(base32.decode(key))), value }))\n  }\n\n  async * _allKeys () {\n    yield * Object.entries(this.data)\n      .map(([key]) => CID.createV1(raw.code, Digest.decode(base32.decode(key))))\n  }\n}\n"]},"metadata":{},"sourceType":"module"}