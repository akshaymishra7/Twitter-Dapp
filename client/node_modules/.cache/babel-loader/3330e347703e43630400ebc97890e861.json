{"ast":null,"code":"import { IpnsPubsubDatastore } from '../../../ipns/routing/pubsub-datastore.js';\nimport errcode from 'err-code';\n/**\n * @typedef {import('../../../types').ExperimentalOptions} ExperimentalOptions\n * @property {boolean} [ipnsPubsub] - Enable pub-sub on IPNS. (Default: `false`)\n */\n\n/**\n * Get pubsub from IPNS routing\n *\n * @param {import('../../ipns').IPNSAPI} ipns\n * @param {ExperimentalOptions} [options]\n */\n\nexport function getPubsubRouting(ipns, options) {\n  if (!ipns || !(options && options.ipnsPubsub)) {\n    throw errcode(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED');\n  } // Only one store and it is pubsub\n\n\n  if (ipns.routing instanceof IpnsPubsubDatastore) {\n    return ipns.routing;\n  } // Find in tiered\n\n\n  const pubsub = (ipns.routing.stores || []).find(s => s instanceof IpnsPubsubDatastore);\n\n  if (!pubsub) {\n    throw errcode(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND');\n  }\n\n  return pubsub;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/name/pubsub/utils.js"],"names":["IpnsPubsubDatastore","errcode","getPubsubRouting","ipns","options","ipnsPubsub","Error","routing","pubsub","stores","find","s"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,2CAApC;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,gBAAT,CAA2BC,IAA3B,EAAiCC,OAAjC,EAA0C;AAC/C,MAAI,CAACD,IAAD,IAAS,EAAEC,OAAO,IAAIA,OAAO,CAACC,UAArB,CAAb,EAA+C;AAC7C,UAAMJ,OAAO,CAAC,IAAIK,KAAJ,CAAU,sCAAV,CAAD,EAAoD,6BAApD,CAAb;AACD,GAH8C,CAK/C;;;AACA,MAAIH,IAAI,CAACI,OAAL,YAAwBP,mBAA5B,EAAiD;AAC/C,WAAOG,IAAI,CAACI,OAAZ;AACD,GAR8C,CAU/C;;;AACA,QAAMC,MAAM,GAAG,CAACL,IAAI,CAACI,OAAL,CAAaE,MAAb,IAAuB,EAAxB,EAA4BC,IAA5B,CAAiCC,CAAC,IAAIA,CAAC,YAAYX,mBAAnD,CAAf;;AAEA,MAAI,CAACQ,MAAL,EAAa;AACX,UAAMP,OAAO,CAAC,IAAIK,KAAJ,CAAU,iCAAV,CAAD,EAA+C,gCAA/C,CAAb;AACD;;AAED,SAAOE,MAAP;AACD","sourcesContent":["import { IpnsPubsubDatastore } from '../../../ipns/routing/pubsub-datastore.js'\nimport errcode from 'err-code'\n\n/**\n * @typedef {import('../../../types').ExperimentalOptions} ExperimentalOptions\n * @property {boolean} [ipnsPubsub] - Enable pub-sub on IPNS. (Default: `false`)\n */\n\n/**\n * Get pubsub from IPNS routing\n *\n * @param {import('../../ipns').IPNSAPI} ipns\n * @param {ExperimentalOptions} [options]\n */\nexport function getPubsubRouting (ipns, options) {\n  if (!ipns || !(options && options.ipnsPubsub)) {\n    throw errcode(new Error('IPNS pubsub subsystem is not enabled'), 'ERR_IPNS_PUBSUB_NOT_ENABLED')\n  }\n\n  // Only one store and it is pubsub\n  if (ipns.routing instanceof IpnsPubsubDatastore) {\n    return ipns.routing\n  }\n\n  // Find in tiered\n  const pubsub = (ipns.routing.stores || []).find(s => s instanceof IpnsPubsubDatastore)\n\n  if (!pubsub) {\n    throw errcode(new Error('IPNS pubsub datastore not found'), 'ERR_PUBSUB_DATASTORE_NOT_FOUND')\n  }\n\n  return pubsub\n}\n"]},"metadata":{},"sourceType":"module"}