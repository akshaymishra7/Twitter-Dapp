{"ast":null,"code":"import { Key } from 'interface-datastore/key';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nconst apiFile = new Key('api');\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\n\nexport function apiAddr(store) {\n  return {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @returns {Promise<string>}\n     */\n    async get() {\n      const value = await store.get(apiFile);\n      return value && value.toString();\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     * TODO: fix find the proper type or remove this API\n     *\n     * @param {string} value - the api address to be written\n     */\n    set(value) {\n      return store.put(apiFile, uint8ArrayFromString(value.toString()));\n    },\n\n    /**\n     * Deletes api file\n     */\n    delete() {\n      return store.delete(apiFile);\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-repo/src/api-addr.js"],"names":["Key","fromString","uint8ArrayFromString","apiFile","apiAddr","store","get","value","toString","set","put","delete"],"mappings":"AACA,SAASA,GAAT,QAAoB,yBAApB;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AAEA,MAAMC,OAAO,GAAG,IAAIH,GAAJ,CAAQ,KAAR,CAAhB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASI,OAAT,CAAkBC,KAAlB,EAAyB;AAC9B,SAAO;AACL;AACJ;AACA;AACA;AACA;AACI,UAAMC,GAAN,GAAa;AACX,YAAMC,KAAK,GAAG,MAAMF,KAAK,CAACC,GAAN,CAAUH,OAAV,CAApB;AACA,aAAOI,KAAK,IAAIA,KAAK,CAACC,QAAN,EAAhB;AACD,KATI;;AAUL;AACJ;AACA;AACA;AACA;AACA;AACIC,IAAAA,GAAG,CAAEF,KAAF,EAAS;AACV,aAAOF,KAAK,CAACK,GAAN,CAAUP,OAAV,EAAmBD,oBAAoB,CAACK,KAAK,CAACC,QAAN,EAAD,CAAvC,CAAP;AACD,KAlBI;;AAmBL;AACJ;AACA;AACIG,IAAAA,MAAM,GAAI;AACR,aAAON,KAAK,CAACM,MAAN,CAAaR,OAAb,CAAP;AACD;;AAxBI,GAAP;AA0BD","sourcesContent":["\nimport { Key } from 'interface-datastore/key'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\n\nconst apiFile = new Key('api')\n\n/**\n *\n * @param {import('interface-datastore').Datastore} store\n */\nexport function apiAddr (store) {\n  return {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @returns {Promise<string>}\n     */\n    async get () {\n      const value = await store.get(apiFile)\n      return value && value.toString()\n    },\n    /**\n     * Set the current configuration for this repo.\n     * TODO: fix find the proper type or remove this API\n     *\n     * @param {string} value - the api address to be written\n     */\n    set (value) {\n      return store.put(apiFile, uint8ArrayFromString(value.toString()))\n    },\n    /**\n     * Deletes api file\n     */\n    delete () {\n      return store.delete(apiFile)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}