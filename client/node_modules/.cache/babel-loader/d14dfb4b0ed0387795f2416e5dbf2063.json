{"ast":null,"code":"// @ts-expect-error no types\nimport ReaderClass from 'protobufjs/src/reader.js'; // @ts-expect-error no types\n\nimport ReaderBufferClass from 'protobufjs/src/reader_buffer.js'; // @ts-expect-error no types\n\nimport util from 'protobufjs/src/util/minimal.js'; // @ts-expect-error no types\n\nimport WriterClass from 'protobufjs/src/writer.js'; // @ts-expect-error no types\n\nimport WriterBufferClass from 'protobufjs/src/writer_buffer.js';\n\nfunction configure() {\n  util._configure();\n\n  ReaderClass._configure(ReaderBufferClass);\n\n  WriterClass._configure(WriterBufferClass);\n} // Set up buffer utility according to the environment\n\n\nconfigure(); // monkey patch the reader to add native bigint support\n\nconst methods = ['uint64', 'int64', 'sint64', 'fixed64', 'sfixed64'];\n\nfunction patchReader(obj) {\n  for (const method of methods) {\n    if (obj[method] == null) {\n      continue;\n    }\n\n    const original = obj[method];\n\n    obj[method] = function () {\n      return BigInt(original.call(this).toString());\n    };\n  }\n\n  return obj;\n}\n\nexport function reader(buf) {\n  return patchReader(new ReaderClass(buf));\n}\n\nfunction patchWriter(obj) {\n  for (const method of methods) {\n    if (obj[method] == null) {\n      continue;\n    }\n\n    const original = obj[method];\n\n    obj[method] = function (val) {\n      return original.call(this, val.toString());\n    };\n  }\n\n  return obj;\n}\n\nexport function writer() {\n  return patchWriter(WriterClass.create());\n}","map":{"version":3,"mappings":"AAAA;AACA,OAAOA,WAAP,MAAwB,0BAAxB,C,CACA;;AACA,OAAOC,iBAAP,MAA8B,iCAA9B,C,CACA;;AACA,OAAOC,IAAP,MAAiB,gCAAjB,C,CACA;;AACA,OAAOC,WAAP,MAAwB,0BAAxB,C,CACA;;AACA,OAAOC,iBAAP,MAA8B,iCAA9B;;AAIA,SAASC,SAAT,GAAkB;AAChBH,MAAI,CAACI,UAAL;;AACAN,aAAW,CAACM,UAAZ,CAAuBL,iBAAvB;;AACAE,aAAW,CAACG,UAAZ,CAAuBF,iBAAvB;AACD,C,CAED;;;AACAC,SAAS,G,CAET;;AACA,MAAME,OAAO,GAAG,CACd,QADc,EACJ,OADI,EACK,QADL,EACe,SADf,EAC0B,UAD1B,CAAhB;;AAIA,SAASC,WAAT,CAAsBC,GAAtB,EAA8B;AAC5B,OAAK,MAAMC,MAAX,IAAqBH,OAArB,EAA8B;AAC5B,QAAIE,GAAG,CAACC,MAAD,CAAH,IAAe,IAAnB,EAAyB;AACvB;AACD;;AAED,UAAMC,QAAQ,GAAGF,GAAG,CAACC,MAAD,CAApB;;AACAD,OAAG,CAACC,MAAD,CAAH,GAAc;AACZ,aAAOE,MAAM,CAACD,QAAQ,CAACE,IAAT,CAAc,IAAd,EAAoBC,QAApB,EAAD,CAAb;AACD,KAFD;AAGD;;AAED,SAAOL,GAAP;AACD;;AAED,OAAM,SAAUM,MAAV,CAAkBC,GAAlB,EAAiC;AACrC,SAAOR,WAAW,CAAC,IAAIR,WAAJ,CAAgBgB,GAAhB,CAAD,CAAlB;AACD;;AAED,SAASC,WAAT,CAAsBR,GAAtB,EAA8B;AAC5B,OAAK,MAAMC,MAAX,IAAqBH,OAArB,EAA8B;AAC5B,QAAIE,GAAG,CAACC,MAAD,CAAH,IAAe,IAAnB,EAAyB;AACvB;AACD;;AAED,UAAMC,QAAQ,GAAGF,GAAG,CAACC,MAAD,CAApB;;AACAD,OAAG,CAACC,MAAD,CAAH,GAAc,UAAUQ,GAAV,EAAqB;AACjC,aAAOP,QAAQ,CAACE,IAAT,CAAc,IAAd,EAAoBK,GAAG,CAACJ,QAAJ,EAApB,CAAP;AACD,KAFD;AAGD;;AAED,SAAOL,GAAP;AACD;;AAED,OAAM,SAAUU,MAAV,GAAgB;AACpB,SAAOF,WAAW,CAACd,WAAW,CAACiB,MAAZ,EAAD,CAAlB;AACD","names":["ReaderClass","ReaderBufferClass","util","WriterClass","WriterBufferClass","configure","_configure","methods","patchReader","obj","method","original","BigInt","call","toString","reader","buf","patchWriter","val","writer","create"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\protons-runtime\\src\\utils.ts"],"sourcesContent":["// @ts-expect-error no types\nimport ReaderClass from 'protobufjs/src/reader.js'\n// @ts-expect-error no types\nimport ReaderBufferClass from 'protobufjs/src/reader_buffer.js'\n// @ts-expect-error no types\nimport util from 'protobufjs/src/util/minimal.js'\n// @ts-expect-error no types\nimport WriterClass from 'protobufjs/src/writer.js'\n// @ts-expect-error no types\nimport WriterBufferClass from 'protobufjs/src/writer_buffer.js'\n\nimport type { Reader, Writer } from './index.js'\n\nfunction configure (): void {\n  util._configure()\n  ReaderClass._configure(ReaderBufferClass)\n  WriterClass._configure(WriterBufferClass)\n}\n\n// Set up buffer utility according to the environment\nconfigure()\n\n// monkey patch the reader to add native bigint support\nconst methods = [\n  'uint64', 'int64', 'sint64', 'fixed64', 'sfixed64'\n]\n\nfunction patchReader (obj: any): any {\n  for (const method of methods) {\n    if (obj[method] == null) {\n      continue\n    }\n\n    const original = obj[method]\n    obj[method] = function (): bigint {\n      return BigInt(original.call(this).toString())\n    }\n  }\n\n  return obj\n}\n\nexport function reader (buf: Uint8Array): Reader {\n  return patchReader(new ReaderClass(buf))\n}\n\nfunction patchWriter (obj: any): any {\n  for (const method of methods) {\n    if (obj[method] == null) {\n      continue\n    }\n\n    const original = obj[method]\n    obj[method] = function (val: bigint) {\n      return original.call(this, val.toString())\n    }\n  }\n\n  return obj\n}\n\nexport function writer (): Writer {\n  return patchWriter(WriterClass.create())\n}\n"]},"metadata":{},"sourceType":"module"}