{"ast":null,"code":"module.exports = class BlockedKeys {\n  constructor() {\n    this._keys = {}; // {'key': 1526279430331}\n\n    this._addedKeysAmount = 0;\n  }\n\n  collectExpired() {\n    const now = Date.now();\n    Object.keys(this._keys).forEach(key => {\n      if (this._keys[key] <= now) {\n        delete this._keys[key];\n      }\n    });\n    this._addedKeysAmount = Object.keys(this._keys).length;\n  }\n  /**\n   * Add new blocked key\n   *\n   * @param key String\n   * @param sec Number\n   */\n\n\n  add(key, sec) {\n    this.addMs(key, sec * 1000);\n  }\n  /**\n   * Add new blocked key for ms\n   *\n   * @param key String\n   * @param ms Number\n   */\n\n\n  addMs(key, ms) {\n    this._keys[key] = Date.now() + ms;\n    this._addedKeysAmount++;\n\n    if (this._addedKeysAmount > 999) {\n      this.collectExpired();\n    }\n  }\n  /**\n   * 0 means not blocked\n   *\n   * @param key\n   * @returns {number}\n   */\n\n\n  msBeforeExpire(key) {\n    const expire = this._keys[key];\n\n    if (expire && expire >= Date.now()) {\n      this.collectExpired();\n      const now = Date.now();\n      return expire >= now ? expire - now : 0;\n    }\n\n    return 0;\n  }\n  /**\n   * If key is not given, delete all data in memory\n   * \n   * @param {string|undefined} key\n   */\n\n\n  delete(key) {\n    if (key) {\n      delete this._keys[key];\n    } else {\n      Object.keys(this._keys).forEach(key => {\n        delete this._keys[key];\n      });\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/rate-limiter-flexible/lib/component/BlockedKeys/BlockedKeys.js"],"names":["module","exports","BlockedKeys","constructor","_keys","_addedKeysAmount","collectExpired","now","Date","Object","keys","forEach","key","length","add","sec","addMs","ms","msBeforeExpire","expire","delete"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiB,MAAMC,WAAN,CAAkB;AACjCC,EAAAA,WAAW,GAAG;AACZ,SAAKC,KAAL,GAAa,EAAb,CADY,CACK;;AACjB,SAAKC,gBAAL,GAAwB,CAAxB;AACD;;AAEDC,EAAAA,cAAc,GAAG;AACf,UAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AAEAE,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAKN,KAAjB,EAAwBO,OAAxB,CAAiCC,GAAD,IAAS;AACvC,UAAI,KAAKR,KAAL,CAAWQ,GAAX,KAAmBL,GAAvB,EAA4B;AAC1B,eAAO,KAAKH,KAAL,CAAWQ,GAAX,CAAP;AACD;AACF,KAJD;AAMA,SAAKP,gBAAL,GAAwBI,MAAM,CAACC,IAAP,CAAY,KAAKN,KAAjB,EAAwBS,MAAhD;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,GAAG,CAACF,GAAD,EAAMG,GAAN,EAAW;AACZ,SAAKC,KAAL,CAAWJ,GAAX,EAAgBG,GAAG,GAAG,IAAtB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,KAAK,CAACJ,GAAD,EAAMK,EAAN,EAAU;AACb,SAAKb,KAAL,CAAWQ,GAAX,IAAkBJ,IAAI,CAACD,GAAL,KAAaU,EAA/B;AACA,SAAKZ,gBAAL;;AACA,QAAI,KAAKA,gBAAL,GAAwB,GAA5B,EAAiC;AAC/B,WAAKC,cAAL;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEY,EAAAA,cAAc,CAACN,GAAD,EAAM;AAClB,UAAMO,MAAM,GAAG,KAAKf,KAAL,CAAWQ,GAAX,CAAf;;AAEA,QAAIO,MAAM,IAAIA,MAAM,IAAIX,IAAI,CAACD,GAAL,EAAxB,EAAoC;AAClC,WAAKD,cAAL;AACA,YAAMC,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACA,aAAOY,MAAM,IAAIZ,GAAV,GAAgBY,MAAM,GAAGZ,GAAzB,GAA+B,CAAtC;AACD;;AAED,WAAO,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEa,EAAAA,MAAM,CAACR,GAAD,EAAM;AACV,QAAIA,GAAJ,EAAS;AACP,aAAO,KAAKR,KAAL,CAAWQ,GAAX,CAAP;AACD,KAFD,MAEO;AACLH,MAAAA,MAAM,CAACC,IAAP,CAAY,KAAKN,KAAjB,EAAwBO,OAAxB,CAAiCC,GAAD,IAAS;AACvC,eAAO,KAAKR,KAAL,CAAWQ,GAAX,CAAP;AACD,OAFD;AAGD;AACF;;AAzEgC,CAAnC","sourcesContent":["module.exports = class BlockedKeys {\n  constructor() {\n    this._keys = {}; // {'key': 1526279430331}\n    this._addedKeysAmount = 0;\n  }\n\n  collectExpired() {\n    const now = Date.now();\n\n    Object.keys(this._keys).forEach((key) => {\n      if (this._keys[key] <= now) {\n        delete this._keys[key];\n      }\n    });\n\n    this._addedKeysAmount = Object.keys(this._keys).length;\n  }\n\n  /**\n   * Add new blocked key\n   *\n   * @param key String\n   * @param sec Number\n   */\n  add(key, sec) {\n    this.addMs(key, sec * 1000);\n  }\n\n  /**\n   * Add new blocked key for ms\n   *\n   * @param key String\n   * @param ms Number\n   */\n  addMs(key, ms) {\n    this._keys[key] = Date.now() + ms;\n    this._addedKeysAmount++;\n    if (this._addedKeysAmount > 999) {\n      this.collectExpired();\n    }\n  }\n\n  /**\n   * 0 means not blocked\n   *\n   * @param key\n   * @returns {number}\n   */\n  msBeforeExpire(key) {\n    const expire = this._keys[key];\n\n    if (expire && expire >= Date.now()) {\n      this.collectExpired();\n      const now = Date.now();\n      return expire >= now ? expire - now : 0;\n    }\n\n    return 0;\n  }\n\n  /**\n   * If key is not given, delete all data in memory\n   * \n   * @param {string|undefined} key\n   */\n  delete(key) {\n    if (key) {\n      delete this._keys[key];\n    } else {\n      Object.keys(this._keys).forEach((key) => {\n        delete this._keys[key];\n      });\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"script"}