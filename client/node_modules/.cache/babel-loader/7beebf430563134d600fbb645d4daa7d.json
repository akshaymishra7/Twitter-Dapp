{"ast":null,"code":"import { Service } from '../utils/service.js';\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('../types').Preload} config.preload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').MfsPreload} config.mfsPreload\n */\n\nexport function createStop(_ref) {\n  let {\n    network,\n    preload,\n    ipns,\n    repo,\n    mfsPreload\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"stop\"]}\n   */\n  const stop = async () => {\n    await Promise.all([preload.stop(), ipns.stop(), mfsPreload.stop()]);\n    await Service.stop(network); // must be closed after stopping services as some of them\n    // will write into the datastore\n\n    await repo.close();\n  };\n\n  return stop;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/stop.js"],"names":["Service","createStop","network","preload","ipns","repo","mfsPreload","stop","Promise","all","close"],"mappings":"AAAA,SAASA,OAAT,QAAwB,qBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,OAAmE;AAAA,MAA9C;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,OAAX;AAAoBC,IAAAA,IAApB;AAA0BC,IAAAA,IAA1B;AAAgCC,IAAAA;AAAhC,GAA8C;;AACxE;AACF;AACA;AACE,QAAMC,IAAI,GAAG,YAAY;AACvB,UAAMC,OAAO,CAACC,GAAR,CAAY,CAChBN,OAAO,CAACI,IAAR,EADgB,EAEhBH,IAAI,CAACG,IAAL,EAFgB,EAGhBD,UAAU,CAACC,IAAX,EAHgB,CAAZ,CAAN;AAMA,UAAMP,OAAO,CAACO,IAAR,CAAaL,OAAb,CAAN,CAPuB,CASvB;AACA;;AACA,UAAMG,IAAI,CAACK,KAAL,EAAN;AACD,GAZD;;AAcA,SAAOH,IAAP;AACD","sourcesContent":["import { Service } from '../utils/service.js'\n\n/**\n * @param {object} config\n * @param {import('../types').NetworkService} config.network\n * @param {import('../types').Preload} config.preload\n * @param {import('./ipns').IPNSAPI} config.ipns\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../types').MfsPreload} config.mfsPreload\n */\nexport function createStop ({ network, preload, ipns, repo, mfsPreload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"stop\"]}\n   */\n  const stop = async () => {\n    await Promise.all([\n      preload.stop(),\n      ipns.stop(),\n      mfsPreload.stop()\n    ])\n\n    await Service.stop(network)\n\n    // must be closed after stopping services as some of them\n    // will write into the datastore\n    await repo.close()\n  }\n\n  return stop\n}\n"]},"metadata":{},"sourceType":"module"}