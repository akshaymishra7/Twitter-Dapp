{"ast":null,"code":"/* eslint-env browser */\nimport { TLRU } from './utils/tlru.js';\nimport PQueue from 'p-queue';\nimport HTTP from 'ipfs-utils/src/http.js'; // Avoid sending multiple queries for the same hostname by caching results\n\nconst cache = new TLRU(1000); // TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884\n// However we know browsers themselves cache DNS records for at least 1 minute,\n// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426\n\nconst ttl = 60 * 1000; // @ts-expect-error PQueue@6 is broken\n\nconst Queue = PQueue.default ? PQueue.default : PQueue; // browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\n\nconst httpQueue = new Queue({\n  concurrency: 4\n});\n/**\n * @param {{ Path: string, Message: string }} response\n */\n\nconst ipfsPath = response => {\n  if (response.Path) return response.Path;\n  throw new Error(response.Message);\n};\n/**\n * @param {string} fqdn\n * @param {object} opts\n */\n\n\nexport async function resolveDnslink(fqdn, opts) {\n  // eslint-disable-line require-await\n\n  /**\n   * @param {string} fqdn\n   * @param {object} opts\n   * @param {boolean} [opts.nocache]\n   */\n  const resolve = async function (fqdn) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // @ts-expect-error - URLSearchParams does not take boolean options, only strings\n    const searchParams = new URLSearchParams(opts);\n    searchParams.set('arg', fqdn); // try cache first\n\n    const query = searchParams.toString();\n\n    if (!opts.nocache && cache.has(query)) {\n      const response = cache.get(query);\n      return ipfsPath(response);\n    } // fallback to delegated DNS resolver\n\n\n    const response = await httpQueue.add(async () => {\n      // Delegated HTTP resolver sending DNSLink queries to ipfs.io\n      // TODO: replace hardcoded host with configurable DNS over HTTPS: https://github.com/ipfs/js-ipfs/issues/2212\n      const res = await HTTP.get('https://ipfs.io/api/v0/dns', {\n        searchParams\n      });\n      const query = new URL(res.url).search.slice(1);\n      const json = await res.json();\n      cache.set(query, json, ttl);\n      return json;\n    });\n    return ipfsPath(response);\n  };\n\n  return resolve(fqdn, opts);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core-config/src/dns.browser.js"],"names":["TLRU","PQueue","HTTP","cache","ttl","Queue","default","httpQueue","concurrency","ipfsPath","response","Path","Error","Message","resolveDnslink","fqdn","opts","resolve","searchParams","URLSearchParams","set","query","toString","nocache","has","get","add","res","URL","url","search","slice","json"],"mappings":"AAAA;AAEA,SAASA,IAAT,QAAqB,iBAArB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AACA,OAAOC,IAAP,MAAiB,wBAAjB,C,CAEA;;AACA,MAAMC,KAAK,GAAG,IAAIH,IAAJ,CAAS,IAAT,CAAd,C,CACA;AACA;AACA;;AACA,MAAMI,GAAG,GAAG,KAAK,IAAjB,C,CAEA;;AACA,MAAMC,KAAK,GAAGJ,MAAM,CAACK,OAAP,GAAiBL,MAAM,CAACK,OAAxB,GAAkCL,MAAhD,C,CAEA;AACA;;AACA,MAAMM,SAAS,GAAG,IAAIF,KAAJ,CAAU;AAAEG,EAAAA,WAAW,EAAE;AAAf,CAAV,CAAlB;AAEA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAIC,QAAD,IAAc;AAC7B,MAAIA,QAAQ,CAACC,IAAb,EAAmB,OAAOD,QAAQ,CAACC,IAAhB;AACnB,QAAM,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,OAAnB,CAAN;AACD,CAHD;AAKA;AACA;AACA;AACA;;;AACA,OAAO,eAAeC,cAAf,CAA+BC,IAA/B,EAAqCC,IAArC,EAA2C;AAAE;;AAClD;AACF;AACA;AACA;AACA;AACE,QAAMC,OAAO,GAAG,gBAAOF,IAAP,EAA2B;AAAA,QAAdC,IAAc,uEAAP,EAAO;AACzC;AACA,UAAME,YAAY,GAAG,IAAIC,eAAJ,CAAoBH,IAApB,CAArB;AACAE,IAAAA,YAAY,CAACE,GAAb,CAAiB,KAAjB,EAAwBL,IAAxB,EAHyC,CAKzC;;AACA,UAAMM,KAAK,GAAGH,YAAY,CAACI,QAAb,EAAd;;AACA,QAAI,CAACN,IAAI,CAACO,OAAN,IAAiBpB,KAAK,CAACqB,GAAN,CAAUH,KAAV,CAArB,EAAuC;AACrC,YAAMX,QAAQ,GAAGP,KAAK,CAACsB,GAAN,CAAUJ,KAAV,CAAjB;AACA,aAAOZ,QAAQ,CAACC,QAAD,CAAf;AACD,KAVwC,CAYzC;;;AACA,UAAMA,QAAQ,GAAG,MAAMH,SAAS,CAACmB,GAAV,CAAc,YAAY;AAC/C;AACA;AACA,YAAMC,GAAG,GAAG,MAAMzB,IAAI,CAACuB,GAAL,CAAS,4BAAT,EAAuC;AAAEP,QAAAA;AAAF,OAAvC,CAAlB;AACA,YAAMG,KAAK,GAAG,IAAIO,GAAJ,CAAQD,GAAG,CAACE,GAAZ,EAAiBC,MAAjB,CAAwBC,KAAxB,CAA8B,CAA9B,CAAd;AACA,YAAMC,IAAI,GAAG,MAAML,GAAG,CAACK,IAAJ,EAAnB;AACA7B,MAAAA,KAAK,CAACiB,GAAN,CAAUC,KAAV,EAAiBW,IAAjB,EAAuB5B,GAAvB;AAEA,aAAO4B,IAAP;AACD,KATsB,CAAvB;AAUA,WAAOvB,QAAQ,CAACC,QAAD,CAAf;AACD,GAxBD;;AA0BA,SAAOO,OAAO,CAACF,IAAD,EAAOC,IAAP,CAAd;AACD","sourcesContent":["/* eslint-env browser */\n\nimport { TLRU } from './utils/tlru.js'\nimport PQueue from 'p-queue'\nimport HTTP from 'ipfs-utils/src/http.js'\n\n// Avoid sending multiple queries for the same hostname by caching results\nconst cache = new TLRU(1000)\n// TODO: /api/v0/dns does not return TTL yet: https://github.com/ipfs/go-ipfs/issues/5884\n// However we know browsers themselves cache DNS records for at least 1 minute,\n// which acts a provisional default ttl: https://stackoverflow.com/a/36917902/11518426\nconst ttl = 60 * 1000\n\n// @ts-expect-error PQueue@6 is broken\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new Queue({ concurrency: 4 })\n\n/**\n * @param {{ Path: string, Message: string }} response\n */\nconst ipfsPath = (response) => {\n  if (response.Path) return response.Path\n  throw new Error(response.Message)\n}\n\n/**\n * @param {string} fqdn\n * @param {object} opts\n */\nexport async function resolveDnslink (fqdn, opts) { // eslint-disable-line require-await\n  /**\n   * @param {string} fqdn\n   * @param {object} opts\n   * @param {boolean} [opts.nocache]\n   */\n  const resolve = async (fqdn, opts = {}) => {\n    // @ts-expect-error - URLSearchParams does not take boolean options, only strings\n    const searchParams = new URLSearchParams(opts)\n    searchParams.set('arg', fqdn)\n\n    // try cache first\n    const query = searchParams.toString()\n    if (!opts.nocache && cache.has(query)) {\n      const response = cache.get(query)\n      return ipfsPath(response)\n    }\n\n    // fallback to delegated DNS resolver\n    const response = await httpQueue.add(async () => {\n      // Delegated HTTP resolver sending DNSLink queries to ipfs.io\n      // TODO: replace hardcoded host with configurable DNS over HTTPS: https://github.com/ipfs/js-ipfs/issues/2212\n      const res = await HTTP.get('https://ipfs.io/api/v0/dns', { searchParams })\n      const query = new URL(res.url).search.slice(1)\n      const json = await res.json()\n      cache.set(query, json, ttl)\n\n      return json\n    })\n    return ipfsPath(response)\n  }\n\n  return resolve(fqdn, opts)\n}\n"]},"metadata":{},"sourceType":"module"}