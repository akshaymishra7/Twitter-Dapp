{"ast":null,"code":"/* eslint-disable import/export */\n\n/* eslint-disable complexity */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var Record;\n\n(function (Record) {\n  let _codec;\n\n  Record.codec = () => {\n    if (_codec == null) {\n      _codec = message(function (obj, w) {\n        let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        if (opts.lengthDelimited !== false) {\n          w.fork();\n        }\n\n        if (obj.key != null && obj.key.byteLength > 0) {\n          w.uint32(10);\n          w.bytes(obj.key);\n        }\n\n        if (obj.value != null && obj.value.byteLength > 0) {\n          w.uint32(18);\n          w.bytes(obj.value);\n        }\n\n        if (obj.timeReceived != null && obj.timeReceived !== '') {\n          w.uint32(42);\n          w.string(obj.timeReceived);\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim();\n        }\n      }, (reader, length) => {\n        const obj = {\n          key: new Uint8Array(0),\n          value: new Uint8Array(0),\n          timeReceived: ''\n        };\n        const end = length == null ? reader.len : reader.pos + length;\n\n        while (reader.pos < end) {\n          const tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              obj.key = reader.bytes();\n              break;\n\n            case 2:\n              obj.value = reader.bytes();\n              break;\n\n            case 5:\n              obj.timeReceived = reader.string();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return obj;\n      });\n    }\n\n    return _codec;\n  };\n\n  Record.encode = obj => {\n    return encodeMessage(obj, Record.codec());\n  };\n\n  Record.decode = buf => {\n    return decodeMessage(buf, Record.codec());\n  };\n})(Record || (Record = {}));","map":{"version":3,"mappings":"AAAA;;AACA;;AACA;;AACA;;AACA;AAEA,SAASA,aAAT,EAAwBC,aAAxB,EAAuCC,OAAvC,QAAsD,iBAAtD;AAUA,OAAM,IAAWC,MAAX;;AAAN,WAAiBA,MAAjB,EAAuB;AACrB,MAAIC,MAAJ;;AAEaD,iBAAQ,MAAoB;AACvC,QAAIC,MAAM,IAAI,IAAd,EAAoB;AAClBA,YAAM,GAAGF,OAAO,CAAS,UAACG,GAAD,EAAMC,CAAN,EAAsB;AAAA,YAAbC,IAAa,uEAAN,EAAM;;AAC7C,YAAIA,IAAI,CAACC,eAAL,KAAyB,KAA7B,EAAoC;AAClCF,WAAC,CAACG,IAAF;AACD;;AAED,YAAKJ,GAAG,CAACK,GAAJ,IAAW,IAAX,IAAmBL,GAAG,CAACK,GAAJ,CAAQC,UAAR,GAAqB,CAA7C,EAAiD;AAC/CL,WAAC,CAACM,MAAF,CAAS,EAAT;AACAN,WAAC,CAACO,KAAF,CAAQR,GAAG,CAACK,GAAZ;AACD;;AAED,YAAKL,GAAG,CAACS,KAAJ,IAAa,IAAb,IAAqBT,GAAG,CAACS,KAAJ,CAAUH,UAAV,GAAuB,CAAjD,EAAqD;AACnDL,WAAC,CAACM,MAAF,CAAS,EAAT;AACAN,WAAC,CAACO,KAAF,CAAQR,GAAG,CAACS,KAAZ;AACD;;AAED,YAAKT,GAAG,CAACU,YAAJ,IAAoB,IAApB,IAA4BV,GAAG,CAACU,YAAJ,KAAqB,EAAtD,EAA2D;AACzDT,WAAC,CAACM,MAAF,CAAS,EAAT;AACAN,WAAC,CAACU,MAAF,CAASX,GAAG,CAACU,YAAb;AACD;;AAED,YAAIR,IAAI,CAACC,eAAL,KAAyB,KAA7B,EAAoC;AAClCF,WAAC,CAACW,MAAF;AACD;AACF,OAvBe,EAuBb,CAACC,MAAD,EAASC,MAAT,KAAmB;AACpB,cAAMd,GAAG,GAAQ;AACfK,aAAG,EAAE,IAAIU,UAAJ,CAAe,CAAf,CADU;AAEfN,eAAK,EAAE,IAAIM,UAAJ,CAAe,CAAf,CAFQ;AAGfL,sBAAY,EAAE;AAHC,SAAjB;AAMA,cAAMM,GAAG,GAAGF,MAAM,IAAI,IAAV,GAAiBD,MAAM,CAACI,GAAxB,GAA8BJ,MAAM,CAACK,GAAP,GAAaJ,MAAvD;;AAEA,eAAOD,MAAM,CAACK,GAAP,GAAaF,GAApB,EAAyB;AACvB,gBAAMG,GAAG,GAAGN,MAAM,CAACN,MAAP,EAAZ;;AAEA,kBAAQY,GAAG,KAAK,CAAhB;AACE,iBAAK,CAAL;AACEnB,iBAAG,CAACK,GAAJ,GAAUQ,MAAM,CAACL,KAAP,EAAV;AACA;;AACF,iBAAK,CAAL;AACER,iBAAG,CAACS,KAAJ,GAAYI,MAAM,CAACL,KAAP,EAAZ;AACA;;AACF,iBAAK,CAAL;AACER,iBAAG,CAACU,YAAJ,GAAmBG,MAAM,CAACF,MAAP,EAAnB;AACA;;AACF;AACEE,oBAAM,CAACO,QAAP,CAAgBD,GAAG,GAAG,CAAtB;AACA;AAZJ;AAcD;;AAED,eAAOnB,GAAP;AACD,OApDe,CAAhB;AAqDD;;AAED,WAAOD,MAAP;AACD,GA1DY;;AA4DAD,kBAAUE,GAAD,IAAqC;AACzD,WAAOL,aAAa,CAACK,GAAD,EAAMF,MAAM,CAACuB,KAAP,EAAN,CAApB;AACD,GAFY;;AAIAvB,kBAAUwB,GAAD,IAA6C;AACjE,WAAO1B,aAAa,CAAC0B,GAAD,EAAMxB,MAAM,CAACuB,KAAP,EAAN,CAApB;AACD,GAFY;AAGd,CAtED,EAAiBvB,MAAM,KAANA,MAAM,MAAvB","names":["encodeMessage","decodeMessage","message","Record","_codec","obj","w","opts","lengthDelimited","fork","key","byteLength","uint32","bytes","value","timeReceived","string","ldelim","reader","length","Uint8Array","end","len","pos","tag","skipType","codec","buf"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\record\\src\\record.ts"],"sourcesContent":["/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime'\nimport type { Codec } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface Record {\n  key: Uint8Array\n  value: Uint8Array\n  timeReceived: string\n}\n\nexport namespace Record {\n  let _codec: Codec<Record>\n\n  export const codec = (): Codec<Record> => {\n    if (_codec == null) {\n      _codec = message<Record>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if ((obj.key != null && obj.key.byteLength > 0)) {\n          w.uint32(10)\n          w.bytes(obj.key)\n        }\n\n        if ((obj.value != null && obj.value.byteLength > 0)) {\n          w.uint32(18)\n          w.bytes(obj.value)\n        }\n\n        if ((obj.timeReceived != null && obj.timeReceived !== '')) {\n          w.uint32(42)\n          w.string(obj.timeReceived)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length) => {\n        const obj: any = {\n          key: new Uint8Array(0),\n          value: new Uint8Array(0),\n          timeReceived: ''\n        }\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1:\n              obj.key = reader.bytes()\n              break\n            case 2:\n              obj.value = reader.bytes()\n              break\n            case 5:\n              obj.timeReceived = reader.string()\n              break\n            default:\n              reader.skipType(tag & 7)\n              break\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<Record>): Uint8Array => {\n    return encodeMessage(obj, Record.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList): Record => {\n    return decodeMessage(buf, Record.codec())\n  }\n}\n"]},"metadata":{},"sourceType":"module"}