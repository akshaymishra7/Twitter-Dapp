{"ast":null,"code":"import 'node-forge/lib/rsa.js'; // @ts-expect-error types are missing\n\nimport forge from 'node-forge/lib/forge.js';\nimport { base64urlToBigInteger } from '../util.js';\n\nfunction convert(key, types) {\n  return types.map(t => base64urlToBigInteger(key[t]));\n}\n\nexport function jwk2priv(key) {\n  return forge.pki.setRsaPrivateKey(...convert(key, ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi']));\n}\nexport function jwk2pub(key) {\n  return forge.pki.setRsaPublicKey(...convert(key, ['n', 'e']));\n}","map":{"version":3,"mappings":"AAAA,OAAO,uBAAP,C,CACA;;AACA,OAAOA,KAAP,MAAkB,yBAAlB;AACA,SAASC,qBAAT,QAAsC,YAAtC;;AAOA,SAASC,OAAT,CAAkBC,GAAlB,EAA4BC,KAA5B,EAA2C;AACzC,SAAOA,KAAK,CAACC,GAAN,CAAUC,CAAC,IAAIL,qBAAqB,CAACE,GAAG,CAACG,CAAD,CAAJ,CAApC,CAAP;AACD;;AAED,OAAM,SAAUC,QAAV,CAAoBJ,GAApB,EAAmC;AACvC,SAAOH,KAAK,CAACQ,GAAN,CAAUC,gBAAV,CAA2B,GAAGP,OAAO,CAACC,GAAD,EAAM,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsC,IAAtC,CAAN,CAArC,CAAP;AACD;AAED,OAAM,SAAUO,OAAV,CAAmBP,GAAnB,EAAkC;AACtC,SAAOH,KAAK,CAACQ,GAAN,CAAUG,eAAV,CAA0B,GAAGT,OAAO,CAACC,GAAD,EAAM,CAAC,GAAD,EAAM,GAAN,CAAN,CAApC,CAAP;AACD","names":["forge","base64urlToBigInteger","convert","key","types","map","t","jwk2priv","pki","setRsaPrivateKey","jwk2pub","setRsaPublicKey"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\crypto\\src\\keys\\jwk2pem.ts"],"sourcesContent":["import 'node-forge/lib/rsa.js'\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js'\nimport { base64urlToBigInteger } from '../util.js'\n\nexport interface JWK {\n  encrypt: (msg: string) => string\n  decrypt: (msg: string) => string\n}\n\nfunction convert (key: any, types: string[]): Array<typeof forge.jsbn.BigInteger> {\n  return types.map(t => base64urlToBigInteger(key[t]))\n}\n\nexport function jwk2priv (key: JsonWebKey): JWK {\n  return forge.pki.setRsaPrivateKey(...convert(key, ['n', 'e', 'd', 'p', 'q', 'dp', 'dq', 'qi']))\n}\n\nexport function jwk2pub (key: JsonWebKey): JWK {\n  return forge.pki.setRsaPublicKey(...convert(key, ['n', 'e']))\n}\n"]},"metadata":{},"sourceType":"module"}