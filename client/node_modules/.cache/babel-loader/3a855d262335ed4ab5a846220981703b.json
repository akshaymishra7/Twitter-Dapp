{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { UnixFS } from 'ipfs-unixfs';\nimport * as dagPB from '@ipld/dag-pb';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { MFS_ROOT_KEY } from '../../../utils.js';\nconst log = logger('ipfs:mfs:utils:with-mfs-root');\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\n\nexport async function loadMfsRoot(context, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n      name: 'Aborted'\n    });\n  } // Open the repo if it's been closed\n\n\n  await context.repo.datastore.open(); // Load the MFS root CID\n\n  let cid;\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY);\n    cid = CID.decode(buf);\n  } catch (\n  /** @type {any} */\n  err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err;\n    }\n\n    log('Creating new MFS root');\n    const buf = dagPB.encode({\n      Data: new UnixFS({\n        type: 'directory'\n      }).marshal(),\n      Links: []\n    });\n    const hash = await sha256.digest(buf);\n    cid = CID.createV0(hash);\n    await context.repo.blocks.put(cid, buf);\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n        name: 'Aborted'\n      });\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes);\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`);\n  return cid;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/files/utils/with-mfs-root.js"],"names":["CID","UnixFS","dagPB","sha256","logger","errCode","MFS_ROOT_KEY","log","loadMfsRoot","context","options","signal","aborted","Error","name","repo","datastore","open","cid","buf","get","decode","err","code","encode","Data","type","marshal","Links","hash","digest","createV0","blocks","put","bytes"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AAEA,MAAMC,GAAG,GAAGH,MAAM,CAAC,8BAAD,CAAlB;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,eAAeI,WAAf,CAA4BC,OAA5B,EAAqCC,OAArC,EAA8C;AACnD,MAAIA,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OAAhD,EAAyD;AACvD,UAAMP,OAAO,CAAC,IAAIQ,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;AAAEC,MAAAA,IAAI,EAAE;AAAR,KAA9C,CAAb;AACD,GAHkD,CAKnD;;;AACA,QAAML,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBC,IAAvB,EAAN,CANmD,CAQnD;;AACA,MAAIC,GAAJ;;AAEA,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBI,GAAvB,CAA2Bd,YAA3B,CAAlB;AAEAY,IAAAA,GAAG,GAAGlB,GAAG,CAACqB,MAAJ,CAAWF,GAAX,CAAN;AACD,GAJD,CAIE;AAAO;AAAmBG,EAAAA,GAA1B,EAA+B;AAC/B,QAAIA,GAAG,CAACC,IAAJ,KAAa,eAAjB,EAAkC;AAChC,YAAMD,GAAN;AACD;;AAEDf,IAAAA,GAAG,CAAC,uBAAD,CAAH;AACA,UAAMY,GAAG,GAAGjB,KAAK,CAACsB,MAAN,CAAa;AACvBC,MAAAA,IAAI,EAAE,IAAIxB,MAAJ,CAAW;AAAEyB,QAAAA,IAAI,EAAE;AAAR,OAAX,EAAkCC,OAAlC,EADiB;AAEvBC,MAAAA,KAAK,EAAE;AAFgB,KAAb,CAAZ;AAIA,UAAMC,IAAI,GAAG,MAAM1B,MAAM,CAAC2B,MAAP,CAAcX,GAAd,CAAnB;AACAD,IAAAA,GAAG,GAAGlB,GAAG,CAAC+B,QAAJ,CAAaF,IAAb,CAAN;AACA,UAAMpB,OAAO,CAACM,IAAR,CAAaiB,MAAb,CAAoBC,GAApB,CAAwBf,GAAxB,EAA6BC,GAA7B,CAAN;;AAEA,QAAIT,OAAO,IAAIA,OAAO,CAACC,MAAnB,IAA6BD,OAAO,CAACC,MAAR,CAAeC,OAAhD,EAAyD;AACvD,YAAMP,OAAO,CAAC,IAAIQ,KAAJ,CAAU,iBAAV,CAAD,EAA+B,aAA/B,EAA8C;AAAEC,QAAAA,IAAI,EAAE;AAAR,OAA9C,CAAb;AACD;;AAED,UAAML,OAAO,CAACM,IAAR,CAAaC,SAAb,CAAuBiB,GAAvB,CAA2B3B,YAA3B,EAAyCY,GAAG,CAACgB,KAA7C,CAAN;AACD;;AAED3B,EAAAA,GAAG,CAAE,yBAAwBW,GAAI,EAA9B,CAAH;AAEA,SAAOA,GAAP;AACD","sourcesContent":["import { CID } from 'multiformats/cid'\nimport { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { MFS_ROOT_KEY } from '../../../utils.js'\n\nconst log = logger('ipfs:mfs:utils:with-mfs-root')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n */\n\n/**\n * @param {MfsContext} context\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function loadMfsRoot (context, options) {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n  }\n\n  // Open the repo if it's been closed\n  await context.repo.datastore.open()\n\n  // Load the MFS root CID\n  let cid\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY)\n\n    cid = CID.decode(buf)\n  } catch (/** @type {any} */ err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err\n    }\n\n    log('Creating new MFS root')\n    const buf = dagPB.encode({\n      Data: new UnixFS({ type: 'directory' }).marshal(),\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    cid = CID.createV0(hash)\n    await context.repo.blocks.put(cid, buf)\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', { name: 'Aborted' })\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes)\n  }\n\n  log(`Loaded MFS root /ipfs/${cid}`)\n\n  return cid\n}\n"]},"metadata":{},"sourceType":"module"}