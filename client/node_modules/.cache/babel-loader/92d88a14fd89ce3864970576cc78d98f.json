{"ast":null,"code":"import debug from 'debug';\nimport { CONFIG_KEY, VERSION_KEY } from '../utils.js';\nimport { MissingRepoOptionsError } from '../errors.js';\nconst log = debug('ipfs:repo:migrator:repo:init');\n/**\n * @param {import('../types').Backends} backends\n */\n\nexport async function isRepoInitialized(backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n  }\n\n  const root = backends.root;\n\n  try {\n    await root.open();\n    const versionCheck = await root.has(VERSION_KEY);\n    const configCheck = await root.has(CONFIG_KEY);\n\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`);\n      log(`Config entry present: ${configCheck}`);\n      return false;\n    }\n\n    return true;\n  } catch (\n  /** @type {any} */\n  e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message);\n    return false;\n  } finally {\n    if (root !== undefined) {\n      try {\n        await root.close();\n      } catch {}\n    }\n  }\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-repo-migrations/src/repo/init.js"],"names":["debug","CONFIG_KEY","VERSION_KEY","MissingRepoOptionsError","log","isRepoInitialized","backends","root","open","versionCheck","has","configCheck","e","message","undefined","close"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,aAAxC;AACA,SAASC,uBAAT,QAAwC,cAAxC;AAEA,MAAMC,GAAG,GAAGJ,KAAK,CAAC,8BAAD,CAAjB;AAEA;AACA;AACA;;AACA,OAAO,eAAeK,iBAAf,CAAkCC,QAAlC,EAA4C;AACjD,MAAI,CAACA,QAAL,EAAe;AACb,UAAM,IAAIH,uBAAJ,CAA4B,qDAA5B,CAAN;AACD;;AAED,QAAMI,IAAI,GAAGD,QAAQ,CAACC,IAAtB;;AAEA,MAAI;AACF,UAAMA,IAAI,CAACC,IAAL,EAAN;AACA,UAAMC,YAAY,GAAG,MAAMF,IAAI,CAACG,GAAL,CAASR,WAAT,CAA3B;AACA,UAAMS,WAAW,GAAG,MAAMJ,IAAI,CAACG,GAAL,CAAST,UAAT,CAA1B;;AACA,QAAI,CAACQ,YAAD,IAAiB,CAACE,WAAtB,EAAmC;AACjCP,MAAAA,GAAG,CAAE,0BAAyBK,YAAa,EAAxC,CAAH;AACAL,MAAAA,GAAG,CAAE,yBAAwBO,WAAY,EAAtC,CAAH;AACA,aAAO,KAAP;AACD;;AAED,WAAO,IAAP;AACD,GAXD,CAWE;AAAO;AAAmBC,EAAAA,CAA1B,EAA6B;AAC7BR,IAAAA,GAAG,CAAC,6DAA6DQ,CAAC,CAACC,OAAhE,CAAH;AACA,WAAO,KAAP;AACD,GAdD,SAcU;AACR,QAAIN,IAAI,KAAKO,SAAb,EAAwB;AACtB,UAAI;AACF,cAAMP,IAAI,CAACQ,KAAL,EAAN;AACD,OAFD,CAEE,MAAM,CAAE;AACX;AACF;AACF","sourcesContent":["\nimport debug from 'debug'\nimport { CONFIG_KEY, VERSION_KEY } from '../utils.js'\nimport { MissingRepoOptionsError } from '../errors.js'\n\nconst log = debug('ipfs:repo:migrator:repo:init')\n\n/**\n * @param {import('../types').Backends} backends\n */\nexport async function isRepoInitialized (backends) {\n  if (!backends) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo')\n  }\n\n  const root = backends.root\n\n  try {\n    await root.open()\n    const versionCheck = await root.has(VERSION_KEY)\n    const configCheck = await root.has(CONFIG_KEY)\n    if (!versionCheck || !configCheck) {\n      log(`Version entry present: ${versionCheck}`)\n      log(`Config entry present: ${configCheck}`)\n      return false\n    }\n\n    return true\n  } catch (/** @type {any} */ e) {\n    log('While checking if repo is initialized error was thrown: ' + e.message)\n    return false\n  } finally {\n    if (root !== undefined) {\n      try {\n        await root.close()\n      } catch {}\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}