{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\nexport function createWantlistForPeer(_ref) {\n  let {\n    network\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer(peerId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      bitswap\n    } = await network.use(options);\n    const list = bitswap.wantlistForPeer(peerId);\n    return Array.from(list).map(e => e[1].cid);\n  }\n\n  return withTimeoutOption(wantlistForPeer);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/bitswap/wantlist-for-peer.js"],"names":["withTimeoutOption","createWantlistForPeer","network","wantlistForPeer","peerId","options","bitswap","use","list","Array","from","map","e","cid"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qCAAlC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,qBAAT,OAA6C;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;;AAClD;AACF;AACA;AACE,iBAAeC,eAAf,CAAgCC,MAAhC,EAAsD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACpD,UAAM;AAAEC,MAAAA;AAAF,QAAc,MAAMJ,OAAO,CAACK,GAAR,CAAYF,OAAZ,CAA1B;AACA,UAAMG,IAAI,GAAGF,OAAO,CAACH,eAAR,CAAwBC,MAAxB,CAAb;AAEA,WAAOK,KAAK,CAACC,IAAN,CAAWF,IAAX,EAAiBG,GAAjB,CAAqBC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAD,CAAKC,GAA/B,CAAP;AACD;;AAED,SAAOb,iBAAiB,CAACG,eAAD,CAAxB;AACD","sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createWantlistForPeer ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/bitswap').API<{}>[\"wantlistForPeer\"]}\n   */\n  async function wantlistForPeer (peerId, options = {}) {\n    const { bitswap } = await network.use(options)\n    const list = bitswap.wantlistForPeer(peerId)\n\n    return Array.from(list).map(e => e[1].cid)\n  }\n\n  return withTimeoutOption(wantlistForPeer)\n}\n"]},"metadata":{},"sourceType":"module"}