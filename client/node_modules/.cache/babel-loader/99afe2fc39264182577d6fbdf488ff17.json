{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshay Mishra\\\\OneDrive\\\\Desktop\\\\twitter-clone-dapp\\\\client\\\\src\\\\TweetBox.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./TweetBox.css\";\nimport Avatar from 'avataaars';\nimport { generateRandomAvatarOptions } from './avatar';\nimport { Button } from \"@material-ui/core\";\nimport axios from 'axios';\nimport { TwitterContractAddress } from './config.js';\nimport { ethers } from 'ethers';\nimport Twitter from './utils/TwitterContract.json';\nimport { NFTStorage, File } from 'nft.storage'; // import * as IPFS from 'ipfs-core'\n// const ipfs = await IPFS.create()\n// const { cid } = await ipfs.add('Hello world')\n// console.log(cid);\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TweetBox() {\n  _s();\n\n  const [tweetMessage, setTweetMessage] = useState(\"\");\n  const [tweetImage, setTweetImage] = useState(\"\");\n  const [avatarOptions, setAvatarOptions] = useState(\"\");\n  const [filePath, setFilePath] = React.useState(null);\n  const [ipfsimage, setIpfsimage] = useState(null);\n  const NFT_STORAGE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGM0QThkRENiMGM1MjQwQTJDYjdBMzIwZGRGMDg5QUJhMERDNDVDZkYiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY2MjE5NTgzMzEwMywibmFtZSI6InRwZyJ9.ncleHk0ziyvHC-8RSKo07nxdgJ9OidmguX_YzX-L0p4';\n\n  const storeNFT = async (filePath, name, description) => {\n    console.log(filePath instanceof File);\n    const nftstorage = new NFTStorage({\n      token: NFT_STORAGE_KEY\n    });\n    var res = await nftstorage.store({\n      image: filePath,\n      name: name,\n      description: description,\n      atttributes: [{\n        \"trait_type\": trait,\n        \"value\": value\n      }]\n    });\n    console.log(res);\n    setUrl(res.url);\n    setIpfsimage(\"https://ipfs.io/ipfs/\" + res.data.image.href.slice(7));\n  };\n\n  const addTweet = async () => {\n    let tweet = {\n      'tweetText': tweetMessage,\n      'isDeleted': false\n    };\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let twitterTx = await TwitterContract.addTweet(tweet.tweetText, tweet.isDeleted);\n        console.log(twitterTx);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(\"Error submitting new Tweet\", error);\n    }\n  };\n\n  const sendTweet = e => {\n    e.preventDefault();\n    addTweet();\n    setTweetMessage(\"\");\n    setTweetImage(\"\");\n  }; // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(() => {\n    let avatar = generateRandomAvatarOptions();\n    setAvatarOptions(avatar);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tweetBox\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tweetBox__input\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          style: {\n            width: '100px',\n            height: '100px'\n          },\n          avatarStyle: \"Circle\",\n          ...avatarOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setTweetMessage(e.target.value),\n          value: tweetMessage,\n          placeholder: \"What's happening?\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: tweetImage,\n        onChange: e => setTweetImage(e.target.value),\n        className: \"tweetBox__imageInput\",\n        placeholder: \"Optional: Enter image URL\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: sendTweet,\n        type: \"submit\",\n        className: \"tweetBox__tweetButton\",\n        children: \"Tweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 93,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TweetBox, \"krQH90xKBJWBAcNw3RQsjFhXuKE=\");\n\n_c = TweetBox;\nexport default TweetBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetBox\");","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/client/src/TweetBox.jsx"],"names":["React","useState","useEffect","Avatar","generateRandomAvatarOptions","Button","axios","TwitterContractAddress","ethers","Twitter","NFTStorage","File","TweetBox","tweetMessage","setTweetMessage","tweetImage","setTweetImage","avatarOptions","setAvatarOptions","filePath","setFilePath","ipfsimage","setIpfsimage","NFT_STORAGE_KEY","storeNFT","name","description","console","log","nftstorage","token","res","store","image","atttributes","trait","value","setUrl","url","data","href","slice","addTweet","tweet","ethereum","window","provider","providers","Web3Provider","signer","getSigner","TwitterContract","Contract","abi","twitterTx","tweetText","isDeleted","error","sendTweet","e","preventDefault","avatar","width","height","target"],"mappings":"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","sourcesContent":["import React, { useState , useEffect } from \"react\";\r\nimport \"./TweetBox.css\";\r\nimport Avatar from 'avataaars';\r\nimport { generateRandomAvatarOptions } from './avatar';\r\nimport { Button } from \"@material-ui/core\";\r\nimport axios from 'axios';\r\nimport { TwitterContractAddress } from './config.js';\r\nimport {ethers} from 'ethers';\r\nimport Twitter from './utils/TwitterContract.json'\r\n\r\nimport { NFTStorage, File } from 'nft.storage'\r\n\r\n// import * as IPFS from 'ipfs-core'\r\n\r\n// const ipfs = await IPFS.create()\r\n// const { cid } = await ipfs.add('Hello world')\r\n// console.log(cid);\r\n\r\nfunction TweetBox() {\r\n  const [tweetMessage, setTweetMessage] = useState(\"\");\r\n  const [tweetImage, setTweetImage] = useState(\"\");\r\n  const [avatarOptions, setAvatarOptions] = useState(\"\");\r\n\r\n  const [filePath, setFilePath] = React.useState(null);\r\n  const[ipfsimage,setIpfsimage]=useState(null);\r\n  const NFT_STORAGE_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkaWQ6ZXRocjoweGM0QThkRENiMGM1MjQwQTJDYjdBMzIwZGRGMDg5QUJhMERDNDVDZkYiLCJpc3MiOiJuZnQtc3RvcmFnZSIsImlhdCI6MTY2MjE5NTgzMzEwMywibmFtZSI6InRwZyJ9.ncleHk0ziyvHC-8RSKo07nxdgJ9OidmguX_YzX-L0p4'\r\n  const storeNFT=async(filePath,name,description)=>{\r\n\r\n    console.log(filePath instanceof File)\r\n    const nftstorage = new NFTStorage({ token: NFT_STORAGE_KEY })\r\n\r\n    var res = await nftstorage.store({\r\n        image : filePath,\r\n        name : name,\r\n        description : description,\r\n        atttributes : [{\r\n            \"trait_type\" : trait,\r\n            \"value\": value\r\n        }]\r\n    })\r\n\r\n    console.log(res)\r\n    setUrl(res.url)\r\n    setIpfsimage(\"https://ipfs.io/ipfs/\"+(res.data.image.href).slice(7))\r\n}\r\n\r\n\r\n  const addTweet = async () => {\r\n    let tweet = {\r\n      'tweetText': tweetMessage,\r\n      'isDeleted': false\r\n    };\r\n\r\n    try {\r\n      const {ethereum} = window\r\n\r\n      if(ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const TwitterContract = new ethers.Contract(\r\n          TwitterContractAddress,\r\n          Twitter.abi,\r\n          signer\r\n        )\r\n\r\n        let twitterTx = await TwitterContract.addTweet(tweet.tweetText, tweet.isDeleted);\r\n\r\n        console.log(twitterTx);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch(error) {\r\n      console.log(\"Error submitting new Tweet\", error);\r\n    }\r\n  }\r\n\r\n  const sendTweet = (e) => {\r\n    e.preventDefault();\r\n\r\n    addTweet();\r\n\r\n    setTweetMessage(\"\");\r\n    setTweetImage(\"\");\r\n  };\r\n\r\n  // Similar to componentDidMount and componentDidUpdate:\r\n  useEffect(() => {\r\n    let avatar = generateRandomAvatarOptions();\r\n    setAvatarOptions(avatar);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tweetBox\">\r\n      <form>\r\n        <div className=\"tweetBox__input\">\r\n          <Avatar\r\n            style={{ width: '100px', height: '100px' }}\r\n            avatarStyle='Circle'\r\n            {...avatarOptions }\r\n          />\r\n          <input\r\n            onChange={(e) => setTweetMessage(e.target.value)}\r\n            value={tweetMessage}\r\n            placeholder=\"What's happening?\"\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <input\r\n          value={tweetImage}\r\n          onChange={(e) => setTweetImage(e.target.value)}\r\n          className=\"tweetBox__imageInput\"\r\n          placeholder=\"Optional: Enter image URL\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <Button\r\n          onClick={sendTweet}\r\n          type=\"submit\"\r\n          className=\"tweetBox__tweetButton\"\r\n        >\r\n          Tweet\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetBox;\r\n"]},"metadata":{},"sourceType":"module"}