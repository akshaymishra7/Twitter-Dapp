{"ast":null,"code":"import { setMaxListeners } from 'events';\nimport take from 'it-take';\nimport length from 'it-length';\nimport { QUERY_SELF_INTERVAL, QUERY_SELF_TIMEOUT, K } from './constants.js';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { anySignal } from 'any-signal';\nimport { logger } from '@libp2p/logger';\nimport { pipe } from 'it-pipe';\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\n\nexport class QuerySelf {\n  constructor(components, init) {\n    const {\n      peerRouting,\n      lan,\n      count,\n      interval,\n      queryTimeout\n    } = init;\n    this.components = components;\n    this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:query-self`);\n    this.running = false;\n    this.peerRouting = peerRouting;\n    this.count = count ?? K;\n    this.interval = interval ?? QUERY_SELF_INTERVAL;\n    this.queryTimeout = queryTimeout ?? QUERY_SELF_TIMEOUT;\n  }\n\n  isStarted() {\n    return this.running;\n  }\n\n  async start() {\n    if (this.running) {\n      return;\n    }\n\n    this.running = true;\n\n    this._querySelf();\n  }\n\n  async stop() {\n    this.running = false;\n\n    if (this.timeoutId != null) {\n      clearTimeout(this.timeoutId);\n    }\n\n    if (this.controller != null) {\n      this.controller.abort();\n    }\n  }\n\n  _querySelf() {\n    Promise.resolve().then(async () => {\n      const timeoutController = new TimeoutController(this.queryTimeout);\n\n      try {\n        this.controller = new AbortController();\n        const signal = anySignal([this.controller.signal, timeoutController.signal]); // this controller will get used for lots of dial attempts so make sure we don't cause warnings to be logged\n\n        try {\n          if (setMaxListeners != null) {\n            setMaxListeners(Infinity, signal);\n          }\n        } catch {} // fails on node < 15.4\n\n\n        const found = await pipe(this.peerRouting.getClosestPeers(this.components.peerId.toBytes(), {\n          signal\n        }), source => take(source, this.count), async source => await length(source));\n        this.log('query ran successfully - found %d peers', found);\n      } catch (err) {\n        this.log('query error', err);\n      } finally {\n        this.timeoutId = setTimeout(this._querySelf.bind(this), this.interval);\n        timeoutController.clear();\n      }\n    }).catch(err => {\n      this.log('query error', err);\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["setMaxListeners","take","length","QUERY_SELF_INTERVAL","QUERY_SELF_TIMEOUT","K","TimeoutController","anySignal","logger","pipe","QuerySelf","constructor","components","init","peerRouting","lan","count","interval","queryTimeout","log","running","isStarted","start","_querySelf","stop","timeoutId","clearTimeout","controller","abort","Promise","resolve","then","timeoutController","AbortController","signal","Infinity","found","getClosestPeers","peerId","toBytes","source","err","setTimeout","bind","clear","catch"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\kad-dht\\src\\query-self.ts"],"sourcesContent":["import { setMaxListeners } from 'events'\nimport take from 'it-take'\nimport length from 'it-length'\nimport { QUERY_SELF_INTERVAL, QUERY_SELF_TIMEOUT, K } from './constants.js'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { anySignal } from 'any-signal'\nimport { logger, Logger } from '@libp2p/logger'\nimport type { PeerRouting } from './peer-routing/index.js'\nimport type { Startable } from '@libp2p/interfaces/startable'\nimport { pipe } from 'it-pipe'\nimport type { KadDHTComponents } from './index.js'\n\nexport interface QuerySelfInit {\n  lan: boolean\n  peerRouting: PeerRouting\n  count?: number\n  interval?: number\n  queryTimeout?: number\n}\n\n/**\n * Receives notifications of new peers joining the network that support the DHT protocol\n */\nexport class QuerySelf implements Startable {\n  private readonly log: Logger\n  private readonly components: KadDHTComponents\n  private readonly peerRouting: PeerRouting\n  private readonly count: number\n  private readonly interval: number\n  private readonly queryTimeout: number\n  private running: boolean\n  private timeoutId?: NodeJS.Timer\n  private controller?: AbortController\n\n  constructor (components: KadDHTComponents, init: QuerySelfInit) {\n    const { peerRouting, lan, count, interval, queryTimeout } = init\n\n    this.components = components\n    this.log = logger(`libp2p:kad-dht:${lan ? 'lan' : 'wan'}:query-self`)\n    this.running = false\n    this.peerRouting = peerRouting\n    this.count = count ?? K\n    this.interval = interval ?? QUERY_SELF_INTERVAL\n    this.queryTimeout = queryTimeout ?? QUERY_SELF_TIMEOUT\n  }\n\n  isStarted (): boolean {\n    return this.running\n  }\n\n  async start (): Promise<void> {\n    if (this.running) {\n      return\n    }\n\n    this.running = true\n    this._querySelf()\n  }\n\n  async stop (): Promise<void> {\n    this.running = false\n\n    if (this.timeoutId != null) {\n      clearTimeout(this.timeoutId)\n    }\n\n    if (this.controller != null) {\n      this.controller.abort()\n    }\n  }\n\n  _querySelf (): void {\n    Promise.resolve().then(async () => {\n      const timeoutController = new TimeoutController(this.queryTimeout)\n\n      try {\n        this.controller = new AbortController()\n        const signal = anySignal([this.controller.signal, timeoutController.signal])\n        // this controller will get used for lots of dial attempts so make sure we don't cause warnings to be logged\n        try {\n          if (setMaxListeners != null) {\n            setMaxListeners(Infinity, signal)\n          }\n        } catch {} // fails on node < 15.4\n        const found = await pipe(\n          this.peerRouting.getClosestPeers(this.components.peerId.toBytes(), {\n            signal\n          }),\n          (source) => take(source, this.count),\n          async (source) => await length(source)\n        )\n\n        this.log('query ran successfully - found %d peers', found)\n      } catch (err: any) {\n        this.log('query error', err)\n      } finally {\n        this.timeoutId = setTimeout(this._querySelf.bind(this), this.interval)\n        timeoutController.clear()\n      }\n    }).catch(err => {\n      this.log('query error', err)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}