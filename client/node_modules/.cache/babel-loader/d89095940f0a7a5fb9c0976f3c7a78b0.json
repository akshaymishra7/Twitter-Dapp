{"ast":null,"code":"/**\n * Adds types to the EventTarget class. Hopefully this won't be necessary forever.\n *\n * https://github.com/microsoft/TypeScript/issues/28357\n * https://github.com/microsoft/TypeScript/issues/43477\n * https://github.com/microsoft/TypeScript/issues/299\n * etc\n */\nexport class EventEmitter extends EventTarget {\n  #listeners = new Map();\n\n  listenerCount(type) {\n    const listeners = this.#listeners.get(type);\n\n    if (listeners == null) {\n      return 0;\n    }\n\n    return listeners.length;\n  }\n\n  addEventListener(type, listener, options) {\n    super.addEventListener(type, listener, options);\n    let list = this.#listeners.get(type);\n\n    if (list == null) {\n      list = [];\n      this.#listeners.set(type, list);\n    }\n\n    list.push({\n      callback: listener,\n      once: (options !== true && options !== false && options?.once) ?? false\n    });\n  }\n\n  removeEventListener(type, listener, options) {\n    super.removeEventListener(type.toString(), listener ?? null, options);\n    let list = this.#listeners.get(type);\n\n    if (list == null) {\n      return;\n    }\n\n    list = list.filter(_ref => {\n      let {\n        callback\n      } = _ref;\n      return callback !== listener;\n    });\n    this.#listeners.set(type, list);\n  }\n\n  dispatchEvent(event) {\n    const result = super.dispatchEvent(event);\n    let list = this.#listeners.get(event.type);\n\n    if (list == null) {\n      return result;\n    }\n\n    list = list.filter(_ref2 => {\n      let {\n        once\n      } = _ref2;\n      return !once;\n    });\n    this.#listeners.set(event.type, list);\n    return result;\n  }\n\n  safeDispatchEvent(type, detail) {\n    return this.dispatchEvent(new CustomEvent(type, detail));\n  }\n\n}\n/**\n * CustomEvent is a standard event but it's not supported by node.\n *\n * Remove this when https://github.com/nodejs/node/issues/40678 is closed.\n *\n * Ref: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n */\n\nclass CustomEventPolyfill extends Event {\n  /** Returns any custom data event was created with. Typically used for synthetic events. */\n  detail;\n\n  constructor(message, data) {\n    super(message, data); // @ts-expect-error could be undefined\n\n    this.detail = data?.detail;\n  }\n\n}\n\nexport const CustomEvent = globalThis.CustomEvent ?? CustomEventPolyfill;","map":{"version":3,"mappings":"AAUA;;;;;;;;AAQA,OAAM,MAAOA,YAAP,SAAkEC,WAAlE,CAA6E;AACjF,eAAa,IAAIC,GAAJ,EAAb;;AAEAC,eAAa,CAAEC,IAAF,EAAc;AACzB,UAAMC,SAAS,GAAG,KAAK,UAAL,CAAgBC,GAAhB,CAAoBF,IAApB,CAAlB;;AAEA,QAAIC,SAAS,IAAI,IAAjB,EAAuB;AACrB,aAAO,CAAP;AACD;;AAED,WAAOA,SAAS,CAACE,MAAjB;AACD;;AAGDC,kBAAgB,CAAEJ,IAAF,EAAgBK,QAAhB,EAA+CC,OAA/C,EAA0F;AACxG,UAAMF,gBAAN,CAAuBJ,IAAvB,EAA6BK,QAA7B,EAAuCC,OAAvC;AAEA,QAAIC,IAAI,GAAG,KAAK,UAAL,CAAgBL,GAAhB,CAAoBF,IAApB,CAAX;;AAEA,QAAIO,IAAI,IAAI,IAAZ,EAAkB;AAChBA,UAAI,GAAG,EAAP;AACA,WAAK,UAAL,CAAgBC,GAAhB,CAAoBR,IAApB,EAA0BO,IAA1B;AACD;;AAEDA,QAAI,CAACE,IAAL,CAAU;AACRC,cAAQ,EAAEL,QADF;AAERM,UAAI,EAAE,CAACL,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAK,KAAhC,IAAyCA,OAAO,EAAEK,IAAnD,KAA4D;AAF1D,KAAV;AAID;;AAGDC,qBAAmB,CAAEZ,IAAF,EAAgBK,QAAhB,EAAgDC,OAAhD,EAAwF;AACzG,UAAMM,mBAAN,CAA0BZ,IAAI,CAACa,QAAL,EAA1B,EAA2CR,QAAQ,IAAI,IAAvD,EAA6DC,OAA7D;AAEA,QAAIC,IAAI,GAAG,KAAK,UAAL,CAAgBL,GAAhB,CAAoBF,IAApB,CAAX;;AAEA,QAAIO,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACD;;AAEDA,QAAI,GAAGA,IAAI,CAACO,MAAL,CAAY;AAAA,UAAC;AAAEJ;AAAF,OAAD;AAAA,aAAkBA,QAAQ,KAAKL,QAA/B;AAAA,KAAZ,CAAP;AACA,SAAK,UAAL,CAAgBG,GAAhB,CAAoBR,IAApB,EAA0BO,IAA1B;AACD;;AAEDQ,eAAa,CAAEC,KAAF,EAAc;AACzB,UAAMC,MAAM,GAAG,MAAMF,aAAN,CAAoBC,KAApB,CAAf;AAEA,QAAIT,IAAI,GAAG,KAAK,UAAL,CAAgBL,GAAhB,CAAoBc,KAAK,CAAChB,IAA1B,CAAX;;AAEA,QAAIO,IAAI,IAAI,IAAZ,EAAkB;AAChB,aAAOU,MAAP;AACD;;AAEDV,QAAI,GAAGA,IAAI,CAACO,MAAL,CAAY;AAAA,UAAC;AAAEH;AAAF,OAAD;AAAA,aAAc,CAACA,IAAf;AAAA,KAAZ,CAAP;AACA,SAAK,UAAL,CAAgBH,GAAhB,CAAoBQ,KAAK,CAAChB,IAA1B,EAAgCO,IAAhC;AAEA,WAAOU,MAAP;AACD;;AAEDC,mBAAiB,CAASlB,IAAT,EAA+BmB,MAA/B,EAA8D;AAC7E,WAAO,KAAKJ,aAAL,CAAmB,IAAIK,WAAJ,CAAwBpB,IAAxB,EAAwCmB,MAAxC,CAAnB,CAAP;AACD;;AA7DgF;AAgEnF;;;;;;;;AAOA,MAAME,mBAAN,SAA2CC,KAA3C,CAAgD;AAC9C;AACOH,QAAM;;AAEbI,cAAaC,OAAb,EAA8BC,IAA9B,EAA8D;AAC5D,UAAMD,OAAN,EAAeC,IAAf,EAD4D,CAE5D;;AACA,SAAKN,MAAL,GAAcM,IAAI,EAAEN,MAApB;AACD;;AAR6C;;AAWhD,OAAO,MAAMC,WAAW,GAAGM,UAAU,CAACN,WAAX,IAA0BC,mBAA9C","names":["EventEmitter","EventTarget","Map","listenerCount","type","listeners","get","length","addEventListener","listener","options","list","set","push","callback","once","removeEventListener","toString","filter","dispatchEvent","event","result","safeDispatchEvent","detail","CustomEvent","CustomEventPolyfill","Event","constructor","message","data","globalThis"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\interfaces\\src\\events.ts"],"sourcesContent":["\nexport interface EventCallback<EventType> { (evt: EventType): void }\nexport interface EventObject<EventType> { handleEvent: EventCallback<EventType> }\nexport type EventHandler<EventType> = EventCallback<EventType> | EventObject<EventType>\n\ninterface Listener {\n  once: boolean\n  callback: any\n}\n\n/**\n * Adds types to the EventTarget class. Hopefully this won't be necessary forever.\n *\n * https://github.com/microsoft/TypeScript/issues/28357\n * https://github.com/microsoft/TypeScript/issues/43477\n * https://github.com/microsoft/TypeScript/issues/299\n * etc\n */\nexport class EventEmitter<EventMap extends Record<string, any>> extends EventTarget {\n  #listeners = new Map<any, Listener[]>()\n\n  listenerCount (type: string): number {\n    const listeners = this.#listeners.get(type)\n\n    if (listeners == null) {\n      return 0\n    }\n\n    return listeners.length\n  }\n\n  addEventListener<K extends keyof EventMap>(type: K, listener: EventHandler<EventMap[K]> | null, options?: boolean | AddEventListenerOptions): void\n  addEventListener (type: string, listener: EventHandler<Event>, options?: boolean | AddEventListenerOptions): void {\n    super.addEventListener(type, listener, options)\n\n    let list = this.#listeners.get(type)\n\n    if (list == null) {\n      list = []\n      this.#listeners.set(type, list)\n    }\n\n    list.push({\n      callback: listener,\n      once: (options !== true && options !== false && options?.once) ?? false\n    })\n  }\n\n  removeEventListener<K extends keyof EventMap>(type: K, listener?: EventHandler<EventMap[K]> | null, options?: boolean | EventListenerOptions): void\n  removeEventListener (type: string, listener?: EventHandler<Event>, options?: boolean | EventListenerOptions): void {\n    super.removeEventListener(type.toString(), listener ?? null, options)\n\n    let list = this.#listeners.get(type)\n\n    if (list == null) {\n      return\n    }\n\n    list = list.filter(({ callback }) => callback !== listener)\n    this.#listeners.set(type, list)\n  }\n\n  dispatchEvent (event: Event): boolean {\n    const result = super.dispatchEvent(event)\n\n    let list = this.#listeners.get(event.type)\n\n    if (list == null) {\n      return result\n    }\n\n    list = list.filter(({ once }) => !once)\n    this.#listeners.set(event.type, list)\n\n    return result\n  }\n\n  safeDispatchEvent<Detail>(type: keyof EventMap, detail: CustomEventInit<Detail>): boolean {\n    return this.dispatchEvent(new CustomEvent<Detail>(type as string, detail))\n  }\n}\n\n/**\n * CustomEvent is a standard event but it's not supported by node.\n *\n * Remove this when https://github.com/nodejs/node/issues/40678 is closed.\n *\n * Ref: https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent\n */\nclass CustomEventPolyfill<T = any> extends Event {\n  /** Returns any custom data event was created with. Typically used for synthetic events. */\n  public detail: T\n\n  constructor (message: string, data?: EventInit & { detail: T }) {\n    super(message, data)\n    // @ts-expect-error could be undefined\n    this.detail = data?.detail\n  }\n}\n\nexport const CustomEvent = globalThis.CustomEvent ?? CustomEventPolyfill\n"]},"metadata":{},"sourceType":"module"}