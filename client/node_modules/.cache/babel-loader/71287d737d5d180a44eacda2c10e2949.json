{"ast":null,"code":"import { KadDHT as SingleKadDHT } from './kad-dht.js';\nimport { DualKadDHT } from './dual-kad-dht.js';\n\nclass KadDHT extends DualKadDHT {\n  constructor(components, init) {\n    super(components, new SingleKadDHT(components, {\n      protocolPrefix: '/ipfs',\n      ...init,\n      lan: false\n    }), new SingleKadDHT(components, {\n      protocolPrefix: '/ipfs',\n      ...init,\n      clientMode: false,\n      lan: true\n    }));\n  }\n\n}\n\nexport function kadDHT(init) {\n  return components => new KadDHT(components, init);\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAM,IAAIC,YAAnB,QAAuC,cAAvC;AACA,SAASC,UAAT,QAA2B,mBAA3B;;AAiFA,MAAMF,MAAN,SAAqBE,UAArB,CAA+B;AAC7BC,cAAaC,UAAb,EAA2CC,IAA3C,EAA4D;AAC1D,UAAMD,UAAN,EAAkB,IAAIH,YAAJ,CAAiBG,UAAjB,EAA6B;AAC7CE,oBAAc,EAAE,OAD6B;AAE7C,SAAGD,IAF0C;AAG7CE,SAAG,EAAE;AAHwC,KAA7B,CAAlB,EAKA,IAAIN,YAAJ,CAAiBG,UAAjB,EAA6B;AAC3BE,oBAAc,EAAE,OADW;AAE3B,SAAGD,IAFwB;AAG3BG,gBAAU,EAAE,KAHe;AAI3BD,SAAG,EAAE;AAJsB,KAA7B,CALA;AAWD;;AAb4B;;AAgB/B,OAAM,SAAUE,MAAV,CAAkBJ,IAAlB,EAAmC;AACvC,SAAQD,UAAD,IAAkC,IAAIJ,MAAJ,CAAWI,UAAX,EAAuBC,IAAvB,CAAzC;AACD","names":["KadDHT","SingleKadDHT","DualKadDHT","constructor","components","init","protocolPrefix","lan","clientMode","kadDHT"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\kad-dht\\src\\index.ts"],"sourcesContent":["import { KadDHT as SingleKadDHT } from './kad-dht.js'\nimport { DualKadDHT } from './dual-kad-dht.js'\nimport type { ProvidersInit } from './providers.js'\nimport type { Selectors, Validators } from '@libp2p/interface-dht'\nimport type { Registrar } from '@libp2p/interface-registrar'\nimport type { AddressManager } from '@libp2p/interface-address-manager'\nimport type { PeerStore } from '@libp2p/interface-peer-store'\nimport type { ConnectionManager } from '@libp2p/interface-connection-manager'\nimport type { Metrics } from '@libp2p/interface-metrics'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { Datastore } from 'interface-datastore'\n\nexport interface KadDHTInit {\n  /**\n   * How many peers to store in each kBucket (default 20)\n   */\n  kBucketSize?: number\n\n  /**\n   * Whether to start up as a DHT client or server\n   */\n  clientMode?: boolean\n\n  /**\n   * Record selectors\n   */\n  selectors?: Selectors\n\n  /**\n   * Record validators\n   */\n  validators?: Validators\n\n  /**\n   * How often to query our own PeerId in order to ensure we have a\n   * good view on the KAD address space local to our PeerId\n   */\n  querySelfInterval?: number\n\n  /**\n   * A custom protocol prefix to use (default: '/ipfs')\n   */\n  protocolPrefix?: string\n\n  /**\n   * How long to wait in ms when pinging DHT peers to decide if they\n   * should be evicted from the routing table or not (default 10000)\n   */\n  pingTimeout?: number\n\n  /**\n   * How many peers to ping in parallel when deciding if they should\n   * be evicted from the routing table or not (default 10)\n   */\n  pingConcurrency?: number\n\n  /**\n   * How many parallel incoming streams to allow on the DHT protocol per-connection\n   */\n  maxInboundStreams?: number\n\n  /**\n   * How many parallel outgoing streams to allow on the DHT protocol per-connection\n   */\n  maxOutboundStreams?: number\n\n  /**\n   * Initialization options for the Providers component\n   */\n  providers?: ProvidersInit\n}\n\nexport interface KadDHTComponents {\n  peerId: PeerId\n  registrar: Registrar\n  addressManager: AddressManager\n  peerStore: PeerStore\n  metrics?: Metrics\n  connectionManager: ConnectionManager\n  datastore: Datastore\n}\n\nclass KadDHT extends DualKadDHT {\n  constructor (components: KadDHTComponents, init?: KadDHTInit) {\n    super(components, new SingleKadDHT(components, {\n      protocolPrefix: '/ipfs',\n      ...init,\n      lan: false\n    }),\n    new SingleKadDHT(components, {\n      protocolPrefix: '/ipfs',\n      ...init,\n      clientMode: false,\n      lan: true\n    }))\n  }\n}\n\nexport function kadDHT (init?: KadDHTInit): (components: KadDHTComponents) => DualKadDHT {\n  return (components: KadDHTComponents) => new KadDHT(components, init)\n}\n"]},"metadata":{},"sourceType":"module"}