{"ast":null,"code":"import { pushable } from 'it-pushable';\n\nfunction isAsyncIterable(thing) {\n  return thing[Symbol.asyncIterator] != null;\n}\n\nfunction merge() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  const syncSources = [];\n\n  for (const source of sources) {\n    if (!isAsyncIterable(source)) {\n      syncSources.push(source);\n    }\n  }\n\n  if (syncSources.length === sources.length) {\n    // all sources are synchronous\n    return function* () {\n      for (const source of syncSources) {\n        yield* source;\n      }\n    }();\n  }\n\n  return async function* () {\n    const output = pushable({\n      objectMode: true\n    });\n    void Promise.resolve().then(async () => {\n      try {\n        await Promise.all(sources.map(async source => {\n          for await (const item of source) {\n            output.push(item);\n          }\n        }));\n        output.end();\n      } catch (err) {\n        output.end(err);\n      }\n    });\n    yield* output;\n  }();\n}\n\nexport default merge;","map":{"version":3,"mappings":"AAAA,SAASA,QAAT,QAAyB,aAAzB;;AAEA,SAASC,eAAT,CAA8BC,KAA9B,EAAwC;AACtC,SAAOA,KAAK,CAACC,MAAM,CAACC,aAAR,CAAL,IAA+B,IAAtC;AACD;;AAUD,SAASC,KAAT,GAAqE;AAAA,oCAA9CC,OAA8C;AAA9CA,WAA8C;AAAA;;AACnE,QAAMC,WAAW,GAAuB,EAAxC;;AAEA,OAAK,MAAMC,MAAX,IAAqBF,OAArB,EAA8B;AAC5B,QAAI,CAACL,eAAe,CAACO,MAAD,CAApB,EAA8B;AAC5BD,iBAAW,CAACE,IAAZ,CAAiBD,MAAjB;AACD;AACF;;AAED,MAAID,WAAW,CAACG,MAAZ,KAAuBJ,OAAO,CAACI,MAAnC,EAA2C;AACzC;AACA,WAAQ,aAAU;AAChB,WAAK,MAAMF,MAAX,IAAqBD,WAArB,EAAkC;AAChC,eAAQC,MAAR;AACD;AACF,KAJM,EAAP;AAKD;;AAED,SAAQ,mBAAgB;AACtB,UAAMG,MAAM,GAAGX,QAAQ,CAAI;AACzBY,gBAAU,EAAE;AADa,KAAJ,CAAvB;AAIA,SAAKC,OAAO,CAACC,OAAR,GAAkBC,IAAlB,CAAuB,YAAW;AACrC,UAAI;AACF,cAAMF,OAAO,CAACG,GAAR,CACJV,OAAO,CAACW,GAAR,CAAY,MAAOT,MAAP,IAAiB;AAC3B,qBAAW,MAAMU,IAAjB,IAAyBV,MAAzB,EAAiC;AAC/BG,kBAAM,CAACF,IAAP,CAAYS,IAAZ;AACD;AACF,SAJD,CADI,CAAN;AAQAP,cAAM,CAACQ,GAAP;AACD,OAVD,CAUE,OAAOC,GAAP,EAAiB;AACjBT,cAAM,CAACQ,GAAP,CAAWC,GAAX;AACD;AACF,KAdI,CAAL;AAgBA,WAAQT,MAAR;AACD,GAtBM,EAAP;AAuBD;;AAED,eAAeN,KAAf","names":["pushable","isAsyncIterable","thing","Symbol","asyncIterator","merge","sources","syncSources","source","push","length","output","objectMode","Promise","resolve","then","all","map","item","end","err"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\multistream-select\\node_modules\\it-merge\\src\\index.ts"],"sourcesContent":["import { pushable } from 'it-pushable'\n\nfunction isAsyncIterable <T> (thing: any): thing is AsyncIterable<T> {\n  return thing[Symbol.asyncIterator] != null\n}\n\n/**\n * Treat one or more iterables as a single iterable.\n *\n * Nb. sources are iterated over in parallel so the\n * order of emitted items is not guaranteed.\n */\nfunction merge <T> (...sources: Array<Iterable<T>>): Generator<T, void, undefined>\nfunction merge <T> (...sources: Array<AsyncIterable<T> | Iterable<T>>): AsyncGenerator<T, void, undefined>\nfunction merge <T> (...sources: Array<AsyncIterable<T> | Iterable<T>>): AsyncGenerator<T, void, undefined> | Generator<T, void, undefined> {\n  const syncSources: Array<Iterable<T>> = []\n\n  for (const source of sources) {\n    if (!isAsyncIterable(source)) {\n      syncSources.push(source)\n    }\n  }\n\n  if (syncSources.length === sources.length) {\n    // all sources are synchronous\n    return (function * () {\n      for (const source of syncSources) {\n        yield * source\n      }\n    })()\n  }\n\n  return (async function * () {\n    const output = pushable<T>({\n      objectMode: true\n    })\n\n    void Promise.resolve().then(async () => {\n      try {\n        await Promise.all(\n          sources.map(async (source) => {\n            for await (const item of source) {\n              output.push(item)\n            }\n          })\n        )\n\n        output.end()\n      } catch (err: any) {\n        output.end(err)\n      }\n    })\n\n    yield * output\n  })()\n}\n\nexport default merge\n"]},"metadata":{},"sourceType":"module"}