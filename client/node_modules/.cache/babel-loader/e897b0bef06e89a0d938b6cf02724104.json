{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshay Mishra\\\\OneDrive\\\\Desktop\\\\twitter-clone-dapp\\\\client\\\\src\\\\TweetBox.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./TweetBox.css\";\nimport Avatar from 'avataaars';\nimport { generateRandomAvatarOptions } from './avatar';\nimport { Button } from \"@material-ui/core\";\nimport axios from 'axios';\nimport { TwitterContractAddress } from './config.js';\nimport { ethers } from 'ethers';\nimport Twitter from './utils/TwitterContract.json'; // import * as IPFS from 'ipfs-core'\n// const ipfs = await IPFS.create()\n// const cid = await ipfs.add('Hello worldddd')\n// console.log(\"ciddd\",cid);\n\n/* import the ipfs-http-client and buffer libraries */\n\nimport { create } from 'ipfs-http-client';\nimport { Buffer } from 'buffer';\n/* configure Infura auth settings */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst projectId = \"64abffcc1bec4dccb1c51a5e6320423b\";\nconst projectSecret = \"<your-infura-project-secret>\";\nconst auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64');\n/* Create an instance of the client */\n\nconst client = create({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https',\n  headers: {\n    authorization: auth\n  }\n});\n\nfunction TweetBox() {\n  _s();\n\n  const [tweetMessage, setTweetMessage] = useState(\"\");\n  const [tweetImage, setTweetImage] = useState(\"\");\n  const [avatarOptions, setAvatarOptions] = useState(\"\");\n\n  async function onChange(e) {\n    const file = e.target.files[0];\n\n    try {\n      const added = await client.add(file);\n      const url = `https://infura-ipfs.io/ipfs/${added.path}`;\n      updateFileUrl(url);\n      console.log(\"IPFS URI: \", url);\n    } catch (error) {\n      console.log('Error uploading file: ', error);\n    }\n  }\n\n  const addTweet = async () => {\n    let tweet = {\n      'tweetText': tweetMessage,\n      'isDeleted': false\n    };\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let twitterTx = await TwitterContract.addTweet(tweet.tweetText, tweet.isDeleted);\n        console.log(twitterTx);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(\"Error submitting new Tweet\", error);\n    }\n  };\n\n  const sendTweet = e => {\n    e.preventDefault();\n    addTweet();\n    setTweetMessage(\"\");\n    setTweetImage(\"\");\n  }; // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(() => {\n    let avatar = generateRandomAvatarOptions();\n    setAvatarOptions(avatar);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tweetBox\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tweetBox__input\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          style: {\n            width: '100px',\n            height: '100px'\n          },\n          avatarStyle: \"Circle\",\n          ...avatarOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setTweetMessage(e.target.value),\n          value: tweetMessage,\n          placeholder: \"What's happening?\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: tweetImage,\n        onChange: e => setTweetImage(e.target.value),\n        className: \"tweetBox__imageInput\",\n        placeholder: \"Optional: Enter image URL\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: sendTweet,\n        type: \"submit\",\n        className: \"tweetBox__tweetButton\",\n        children: \"Tweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TweetBox, \"k4asxlUUnJh8SGMYRTVRKXmi8s4=\");\n\n_c = TweetBox;\nexport default TweetBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetBox\");","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/client/src/TweetBox.jsx"],"names":["React","useState","useEffect","Avatar","generateRandomAvatarOptions","Button","axios","TwitterContractAddress","ethers","Twitter","create","Buffer","projectId","projectSecret","auth","from","toString","client","host","port","protocol","headers","authorization","TweetBox","tweetMessage","setTweetMessage","tweetImage","setTweetImage","avatarOptions","setAvatarOptions","onChange","e","file","target","files","added","add","url","path","updateFileUrl","console","log","error","addTweet","tweet","ethereum","window","provider","providers","Web3Provider","signer","getSigner","TwitterContract","Contract","abi","twitterTx","tweetText","isDeleted","sendTweet","preventDefault","avatar","width","height","value"],"mappings":"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","sourcesContent":["import React, { useState , useEffect } from \"react\";\r\nimport \"./TweetBox.css\";\r\nimport Avatar from 'avataaars';\r\nimport { generateRandomAvatarOptions } from './avatar';\r\nimport { Button } from \"@material-ui/core\";\r\nimport axios from 'axios';\r\nimport { TwitterContractAddress } from './config.js';\r\nimport {ethers} from 'ethers';\r\nimport Twitter from './utils/TwitterContract.json'\r\n\r\n// import * as IPFS from 'ipfs-core'\r\n\r\n// const ipfs = await IPFS.create()\r\n// const cid = await ipfs.add('Hello worldddd')\r\n// console.log(\"ciddd\",cid);\r\n/* import the ipfs-http-client and buffer libraries */\r\nimport { create } from 'ipfs-http-client'\r\nimport { Buffer } from 'buffer'\r\n\r\n/* configure Infura auth settings */\r\nconst projectId = \"64abffcc1bec4dccb1c51a5e6320423b\"\r\nconst projectSecret = \"<your-infura-project-secret>\"\r\nconst auth = 'Basic ' + Buffer.from(projectId + ':' + projectSecret).toString('base64')\r\n\r\n/* Create an instance of the client */\r\nconst client = create({\r\n  host: 'ipfs.infura.io',\r\n  port: 5001,\r\n  protocol: 'https',\r\n  headers: {\r\n      authorization: auth,\r\n  }\r\n})\r\n\r\n\r\nfunction TweetBox() {\r\n  const [tweetMessage, setTweetMessage] = useState(\"\");\r\n  const [tweetImage, setTweetImage] = useState(\"\");\r\n  const [avatarOptions, setAvatarOptions] = useState(\"\");\r\n\r\n  async function onChange(e) {\r\n    const file = e.target.files[0]\r\n    try {\r\n      const added = await client.add(file)\r\n      const url = `https://infura-ipfs.io/ipfs/${added.path}`\r\n      updateFileUrl(url)\r\n      console.log(\"IPFS URI: \", url)\r\n    } catch (error) {\r\n      console.log('Error uploading file: ', error)\r\n    }  \r\n  }\r\n  \r\n  const addTweet = async () => {\r\n    let tweet = {\r\n      'tweetText': tweetMessage,\r\n      'isDeleted': false\r\n    };\r\n\r\n    try {\r\n      const {ethereum} = window\r\n\r\n      if(ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const TwitterContract = new ethers.Contract(\r\n          TwitterContractAddress,\r\n          Twitter.abi,\r\n          signer\r\n        )\r\n\r\n        let twitterTx = await TwitterContract.addTweet(tweet.tweetText, tweet.isDeleted);\r\n\r\n        console.log(twitterTx);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch(error) {\r\n      console.log(\"Error submitting new Tweet\", error);\r\n    }\r\n  }\r\n\r\n  const sendTweet = (e) => {\r\n    e.preventDefault();\r\n\r\n    addTweet();\r\n\r\n    setTweetMessage(\"\");\r\n    setTweetImage(\"\");\r\n  };\r\n\r\n  // Similar to componentDidMount and componentDidUpdate:\r\n  useEffect(() => {\r\n    let avatar = generateRandomAvatarOptions();\r\n    setAvatarOptions(avatar);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tweetBox\">\r\n      <form>\r\n        <div className=\"tweetBox__input\">\r\n          <Avatar\r\n            style={{ width: '100px', height: '100px' }}\r\n            avatarStyle='Circle'\r\n            {...avatarOptions }\r\n          />\r\n          <input\r\n            onChange={(e) => setTweetMessage(e.target.value)}\r\n            value={tweetMessage}\r\n            placeholder=\"What's happening?\"\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <input\r\n          value={tweetImage}\r\n          onChange={(e) => setTweetImage(e.target.value)}\r\n          className=\"tweetBox__imageInput\"\r\n          placeholder=\"Optional: Enter image URL\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <Button\r\n          onClick={sendTweet}\r\n          type=\"submit\"\r\n          className=\"tweetBox__tweetButton\"\r\n        >\r\n          Tweet\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetBox;\r\n"]},"metadata":{},"sourceType":"module"}