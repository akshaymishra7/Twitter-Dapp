{"ast":null,"code":"/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string\n */\nexport function toRFC3339(time) {\n  const year = time.getUTCFullYear();\n  const month = String(time.getUTCMonth() + 1).padStart(2, '0');\n  const day = String(time.getUTCDate()).padStart(2, '0');\n  const hour = String(time.getUTCHours()).padStart(2, '0');\n  const minute = String(time.getUTCMinutes()).padStart(2, '0');\n  const seconds = String(time.getUTCSeconds()).padStart(2, '0');\n  const milliseconds = time.getUTCMilliseconds();\n  const nanoseconds = String(milliseconds * 1000 * 1000).padStart(9, '0');\n  return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`;\n}\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object\n */\n\nexport function parseRFC3339(time) {\n  const rfc3339Matcher = new RegExp( // 2006-01-02T\n  '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' + // 15:04:05\n  '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' + // .999999999Z\n  '\\\\.(\\\\d+)Z');\n  const m = String(time).trim().match(rfc3339Matcher);\n\n  if (m == null) {\n    throw new Error('Invalid format');\n  }\n\n  const year = parseInt(m[1], 10);\n  const month = parseInt(m[2], 10) - 1;\n  const date = parseInt(m[3], 10);\n  const hour = parseInt(m[4], 10);\n  const minute = parseInt(m[5], 10);\n  const second = parseInt(m[6], 10);\n  const millisecond = parseInt(m[7].slice(0, -6), 10);\n  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond));\n}","map":{"version":3,"mappings":"AAAA;;;;AAIA,OAAM,SAAUA,SAAV,CAAqBC,IAArB,EAA+B;AACnC,QAAMC,IAAI,GAAGD,IAAI,CAACE,cAAL,EAAb;AACA,QAAMC,KAAK,GAAGC,MAAM,CAACJ,IAAI,CAACK,WAAL,KAAqB,CAAtB,CAAN,CAA+BC,QAA/B,CAAwC,CAAxC,EAA2C,GAA3C,CAAd;AACA,QAAMC,GAAG,GAAGH,MAAM,CAACJ,IAAI,CAACQ,UAAL,EAAD,CAAN,CAA0BF,QAA1B,CAAmC,CAAnC,EAAsC,GAAtC,CAAZ;AACA,QAAMG,IAAI,GAAGL,MAAM,CAACJ,IAAI,CAACU,WAAL,EAAD,CAAN,CAA2BJ,QAA3B,CAAoC,CAApC,EAAuC,GAAvC,CAAb;AACA,QAAMK,MAAM,GAAGP,MAAM,CAACJ,IAAI,CAACY,aAAL,EAAD,CAAN,CAA6BN,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAf;AACA,QAAMO,OAAO,GAAGT,MAAM,CAACJ,IAAI,CAACc,aAAL,EAAD,CAAN,CAA6BR,QAA7B,CAAsC,CAAtC,EAAyC,GAAzC,CAAhB;AACA,QAAMS,YAAY,GAAGf,IAAI,CAACgB,kBAAL,EAArB;AACA,QAAMC,WAAW,GAAGb,MAAM,CAACW,YAAY,GAAG,IAAf,GAAsB,IAAvB,CAAN,CAAmCT,QAAnC,CAA4C,CAA5C,EAA+C,GAA/C,CAApB;AAEA,SAAO,GAAGL,IAAI,IAAIE,KAAK,IAAII,GAAG,IAAIE,IAAI,IAAIE,MAAM,IAAIE,OAAO,IAAII,WAAW,GAA1E;AACD;AAED;;;;;AAIA,OAAM,SAAUC,YAAV,CAAwBlB,IAAxB,EAAoC;AACxC,QAAMmB,cAAc,GAAG,IAAIC,MAAJ,EACrB;AACA,kCACA;AACA,8BAFA,GAGA;AACA,cANqB,CAAvB;AAQA,QAAMC,CAAC,GAAGjB,MAAM,CAACJ,IAAD,CAAN,CAAasB,IAAb,GAAoBC,KAApB,CAA0BJ,cAA1B,CAAV;;AAEA,MAAIE,CAAC,IAAI,IAAT,EAAe;AACb,UAAM,IAAIG,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,QAAMvB,IAAI,GAAGwB,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAArB;AACA,QAAMlB,KAAK,GAAGsB,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAAR,GAAqB,CAAnC;AACA,QAAMK,IAAI,GAAGD,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAArB;AACA,QAAMZ,IAAI,GAAGgB,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAArB;AACA,QAAMV,MAAM,GAAGc,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAAvB;AACA,QAAMM,MAAM,GAAGF,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAF,EAAO,EAAP,CAAvB;AACA,QAAMO,WAAW,GAAGH,QAAQ,CAACJ,CAAC,CAAC,CAAD,CAAD,CAAKQ,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAD,EAAoB,EAApB,CAA5B;AAEA,SAAO,IAAIC,IAAJ,CAASA,IAAI,CAACC,GAAL,CAAS9B,IAAT,EAAeE,KAAf,EAAsBuB,IAAtB,EAA4BjB,IAA5B,EAAkCE,MAAlC,EAA0CgB,MAA1C,EAAkDC,WAAlD,CAAT,CAAP;AACD","names":["toRFC3339","time","year","getUTCFullYear","month","String","getUTCMonth","padStart","day","getUTCDate","hour","getUTCHours","minute","getUTCMinutes","seconds","getUTCSeconds","milliseconds","getUTCMilliseconds","nanoseconds","parseRFC3339","rfc3339Matcher","RegExp","m","trim","match","Error","parseInt","date","second","millisecond","slice","Date","UTC"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\record\\src\\utils.ts"],"sourcesContent":["/**\n * Convert a JavaScript date into an `RFC3339Nano` formatted\n * string\n */\nexport function toRFC3339 (time: Date): string {\n  const year = time.getUTCFullYear()\n  const month = String(time.getUTCMonth() + 1).padStart(2, '0')\n  const day = String(time.getUTCDate()).padStart(2, '0')\n  const hour = String(time.getUTCHours()).padStart(2, '0')\n  const minute = String(time.getUTCMinutes()).padStart(2, '0')\n  const seconds = String(time.getUTCSeconds()).padStart(2, '0')\n  const milliseconds = time.getUTCMilliseconds()\n  const nanoseconds = String(milliseconds * 1000 * 1000).padStart(9, '0')\n\n  return `${year}-${month}-${day}T${hour}:${minute}:${seconds}.${nanoseconds}Z`\n}\n\n/**\n * Parses a date string formatted as `RFC3339Nano` into a\n * JavaScript Date object\n */\nexport function parseRFC3339 (time: string): Date {\n  const rfc3339Matcher = new RegExp(\n    // 2006-01-02T\n    '(\\\\d{4})-(\\\\d{2})-(\\\\d{2})T' +\n    // 15:04:05\n    '(\\\\d{2}):(\\\\d{2}):(\\\\d{2})' +\n    // .999999999Z\n    '\\\\.(\\\\d+)Z'\n  )\n  const m = String(time).trim().match(rfc3339Matcher)\n\n  if (m == null) {\n    throw new Error('Invalid format')\n  }\n\n  const year = parseInt(m[1], 10)\n  const month = parseInt(m[2], 10) - 1\n  const date = parseInt(m[3], 10)\n  const hour = parseInt(m[4], 10)\n  const minute = parseInt(m[5], 10)\n  const second = parseInt(m[6], 10)\n  const millisecond = parseInt(m[7].slice(0, -6), 10)\n\n  return new Date(Date.UTC(year, month, date, hour, minute, second, millisecond))\n}\n"]},"metadata":{},"sourceType":"module"}