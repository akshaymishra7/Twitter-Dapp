{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * Provides strategies for resolving multiaddrs.\n */\nimport { getProtocol } from '../protocols-table.js';\nimport Resolver from './dns.js';\nconst {\n  code: dnsaddrCode\n} = getProtocol('dnsaddr');\n/**\n * Resolver for dnsaddr addresses.\n *\n * @example\n *\n * ```typescript\n * import { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n * const addresses = await dnsaddrResolver(ma)\n *\n * console.info(addresses)\n * //[\n * //  '/dnsaddr/am6.bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n * //  '/dnsaddr/ny5.bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n * //  '/dnsaddr/sg1.bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n * //  '/dnsaddr/sv15.bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN'\n * //]\n * ```\n */\n\nexport async function dnsaddrResolver(addr) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const resolver = new Resolver();\n\n  if (options.signal != null) {\n    options.signal.addEventListener('abort', () => {\n      resolver.cancel();\n    });\n  }\n\n  const peerId = addr.getPeerId();\n  const [, hostname] = addr.stringTuples().find(_ref => {\n    let [proto] = _ref;\n    return proto === dnsaddrCode;\n  }) ?? [];\n\n  if (hostname == null) {\n    throw new Error('No hostname found in multiaddr');\n  }\n\n  const records = await resolver.resolveTxt(`_dnsaddr.${hostname}`);\n  let addresses = records.flat().map(a => a.split('=')[1]).filter(Boolean);\n\n  if (peerId != null) {\n    addresses = addresses.filter(entry => entry.includes(peerId));\n  }\n\n  return addresses;\n}","map":{"version":3,"mappings":"AAAA;;;;;AAMA,SAASA,WAAT,QAA4B,uBAA5B;AACA,OAAOC,QAAP,MAAqB,UAArB;AAGA,MAAM;AAAEC,MAAI,EAAEC;AAAR,IAAwBH,WAAW,CAAC,SAAD,CAAzC;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,OAAO,eAAeI,eAAf,CAAgCC,IAAhC,EAA2E;AAAA,MAA1BC,OAA0B,uEAAF,EAAE;AAChF,QAAMC,QAAQ,GAAG,IAAIN,QAAJ,EAAjB;;AAEA,MAAIK,OAAO,CAACE,MAAR,IAAkB,IAAtB,EAA4B;AAC1BF,WAAO,CAACE,MAAR,CAAeC,gBAAf,CAAgC,OAAhC,EAAyC,MAAK;AAC5CF,cAAQ,CAACG,MAAT;AACD,KAFD;AAGD;;AAED,QAAMC,MAAM,GAAGN,IAAI,CAACO,SAAL,EAAf;AACA,QAAM,GAAGC,QAAH,IAAeR,IAAI,CAACS,YAAL,GAAoBC,IAApB,CAAyB;AAAA,QAAC,CAACC,KAAD,CAAD;AAAA,WAAaA,KAAK,KAAKb,WAAvB;AAAA,GAAzB,KAAgE,EAArF;;AAEA,MAAIU,QAAQ,IAAI,IAAhB,EAAsB;AACpB,UAAM,IAAII,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,QAAMC,OAAO,GAAG,MAAMX,QAAQ,CAACY,UAAT,CAAoB,YAAYN,QAAQ,EAAxC,CAAtB;AAEA,MAAIO,SAAS,GAAGF,OAAO,CAACG,IAAR,GAAeC,GAAf,CAAoBC,CAAD,IAAOA,CAAC,CAACC,KAAF,CAAQ,GAAR,EAAa,CAAb,CAA1B,EAA2CC,MAA3C,CAAkDC,OAAlD,CAAhB;;AAEA,MAAIf,MAAM,IAAI,IAAd,EAAoB;AAClBS,aAAS,GAAGA,SAAS,CAACK,MAAV,CAAkBE,KAAD,IAAWA,KAAK,CAACC,QAAN,CAAejB,MAAf,CAA5B,CAAZ;AACD;;AAED,SAAOS,SAAP;AACD","names":["getProtocol","Resolver","code","dnsaddrCode","dnsaddrResolver","addr","options","resolver","signal","addEventListener","cancel","peerId","getPeerId","hostname","stringTuples","find","proto","Error","records","resolveTxt","addresses","flat","map","a","split","filter","Boolean","entry","includes"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@multiformats\\multiaddr\\src\\resolvers\\index.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * Provides strategies for resolving multiaddrs.\n */\n\nimport { getProtocol } from '../protocols-table.js'\nimport Resolver from './dns.js'\nimport type { AbortOptions, Multiaddr } from '../index.js'\n\nconst { code: dnsaddrCode } = getProtocol('dnsaddr')\n\n/**\n * Resolver for dnsaddr addresses.\n *\n * @example\n *\n * ```typescript\n * import { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\n * import { multiaddr } from '@multiformats/multiaddr'\n *\n * const ma = multiaddr('/dnsaddr/bootstrap.libp2p.io')\n * const addresses = await dnsaddrResolver(ma)\n *\n * console.info(addresses)\n * //[\n * //  '/dnsaddr/am6.bootstrap.libp2p.io/p2p/QmbLHAnMoJPWSCR5Zhtx6BHJX9KiKNN6tpvbUcqanj75Nb',\n * //  '/dnsaddr/ny5.bootstrap.libp2p.io/p2p/QmQCU2EcMqAqQPR2i9bChDtGNJchTbq5TbXJJ16u19uLTa',\n * //  '/dnsaddr/sg1.bootstrap.libp2p.io/p2p/QmcZf59bWwK5XFi76CZX8cbJ4BhTzzA3gU1ZjYZcYW3dwt',\n * //  '/dnsaddr/sv15.bootstrap.libp2p.io/p2p/QmNnooDu7bfjPFoTZYxMNLWUQJyrVwtbZg5gBMjTezGAJN'\n * //]\n * ```\n */\nexport async function dnsaddrResolver (addr: Multiaddr, options: AbortOptions = {}): Promise<string[]> {\n  const resolver = new Resolver()\n\n  if (options.signal != null) {\n    options.signal.addEventListener('abort', () => {\n      resolver.cancel()\n    })\n  }\n\n  const peerId = addr.getPeerId()\n  const [, hostname] = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) ?? []\n\n  if (hostname == null) {\n    throw new Error('No hostname found in multiaddr')\n  }\n\n  const records = await resolver.resolveTxt(`_dnsaddr.${hostname}`)\n\n  let addresses = records.flat().map((a) => a.split('=')[1]).filter(Boolean)\n\n  if (peerId != null) {\n    addresses = addresses.filter((entry) => entry.includes(peerId))\n  }\n\n  return addresses\n}\n"]},"metadata":{},"sourceType":"module"}