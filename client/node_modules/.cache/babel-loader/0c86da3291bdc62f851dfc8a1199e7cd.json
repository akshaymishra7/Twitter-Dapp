{"ast":null,"code":"import defer from 'p-defer';\n/**\n * A pair of streams where one drains from the other\n */\n\nexport function pair() {\n  const deferred = defer();\n  let piped = false;\n  return {\n    sink: async source => {\n      if (piped) {\n        throw new Error('already piped');\n      }\n\n      piped = true;\n      deferred.resolve(source);\n    },\n    source: async function* () {\n      const source = await deferred.promise;\n      yield* source;\n    }()\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,SAAlB;AAGA;;;;AAGA,OAAM,SAAUC,IAAV,GAAc;AAClB,QAAMC,QAAQ,GAAGF,KAAK,EAAtB;AACA,MAAIG,KAAK,GAAG,KAAZ;AAEA,SAAO;AACLC,QAAI,EAAE,MAAMC,MAAN,IAAe;AACnB,UAAIF,KAAJ,EAAW;AACT,cAAM,IAAIG,KAAJ,CAAU,eAAV,CAAN;AACD;;AAEDH,WAAK,GAAG,IAAR;AACAD,cAAQ,CAACK,OAAT,CAAiBF,MAAjB;AACD,KARI;AASLA,UAAM,EAAG,mBAAgB;AACvB,YAAMA,MAAM,GAAG,MAAMH,QAAQ,CAACM,OAA9B;AAEA,aAAQH,MAAR;AACD,KAJQ;AATJ,GAAP;AAeD","names":["defer","pair","deferred","piped","sink","source","Error","resolve","promise"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\it-pair\\src\\index.ts"],"sourcesContent":["import defer from 'p-defer'\nimport type { Source, Duplex } from 'it-stream-types'\n\n/**\n * A pair of streams where one drains from the other\n */\nexport function pair <T> (): Duplex<AsyncGenerator<T>, Source<T>, Promise<void>> {\n  const deferred = defer<Source<T>>()\n  let piped = false\n\n  return {\n    sink: async source => {\n      if (piped) {\n        throw new Error('already piped')\n      }\n\n      piped = true\n      deferred.resolve(source)\n    },\n    source: (async function * () {\n      const source = await deferred.promise\n\n      yield * source\n    }())\n  }\n}\n"]},"metadata":{},"sourceType":"module"}