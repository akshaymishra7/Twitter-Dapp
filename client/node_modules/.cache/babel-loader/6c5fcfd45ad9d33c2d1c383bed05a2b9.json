{"ast":null,"code":"import { Key } from 'interface-datastore/key';\nimport { CID } from 'multiformats';\nimport * as raw from 'multiformats/codecs/raw';\nimport errCode from 'err-code';\nimport { base32 } from 'multiformats/bases/base32';\nimport * as Digest from 'multiformats/hashes/digest';\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} c\n */\n\nexport function cidToKey(c) {\n  const cid = CID.asCID(c);\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID');\n  }\n\n  const encoded = base32.encode(cid.multihash.bytes);\n  return new Key('/' + encoded.slice(1).toUpperCase(), false);\n}\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n */\n\nexport function keyToCid(key) {\n  // Block key is of the form /<base32 encoded string>\n  return CID.createV1(raw.code, keyToMultihash(key));\n}\n/**\n * @param {Key | string} key\n */\n\nexport function keyToMultihash(key) {\n  return Digest.decode(base32.decode(`b${key.toString().toLowerCase().substring(1)}`));\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-repo/src/utils/blockstore.js"],"names":["Key","CID","raw","errCode","base32","Digest","cidToKey","c","cid","asCID","Error","encoded","encode","multihash","bytes","slice","toUpperCase","keyToCid","key","createV1","code","keyToMultihash","decode","toString","toLowerCase","substring"],"mappings":"AAAA,SAASA,GAAT,QAAoB,yBAApB;AACA,SAASC,GAAT,QAAoB,cAApB;AACA,OAAO,KAAKC,GAAZ,MAAqB,yBAArB;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,MAAT,QAAuB,2BAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,4BAAxB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAmBC,CAAnB,EAAsB;AAC3B,QAAMC,GAAG,GAAGP,GAAG,CAACQ,KAAJ,CAAUF,CAAV,CAAZ;;AAEA,MAAIC,GAAG,IAAI,IAAX,EAAiB;AACf,UAAML,OAAO,CAAC,IAAIO,KAAJ,CAAU,iBAAV,CAAD,EAA+B,iBAA/B,CAAb;AACD;;AAED,QAAMC,OAAO,GAAGP,MAAM,CAACQ,MAAP,CAAcJ,GAAG,CAACK,SAAJ,CAAcC,KAA5B,CAAhB;AAEA,SAAO,IAAId,GAAJ,CAAQ,MAAMW,OAAO,CAACI,KAAR,CAAc,CAAd,EAAiBC,WAAjB,EAAd,EAA8C,KAA9C,CAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAmBC,GAAnB,EAAwB;AAC7B;AACA,SAAOjB,GAAG,CAACkB,QAAJ,CAAajB,GAAG,CAACkB,IAAjB,EAAuBC,cAAc,CAACH,GAAD,CAArC,CAAP;AACD;AAED;AACA;AACA;;AACA,OAAO,SAASG,cAAT,CAAyBH,GAAzB,EAA8B;AACnC,SAAOb,MAAM,CAACiB,MAAP,CAAclB,MAAM,CAACkB,MAAP,CAAe,IAAGJ,GAAG,CAACK,QAAJ,GAAeC,WAAf,GAA6BC,SAA7B,CAAuC,CAAvC,CAA0C,EAA5D,CAAd,CAAP;AACD","sourcesContent":["import { Key } from 'interface-datastore/key'\nimport { CID } from 'multiformats'\nimport * as raw from 'multiformats/codecs/raw'\nimport errCode from 'err-code'\nimport { base32 } from 'multiformats/bases/base32'\nimport * as Digest from 'multiformats/hashes/digest'\n\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} c\n */\nexport function cidToKey (c) {\n  const cid = CID.asCID(c)\n\n  if (cid == null) {\n    throw errCode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  const encoded = base32.encode(cid.multihash.bytes)\n\n  return new Key('/' + encoded.slice(1).toUpperCase(), false)\n}\n\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n */\nexport function keyToCid (key) {\n  // Block key is of the form /<base32 encoded string>\n  return CID.createV1(raw.code, keyToMultihash(key))\n}\n\n/**\n * @param {Key | string} key\n */\nexport function keyToMultihash (key) {\n  return Digest.decode(base32.decode(`b${key.toString().toLowerCase().substring(1)}`))\n}\n"]},"metadata":{},"sourceType":"module"}