{"ast":null,"code":"import { LockExistsError } from '../errors.js';\nimport debug from 'debug';\nconst log = debug('ipfs:repo:lock:memory');\nconst lockFile = 'repo.lock';\n/** @type {Record<string,boolean>} */\n\nconst LOCKS = {};\n/**\n * @typedef {import('../types').LockCloser} LockCloser\n */\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<LockCloser>}\n */\n\nasync function lock(dir) {\n  const file = dir + '/' + lockFile;\n  log('locking %s', file);\n\n  if (LOCKS[file] === true) {\n    throw new LockExistsError(`Lock already being held for file: ${file}`);\n  }\n\n  LOCKS[file] = true;\n  const closer = {\n    async close() {\n      if (LOCKS[file]) {\n        delete LOCKS[file];\n      }\n    }\n\n  };\n  return closer;\n}\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {Promise<boolean>}\n */\n\n\nasync function locked(dir) {\n  const file = dir + '/' + lockFile;\n  log(`checking lock: ${file}`);\n  return Boolean(LOCKS[file]);\n}\n\nexport const MemoryLock = {\n  lock,\n  locked\n};","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-repo/src/locks/memory.js"],"names":["LockExistsError","debug","log","lockFile","LOCKS","lock","dir","file","closer","close","locked","Boolean","MemoryLock"],"mappings":"AACA,SAASA,eAAT,QAAgC,cAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,GAAG,GAAGD,KAAK,CAAC,uBAAD,CAAjB;AACA,MAAME,QAAQ,GAAG,WAAjB;AAEA;;AACA,MAAMC,KAAK,GAAG,EAAd;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeC,IAAf,CAAqBC,GAArB,EAA0B;AACxB,QAAMC,IAAI,GAAGD,GAAG,GAAG,GAAN,GAAYH,QAAzB;AACAD,EAAAA,GAAG,CAAC,YAAD,EAAeK,IAAf,CAAH;;AAEA,MAAIH,KAAK,CAACG,IAAD,CAAL,KAAgB,IAApB,EAA0B;AACxB,UAAM,IAAIP,eAAJ,CAAqB,qCAAoCO,IAAK,EAA9D,CAAN;AACD;;AAEDH,EAAAA,KAAK,CAACG,IAAD,CAAL,GAAc,IAAd;AACA,QAAMC,MAAM,GAAG;AACb,UAAMC,KAAN,GAAe;AACb,UAAIL,KAAK,CAACG,IAAD,CAAT,EAAiB;AACf,eAAOH,KAAK,CAACG,IAAD,CAAZ;AACD;AACF;;AALY,GAAf;AAOA,SAAOC,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeE,MAAf,CAAuBJ,GAAvB,EAA4B;AAC1B,QAAMC,IAAI,GAAGD,GAAG,GAAG,GAAN,GAAYH,QAAzB;AACAD,EAAAA,GAAG,CAAE,kBAAiBK,IAAK,EAAxB,CAAH;AAEA,SAAOI,OAAO,CAACP,KAAK,CAACG,IAAD,CAAN,CAAd;AACD;;AAED,OAAO,MAAMK,UAAU,GAAG;AACxBP,EAAAA,IADwB;AAExBK,EAAAA;AAFwB,CAAnB","sourcesContent":["\nimport { LockExistsError } from '../errors.js'\nimport debug from 'debug'\n\nconst log = debug('ipfs:repo:lock:memory')\nconst lockFile = 'repo.lock'\n\n/** @type {Record<string,boolean>} */\nconst LOCKS = {}\n\n/**\n * @typedef {import('../types').LockCloser} LockCloser\n */\n\n/**\n * Lock the repo in the given dir.\n *\n * @param {string} dir\n * @returns {Promise<LockCloser>}\n */\nasync function lock (dir) {\n  const file = dir + '/' + lockFile\n  log('locking %s', file)\n\n  if (LOCKS[file] === true) {\n    throw new LockExistsError(`Lock already being held for file: ${file}`)\n  }\n\n  LOCKS[file] = true\n  const closer = {\n    async close () {\n      if (LOCKS[file]) {\n        delete LOCKS[file]\n      }\n    }\n  }\n  return closer\n}\n\n/**\n * Check if the repo in the given directory is locked.\n *\n * @param {string} dir\n * @returns {Promise<boolean>}\n */\nasync function locked (dir) {\n  const file = dir + '/' + lockFile\n  log(`checking lock: ${file}`)\n\n  return Boolean(LOCKS[file])\n}\n\nexport const MemoryLock = {\n  lock,\n  locked\n}\n"]},"metadata":{},"sourceType":"module"}