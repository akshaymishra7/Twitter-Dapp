{"ast":null,"code":"import { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport { IpnsEntry } from './pb/ipns.js';\nimport { parseRFC3339 } from './utils.js';\nexport const ipnsSelector = (key, data) => {\n  const entries = data.map((buf, index) => ({\n    entry: IpnsEntry.decode(buf),\n    index\n  }));\n  entries.sort((a, b) => {\n    // having a newer signature version is better than an older signature version\n    if (a.entry.signatureV2 != null && b.entry.signatureV2 == null) {\n      return -1;\n    } else if (a.entry.signatureV2 == null && b.entry.signatureV2 != null) {\n      return 1;\n    }\n\n    const aSeq = a.entry.sequence ?? 0n;\n    const bSeq = b.entry.sequence ?? 0n; // choose later sequence number\n\n    if (aSeq > bSeq) {\n      return -1;\n    } else if (aSeq < bSeq) {\n      return 1;\n    }\n\n    const aValidty = a.entry.validity ?? new Uint8Array(0);\n    const bValidty = b.entry.validity ?? new Uint8Array(0); // choose longer lived record if sequence numbers the same\n\n    const entryAValidityDate = parseRFC3339(uint8ArrayToString(aValidty));\n    const entryBValidityDate = parseRFC3339(uint8ArrayToString(bValidty));\n\n    if (entryAValidityDate.getTime() > entryBValidityDate.getTime()) {\n      return -1;\n    }\n\n    if (entryAValidityDate.getTime() < entryBValidityDate.getTime()) {\n      return 1;\n    }\n\n    return 0;\n  });\n  return entries[0].index;\n};","map":{"version":3,"mappings":"AAAA,SAASA,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AACA,SAASC,SAAT,QAA0B,cAA1B;AACA,SAASC,YAAT,QAA6B,YAA7B;AAGA,OAAO,MAAMC,YAAY,GAAa,CAACC,GAAD,EAAMC,IAAN,KAAc;AAClD,QAAMC,OAAO,GAAGD,IAAI,CAACE,GAAL,CAAS,CAACC,GAAD,EAAMC,KAAN,MAAiB;AACxCC,SAAK,EAAET,SAAS,CAACU,MAAV,CAAiBH,GAAjB,CADiC;AAExCC;AAFwC,GAAjB,CAAT,CAAhB;AAKAH,SAAO,CAACM,IAAR,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAS;AACpB;AACA,QAAID,CAAC,CAACH,KAAF,CAAQK,WAAR,IAAuB,IAAvB,IAA+BD,CAAC,CAACJ,KAAF,CAAQK,WAAR,IAAuB,IAA1D,EAAgE;AAC9D,aAAO,CAAC,CAAR;AACD,KAFD,MAEO,IAAIF,CAAC,CAACH,KAAF,CAAQK,WAAR,IAAuB,IAAvB,IAA+BD,CAAC,CAACJ,KAAF,CAAQK,WAAR,IAAuB,IAA1D,EAAgE;AACrE,aAAO,CAAP;AACD;;AAED,UAAMC,IAAI,GAAGH,CAAC,CAACH,KAAF,CAAQO,QAAR,IAAoB,EAAjC;AACA,UAAMC,IAAI,GAAGJ,CAAC,CAACJ,KAAF,CAAQO,QAAR,IAAoB,EAAjC,CAToB,CAWpB;;AACA,QAAID,IAAI,GAAGE,IAAX,EAAiB;AACf,aAAO,CAAC,CAAR;AACD,KAFD,MAEO,IAAIF,IAAI,GAAGE,IAAX,EAAiB;AACtB,aAAO,CAAP;AACD;;AAED,UAAMC,QAAQ,GAAGN,CAAC,CAACH,KAAF,CAAQU,QAAR,IAAoB,IAAIC,UAAJ,CAAe,CAAf,CAArC;AACA,UAAMC,QAAQ,GAAGR,CAAC,CAACJ,KAAF,CAAQU,QAAR,IAAoB,IAAIC,UAAJ,CAAe,CAAf,CAArC,CAnBoB,CAqBpB;;AACA,UAAME,kBAAkB,GAAGrB,YAAY,CAACF,kBAAkB,CAACmB,QAAD,CAAnB,CAAvC;AACA,UAAMK,kBAAkB,GAAGtB,YAAY,CAACF,kBAAkB,CAACsB,QAAD,CAAnB,CAAvC;;AAEA,QAAIC,kBAAkB,CAACE,OAAnB,KAA+BD,kBAAkB,CAACC,OAAnB,EAAnC,EAAiE;AAC/D,aAAO,CAAC,CAAR;AACD;;AAED,QAAIF,kBAAkB,CAACE,OAAnB,KAA+BD,kBAAkB,CAACC,OAAnB,EAAnC,EAAiE;AAC/D,aAAO,CAAP;AACD;;AAED,WAAO,CAAP;AACD,GAlCD;AAoCA,SAAOnB,OAAO,CAAC,CAAD,CAAP,CAAWG,KAAlB;AACD,CA3CM","names":["toString","uint8ArrayToString","IpnsEntry","parseRFC3339","ipnsSelector","key","data","entries","map","buf","index","entry","decode","sort","a","b","signatureV2","aSeq","sequence","bSeq","aValidty","validity","Uint8Array","bValidty","entryAValidityDate","entryBValidityDate","getTime"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\ipns\\src\\selector.ts"],"sourcesContent":["import { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport { IpnsEntry } from './pb/ipns.js'\nimport { parseRFC3339 } from './utils.js'\nimport type { SelectFn } from '@libp2p/interface-dht'\n\nexport const ipnsSelector: SelectFn = (key, data) => {\n  const entries = data.map((buf, index) => ({\n    entry: IpnsEntry.decode(buf),\n    index\n  }))\n\n  entries.sort((a, b) => {\n    // having a newer signature version is better than an older signature version\n    if (a.entry.signatureV2 != null && b.entry.signatureV2 == null) {\n      return -1\n    } else if (a.entry.signatureV2 == null && b.entry.signatureV2 != null) {\n      return 1\n    }\n\n    const aSeq = a.entry.sequence ?? 0n\n    const bSeq = b.entry.sequence ?? 0n\n\n    // choose later sequence number\n    if (aSeq > bSeq) {\n      return -1\n    } else if (aSeq < bSeq) {\n      return 1\n    }\n\n    const aValidty = a.entry.validity ?? new Uint8Array(0)\n    const bValidty = b.entry.validity ?? new Uint8Array(0)\n\n    // choose longer lived record if sequence numbers the same\n    const entryAValidityDate = parseRFC3339(uint8ArrayToString(aValidty))\n    const entryBValidityDate = parseRFC3339(uint8ArrayToString(bValidty))\n\n    if (entryAValidityDate.getTime() > entryBValidityDate.getTime()) {\n      return -1\n    }\n\n    if (entryAValidityDate.getTime() < entryBValidityDate.getTime()) {\n      return 1\n    }\n\n    return 0\n  })\n\n  return entries[0].index\n}\n"]},"metadata":{},"sourceType":"module"}