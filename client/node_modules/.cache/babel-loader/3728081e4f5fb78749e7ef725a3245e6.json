{"ast":null,"code":"import { CodeError } from '@libp2p/interfaces/errors';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\n/**\n * Select the best record out of the given records\n */\n\nexport function bestRecord(selectors, k, records) {\n  if (records.length === 0) {\n    const errMsg = 'No records given';\n    throw new CodeError(errMsg, 'ERR_NO_RECORDS_RECEIVED');\n  }\n\n  const kStr = uint8ArrayToString(k);\n  const parts = kStr.split('/');\n\n  if (parts.length < 3) {\n    const errMsg = 'Record key does not have a selector function';\n    throw new CodeError(errMsg, 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY');\n  }\n\n  const selector = selectors[parts[1].toString()];\n\n  if (selector == null) {\n    const errMsg = `Unrecognized key prefix: ${parts[1]}`;\n    throw new CodeError(errMsg, 'ERR_UNRECOGNIZED_KEY_PREFIX');\n  }\n\n  if (records.length === 1) {\n    return 0;\n  }\n\n  return selector(k, records);\n}\n/**\n * Best record selector, for public key records.\n * Simply returns the first record, as all valid public key\n * records are equal\n */\n\nfunction publickKey(k, records) {\n  return 0;\n}\n\nexport const selectors = {\n  pk: publickKey\n};","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,2BAA1B;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AAGA;;;;AAGA,OAAM,SAAUC,UAAV,CAAsBC,SAAtB,EAA4CC,CAA5C,EAA2DC,OAA3D,EAAgF;AACpF,MAAIA,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,UAAMC,MAAM,GAAG,kBAAf;AAEA,UAAM,IAAIR,SAAJ,CAAcQ,MAAd,EAAsB,yBAAtB,CAAN;AACD;;AAED,QAAMC,IAAI,GAAGP,kBAAkB,CAACG,CAAD,CAA/B;AACA,QAAMK,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,GAAX,CAAd;;AAEA,MAAID,KAAK,CAACH,MAAN,GAAe,CAAnB,EAAsB;AACpB,UAAMC,MAAM,GAAG,8CAAf;AAEA,UAAM,IAAIR,SAAJ,CAAcQ,MAAd,EAAsB,yCAAtB,CAAN;AACD;;AAED,QAAMI,QAAQ,GAAGR,SAAS,CAACM,KAAK,CAAC,CAAD,CAAL,CAAST,QAAT,EAAD,CAA1B;;AAEA,MAAIW,QAAQ,IAAI,IAAhB,EAAsB;AACpB,UAAMJ,MAAM,GAAG,4BAA4BE,KAAK,CAAC,CAAD,CAAG,EAAnD;AAEA,UAAM,IAAIV,SAAJ,CAAcQ,MAAd,EAAsB,6BAAtB,CAAN;AACD;;AAED,MAAIF,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,WAAO,CAAP;AACD;;AAED,SAAOK,QAAQ,CAACP,CAAD,EAAIC,OAAJ,CAAf;AACD;AAED;;;;;;AAKA,SAASO,UAAT,CAAqBR,CAArB,EAAoCC,OAApC,EAAyD;AACvD,SAAO,CAAP;AACD;;AAED,OAAO,MAAMF,SAAS,GAAc;AAClCU,IAAE,EAAED;AAD8B,CAA7B","names":["CodeError","toString","uint8ArrayToString","bestRecord","selectors","k","records","length","errMsg","kStr","parts","split","selector","publickKey","pk"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\record\\src\\selectors.ts"],"sourcesContent":["import { CodeError } from '@libp2p/interfaces/errors'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport type { Selectors } from '@libp2p/interface-dht'\n\n/**\n * Select the best record out of the given records\n */\nexport function bestRecord (selectors: Selectors, k: Uint8Array, records: Uint8Array[]): number {\n  if (records.length === 0) {\n    const errMsg = 'No records given'\n\n    throw new CodeError(errMsg, 'ERR_NO_RECORDS_RECEIVED')\n  }\n\n  const kStr = uint8ArrayToString(k)\n  const parts = kStr.split('/')\n\n  if (parts.length < 3) {\n    const errMsg = 'Record key does not have a selector function'\n\n    throw new CodeError(errMsg, 'ERR_NO_SELECTOR_FUNCTION_FOR_RECORD_KEY')\n  }\n\n  const selector = selectors[parts[1].toString()]\n\n  if (selector == null) {\n    const errMsg = `Unrecognized key prefix: ${parts[1]}`\n\n    throw new CodeError(errMsg, 'ERR_UNRECOGNIZED_KEY_PREFIX')\n  }\n\n  if (records.length === 1) {\n    return 0\n  }\n\n  return selector(k, records)\n}\n\n/**\n * Best record selector, for public key records.\n * Simply returns the first record, as all valid public key\n * records are equal\n */\nfunction publickKey (k: Uint8Array, records: Uint8Array[]): number {\n  return 0\n}\n\nexport const selectors: Selectors = {\n  pk: publickKey\n}\n"]},"metadata":{},"sourceType":"module"}