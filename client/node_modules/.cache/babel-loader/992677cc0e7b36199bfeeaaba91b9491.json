{"ast":null,"code":"import { decode } from '@ipld/dag-pb';\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').Resolve} Resolve\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\n\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} options\n   *\n   */\n  function yieldHamtDirectoryContent() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return listDirectory(node, path, resolve, depth, blockstore, options);\n  }\n\n  return yieldHamtDirectoryContent;\n};\n/**\n * @param {PBNode} node\n * @param {string} path\n * @param {Resolve} resolve\n * @param {number} depth\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} options\n *\n * @returns {UnixfsV1DirectoryContent}\n */\n\n\nasync function* listDirectory(node, path, resolve, depth, blockstore, options) {\n  const links = node.Links;\n\n  for (const link of links) {\n    const name = link.Name != null ? link.Name.substring(2) : null;\n\n    if (name) {\n      const result = await resolve(link.Hash, name, `${path}/${name}`, [], depth + 1, blockstore, options);\n      yield result.entry;\n    } else {\n      // descend into subshard\n      const block = await blockstore.get(link.Hash);\n      node = decode(block);\n\n      for await (const file of listDirectory(node, path, resolve, depth, blockstore, options)) {\n        yield file;\n      }\n    }\n  }\n}\n\nexport default hamtShardedDirectoryContent;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/hamt-sharded-directory.js"],"names":["decode","hamtShardedDirectoryContent","cid","node","unixfs","path","resolve","depth","blockstore","yieldHamtDirectoryContent","options","listDirectory","links","Links","link","name","Name","substring","result","Hash","entry","block","get","file"],"mappings":"AAAA,SAASA,MAAT,QAAuB,cAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMC,2BAA2B,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,UAA1C,KAAyD;AAC3F;AACF;AACA;AACA;AACE,WAASC,yBAAT,GAAkD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAChD,WAAOC,aAAa,CAACR,IAAD,EAAOE,IAAP,EAAaC,OAAb,EAAsBC,KAAtB,EAA6BC,UAA7B,EAAyCE,OAAzC,CAApB;AACD;;AAED,SAAOD,yBAAP;AACD,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,gBAAiBE,aAAjB,CAAgCR,IAAhC,EAAsCE,IAAtC,EAA4CC,OAA5C,EAAqDC,KAArD,EAA4DC,UAA5D,EAAwEE,OAAxE,EAAiF;AAC/E,QAAME,KAAK,GAAGT,IAAI,CAACU,KAAnB;;AAEA,OAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,UAAMG,IAAI,GAAGD,IAAI,CAACE,IAAL,IAAa,IAAb,GAAoBF,IAAI,CAACE,IAAL,CAAUC,SAAV,CAAoB,CAApB,CAApB,GAA6C,IAA1D;;AAEA,QAAIF,IAAJ,EAAU;AACR,YAAMG,MAAM,GAAG,MAAMZ,OAAO,CAACQ,IAAI,CAACK,IAAN,EAAYJ,IAAZ,EAAmB,GAAEV,IAAK,IAAGU,IAAK,EAAlC,EAAqC,EAArC,EAAyCR,KAAK,GAAG,CAAjD,EAAoDC,UAApD,EAAgEE,OAAhE,CAA5B;AAEA,YAAMQ,MAAM,CAACE,KAAb;AACD,KAJD,MAIO;AACL;AACA,YAAMC,KAAK,GAAG,MAAMb,UAAU,CAACc,GAAX,CAAeR,IAAI,CAACK,IAApB,CAApB;AACAhB,MAAAA,IAAI,GAAGH,MAAM,CAACqB,KAAD,CAAb;;AAEA,iBAAW,MAAME,IAAjB,IAAyBZ,aAAa,CAACR,IAAD,EAAOE,IAAP,EAAaC,OAAb,EAAsBC,KAAtB,EAA6BC,UAA7B,EAAyCE,OAAzC,CAAtC,EAAyF;AACvF,cAAMa,IAAN;AACD;AACF;AACF;AACF;;AAED,eAAetB,2BAAf","sourcesContent":["import { decode } from '@ipld/dag-pb'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').Resolve} Resolve\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n * @typedef {import('@ipld/dag-pb').PBNode} PBNode\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nconst hamtShardedDirectoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} options\n   *\n   */\n  function yieldHamtDirectoryContent (options = {}) {\n    return listDirectory(node, path, resolve, depth, blockstore, options)\n  }\n\n  return yieldHamtDirectoryContent\n}\n\n/**\n * @param {PBNode} node\n * @param {string} path\n * @param {Resolve} resolve\n * @param {number} depth\n * @param {Blockstore} blockstore\n * @param {ExporterOptions} options\n *\n * @returns {UnixfsV1DirectoryContent}\n */\nasync function * listDirectory (node, path, resolve, depth, blockstore, options) {\n  const links = node.Links\n\n  for (const link of links) {\n    const name = link.Name != null ? link.Name.substring(2) : null\n\n    if (name) {\n      const result = await resolve(link.Hash, name, `${path}/${name}`, [], depth + 1, blockstore, options)\n\n      yield result.entry\n    } else {\n      // descend into subshard\n      const block = await blockstore.get(link.Hash)\n      node = decode(block)\n\n      for await (const file of listDirectory(node, path, resolve, depth, blockstore, options)) {\n        yield file\n      }\n    }\n  }\n}\n\nexport default hamtShardedDirectoryContent\n"]},"metadata":{},"sourceType":"module"}