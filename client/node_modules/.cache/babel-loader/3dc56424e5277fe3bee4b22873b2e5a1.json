{"ast":null,"code":"import source from './source.js';\nimport sink from './sink.js';\nexport default ((socket, options) => {\n  options = options ?? {};\n  const connectedSource = source(socket);\n  let remoteAddress = options.remoteAddress;\n  let remotePort = options.remotePort;\n\n  if (socket.url != null) {\n    // only client->server sockets have urls, server->client connections do not\n    try {\n      const url = new URL(socket.url);\n      remoteAddress = url.hostname;\n      remotePort = parseInt(url.port, 10);\n    } catch {}\n  }\n\n  if (remoteAddress == null || remotePort == null) {\n    throw new Error('Remote connection did not have address and/or port');\n  }\n\n  const duplex = {\n    sink: sink(socket, options),\n    source: connectedSource,\n    connected: async () => await connectedSource.connected(),\n    close: async () => {\n      if (socket.readyState === socket.CONNECTING || socket.readyState === socket.OPEN) {\n        await new Promise(resolve => {\n          socket.addEventListener('close', () => {\n            resolve();\n          });\n          socket.close();\n        });\n      }\n    },\n    destroy: () => {\n      if (socket.terminate != null) {\n        socket.terminate();\n      } else {\n        socket.close();\n      }\n    },\n    remoteAddress,\n    remotePort,\n    socket\n  };\n  return duplex;\n});","map":{"version":3,"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AAqBA,gBAAe,CAACC,MAAD,EAAoBC,OAApB,KAAyE;AACtFA,SAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,QAAMC,eAAe,GAAGJ,MAAM,CAACE,MAAD,CAA9B;AACA,MAAIG,aAAa,GAAuBF,OAAO,CAACE,aAAhD;AACA,MAAIC,UAAU,GAAuBH,OAAO,CAACG,UAA7C;;AAEA,MAAIJ,MAAM,CAACK,GAAP,IAAc,IAAlB,EAAwB;AACtB;AACA,QAAI;AACF,YAAMA,GAAG,GAAG,IAAIC,GAAJ,CAAQN,MAAM,CAACK,GAAf,CAAZ;AACAF,mBAAa,GAAGE,GAAG,CAACE,QAApB;AACAH,gBAAU,GAAGI,QAAQ,CAACH,GAAG,CAACI,IAAL,EAAW,EAAX,CAArB;AACD,KAJD,CAIE,MAAM,CAAE;AACX;;AAED,MAAIN,aAAa,IAAI,IAAjB,IAAyBC,UAAU,IAAI,IAA3C,EAAiD;AAC/C,UAAM,IAAIM,KAAJ,CAAU,oDAAV,CAAN;AACD;;AAED,QAAMC,MAAM,GAAoB;AAC9BZ,QAAI,EAAEA,IAAI,CAACC,MAAD,EAASC,OAAT,CADoB;AAE9BH,UAAM,EAAEI,eAFsB;AAG9BU,aAAS,EAAE,YAAY,MAAMV,eAAe,CAACU,SAAhB,EAHC;AAI9BC,SAAK,EAAE,YAAW;AAChB,UAAIb,MAAM,CAACc,UAAP,KAAsBd,MAAM,CAACe,UAA7B,IAA2Cf,MAAM,CAACc,UAAP,KAAsBd,MAAM,CAACgB,IAA5E,EAAkF;AAChF,cAAM,IAAIC,OAAJ,CAAmBC,OAAD,IAAY;AAClClB,gBAAM,CAACmB,gBAAP,CAAwB,OAAxB,EAAiC,MAAK;AACpCD,mBAAO;AACR,WAFD;AAGAlB,gBAAM,CAACa,KAAP;AACD,SALK,CAAN;AAMD;AACF,KAb6B;AAc9BO,WAAO,EAAE,MAAK;AACZ,UAAIpB,MAAM,CAACqB,SAAP,IAAoB,IAAxB,EAA8B;AAC5BrB,cAAM,CAACqB,SAAP;AACD,OAFD,MAEO;AACLrB,cAAM,CAACa,KAAP;AACD;AACF,KApB6B;AAqB9BV,iBArB8B;AAsB9BC,cAtB8B;AAuB9BJ;AAvB8B,GAAhC;AA0BA,SAAOW,MAAP;AACD,CA/CD","names":["source","sink","socket","options","connectedSource","remoteAddress","remotePort","url","URL","hostname","parseInt","port","Error","duplex","connected","close","readyState","CONNECTING","OPEN","Promise","resolve","addEventListener","destroy","terminate"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\it-ws\\src\\duplex.ts"],"sourcesContent":["import source from './source.js'\nimport sink from './sink.js'\nimport type WebSocket from './web-socket.js'\nimport type { SinkOptions } from './sink.js'\nimport type { Duplex } from 'it-stream-types'\n\nexport interface DuplexWebSocket extends Duplex<Uint8Array, Uint8Array, Promise<void>> {\n  connected: () => Promise<void>\n  localAddress?: string\n  localPort?: number\n  remoteAddress: string\n  remotePort: number\n  close: () => Promise<void>\n  destroy: () => void\n  socket: WebSocket\n}\n\nexport interface DuplexWebSocketOptions extends SinkOptions {\n  remoteAddress?: string\n  remotePort?: number\n}\n\nexport default (socket: WebSocket, options?: DuplexWebSocketOptions): DuplexWebSocket => {\n  options = options ?? {}\n\n  const connectedSource = source(socket)\n  let remoteAddress: string | undefined = options.remoteAddress\n  let remotePort: number | undefined = options.remotePort\n\n  if (socket.url != null) {\n    // only client->server sockets have urls, server->client connections do not\n    try {\n      const url = new URL(socket.url)\n      remoteAddress = url.hostname\n      remotePort = parseInt(url.port, 10)\n    } catch {}\n  }\n\n  if (remoteAddress == null || remotePort == null) {\n    throw new Error('Remote connection did not have address and/or port')\n  }\n\n  const duplex: DuplexWebSocket = {\n    sink: sink(socket, options),\n    source: connectedSource,\n    connected: async () => await connectedSource.connected(),\n    close: async () => {\n      if (socket.readyState === socket.CONNECTING || socket.readyState === socket.OPEN) {\n        await new Promise<void>((resolve) => {\n          socket.addEventListener('close', () => {\n            resolve()\n          })\n          socket.close()\n        })\n      }\n    },\n    destroy: () => {\n      if (socket.terminate != null) {\n        socket.terminate()\n      } else {\n        socket.close()\n      }\n    },\n    remoteAddress,\n    remotePort,\n    socket\n  }\n\n  return duplex\n}\n"]},"metadata":{},"sourceType":"module"}