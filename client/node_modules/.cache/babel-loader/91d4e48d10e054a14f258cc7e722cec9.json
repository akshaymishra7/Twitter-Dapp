{"ast":null,"code":"import 'node-forge/lib/aes.js'; // @ts-expect-error types are missing\n\nimport forge from 'node-forge/lib/forge.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport function createCipheriv(mode, key, iv) {\n  const cipher2 = forge.cipher.createCipher('AES-CTR', uint8ArrayToString(key, 'ascii'));\n  cipher2.start({\n    iv: uint8ArrayToString(iv, 'ascii')\n  });\n  return {\n    update: data => {\n      cipher2.update(forge.util.createBuffer(uint8ArrayToString(data, 'ascii')));\n      return uint8ArrayFromString(cipher2.output.getBytes(), 'ascii');\n    }\n  };\n}\nexport function createDecipheriv(mode, key, iv) {\n  const cipher2 = forge.cipher.createDecipher('AES-CTR', uint8ArrayToString(key, 'ascii'));\n  cipher2.start({\n    iv: uint8ArrayToString(iv, 'ascii')\n  });\n  return {\n    update: data => {\n      cipher2.update(forge.util.createBuffer(uint8ArrayToString(data, 'ascii')));\n      return uint8ArrayFromString(cipher2.output.getBytes(), 'ascii');\n    }\n  };\n}","map":{"version":3,"mappings":"AACA,OAAO,uBAAP,C,CACA;;AACA,OAAOA,KAAP,MAAkB,yBAAlB;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AAMA,OAAM,SAAUC,cAAV,CAA0BC,IAA1B,EAAqCC,GAArC,EAAsDC,EAAtD,EAAoE;AACxE,QAAMC,OAAO,GAAGT,KAAK,CAACU,MAAN,CAAaC,YAAb,CAA0B,SAA1B,EAAqCP,kBAAkB,CAACG,GAAD,EAAM,OAAN,CAAvD,CAAhB;AACAE,SAAO,CAACG,KAAR,CAAc;AAAEJ,MAAE,EAAEJ,kBAAkB,CAACI,EAAD,EAAK,OAAL;AAAxB,GAAd;AACA,SAAO;AACLK,UAAM,EAAGC,IAAD,IAAqB;AAC3BL,aAAO,CAACI,MAAR,CAAeb,KAAK,CAACe,IAAN,CAAWC,YAAX,CAAwBZ,kBAAkB,CAACU,IAAD,EAAO,OAAP,CAA1C,CAAf;AACA,aAAOZ,oBAAoB,CAACO,OAAO,CAACQ,MAAR,CAAeC,QAAf,EAAD,EAA4B,OAA5B,CAA3B;AACD;AAJI,GAAP;AAMD;AAED,OAAM,SAAUC,gBAAV,CAA4Bb,IAA5B,EAAuCC,GAAvC,EAAwDC,EAAxD,EAAsE;AAC1E,QAAMC,OAAO,GAAGT,KAAK,CAACU,MAAN,CAAaU,cAAb,CAA4B,SAA5B,EAAuChB,kBAAkB,CAACG,GAAD,EAAM,OAAN,CAAzD,CAAhB;AACAE,SAAO,CAACG,KAAR,CAAc;AAAEJ,MAAE,EAAEJ,kBAAkB,CAACI,EAAD,EAAK,OAAL;AAAxB,GAAd;AACA,SAAO;AACLK,UAAM,EAAGC,IAAD,IAAqB;AAC3BL,aAAO,CAACI,MAAR,CAAeb,KAAK,CAACe,IAAN,CAAWC,YAAX,CAAwBZ,kBAAkB,CAACU,IAAD,EAAO,OAAP,CAA1C,CAAf;AACA,aAAOZ,oBAAoB,CAACO,OAAO,CAACQ,MAAR,CAAeC,QAAf,EAAD,EAA4B,OAA5B,CAA3B;AACD;AAJI,GAAP;AAMD","names":["forge","fromString","uint8ArrayFromString","toString","uint8ArrayToString","createCipheriv","mode","key","iv","cipher2","cipher","createCipher","start","update","data","util","createBuffer","output","getBytes","createDecipheriv","createDecipher"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\crypto\\src\\aes\\ciphers-browser.ts"],"sourcesContent":["\nimport 'node-forge/lib/aes.js'\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nexport interface Cipher {\n  update: (data: Uint8Array) => Uint8Array\n}\n\nexport function createCipheriv (mode: any, key: Uint8Array, iv: Uint8Array): Cipher {\n  const cipher2 = forge.cipher.createCipher('AES-CTR', uint8ArrayToString(key, 'ascii'))\n  cipher2.start({ iv: uint8ArrayToString(iv, 'ascii') })\n  return {\n    update: (data: Uint8Array) => {\n      cipher2.update(forge.util.createBuffer(uint8ArrayToString(data, 'ascii')))\n      return uint8ArrayFromString(cipher2.output.getBytes(), 'ascii')\n    }\n  }\n}\n\nexport function createDecipheriv (mode: any, key: Uint8Array, iv: Uint8Array): Cipher {\n  const cipher2 = forge.cipher.createDecipher('AES-CTR', uint8ArrayToString(key, 'ascii'))\n  cipher2.start({ iv: uint8ArrayToString(iv, 'ascii') })\n  return {\n    update: (data: Uint8Array) => {\n      cipher2.update(forge.util.createBuffer(uint8ArrayToString(data, 'ascii')))\n      return uint8ArrayFromString(cipher2.output.getBytes(), 'ascii')\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}