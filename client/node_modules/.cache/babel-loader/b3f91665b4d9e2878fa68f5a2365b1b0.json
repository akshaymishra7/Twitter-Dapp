{"ast":null,"code":"import { pipe } from 'it-pipe';\nimport * as lp from 'it-length-prefixed';\nimport { logger } from '@libp2p/logger';\nimport { Message, MESSAGE_TYPE } from '../message/index.js';\nimport { AddProviderHandler } from './handlers/add-provider.js';\nimport { FindNodeHandler } from './handlers/find-node.js';\nimport { GetProvidersHandler } from './handlers/get-providers.js';\nimport { GetValueHandler } from './handlers/get-value.js';\nimport { PingHandler } from './handlers/ping.js';\nimport { PutValueHandler } from './handlers/put-value.js';\nexport class RPC {\n  constructor(components, init) {\n    const {\n      providers,\n      peerRouting,\n      validators,\n      lan\n    } = init;\n    this.log = logger('libp2p:kad-dht:rpc');\n    this.routingTable = init.routingTable;\n    this.handlers = {\n      [MESSAGE_TYPE.GET_VALUE]: new GetValueHandler(components, {\n        peerRouting\n      }),\n      [MESSAGE_TYPE.PUT_VALUE]: new PutValueHandler(components, {\n        validators\n      }),\n      [MESSAGE_TYPE.FIND_NODE]: new FindNodeHandler(components, {\n        peerRouting,\n        lan\n      }),\n      [MESSAGE_TYPE.ADD_PROVIDER]: new AddProviderHandler({\n        providers\n      }),\n      [MESSAGE_TYPE.GET_PROVIDERS]: new GetProvidersHandler(components, {\n        peerRouting,\n        providers,\n        lan\n      }),\n      [MESSAGE_TYPE.PING]: new PingHandler()\n    };\n  }\n  /**\n   * Process incoming DHT messages\n   */\n\n\n  async handleMessage(peerId, msg) {\n    try {\n      await this.routingTable.add(peerId);\n    } catch (err) {\n      this.log.error('Failed to update the kbucket store', err);\n    } // get handler & execute it\n\n\n    const handler = this.handlers[msg.type];\n\n    if (handler == null) {\n      this.log.error(`no handler found for message type: ${msg.type}`);\n      return;\n    }\n\n    return await handler.handle(peerId, msg);\n  }\n  /**\n   * Handle incoming streams on the dht protocol\n   */\n\n\n  onIncomingStream(data) {\n    Promise.resolve().then(async () => {\n      const {\n        stream,\n        connection\n      } = data;\n      const peerId = connection.remotePeer;\n\n      try {\n        await this.routingTable.add(peerId);\n      } catch (err) {\n        this.log.error(err);\n      }\n\n      const self = this; // eslint-disable-line @typescript-eslint/no-this-alias\n\n      await pipe(stream, lp.decode(), async function* (source) {\n        for await (const msg of source) {\n          // handle the message\n          const desMessage = Message.deserialize(msg);\n          self.log('incoming %s from %p', desMessage.type, peerId);\n          const res = await self.handleMessage(peerId, desMessage); // Not all handlers will return a response\n\n          if (res != null) {\n            yield res.serialize();\n          }\n        }\n      }, lp.encode(), stream);\n    }).catch(err => {\n      this.log.error(err);\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["pipe","lp","logger","Message","MESSAGE_TYPE","AddProviderHandler","FindNodeHandler","GetProvidersHandler","GetValueHandler","PingHandler","PutValueHandler","RPC","constructor","components","init","providers","peerRouting","validators","lan","log","routingTable","handlers","GET_VALUE","PUT_VALUE","FIND_NODE","ADD_PROVIDER","GET_PROVIDERS","PING","handleMessage","peerId","msg","add","err","error","handler","type","handle","onIncomingStream","data","Promise","resolve","then","stream","connection","remotePeer","self","decode","source","desMessage","deserialize","res","serialize","encode","catch"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\kad-dht\\src\\rpc\\index.ts"],"sourcesContent":["import { pipe } from 'it-pipe'\nimport * as lp from 'it-length-prefixed'\nimport { Logger, logger } from '@libp2p/logger'\nimport type { RoutingTable } from '../routing-table'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport { Message, MESSAGE_TYPE } from '../message/index.js'\nimport { AddProviderHandler } from './handlers/add-provider.js'\nimport { FindNodeHandler, FindNodeHandlerComponents } from './handlers/find-node.js'\nimport { GetProvidersHandler, GetProvidersHandlerComponents } from './handlers/get-providers.js'\nimport { GetValueHandler, GetValueHandlerComponents } from './handlers/get-value.js'\nimport { PingHandler } from './handlers/ping.js'\nimport { PutValueHandler, PutValueHandlerComponents } from './handlers/put-value.js'\nimport type { IncomingStreamData } from '@libp2p/interface-registrar'\nimport type { Providers } from '../providers'\nimport type { PeerRouting } from '../peer-routing'\nimport type { Validators } from '@libp2p/interface-dht'\n\nexport interface DHTMessageHandler {\n  handle: (peerId: PeerId, msg: Message) => Promise<Message | undefined>\n}\n\nexport interface RPCInit {\n  routingTable: RoutingTable\n  providers: Providers\n  peerRouting: PeerRouting\n  validators: Validators\n  lan: boolean\n}\n\nexport interface RPCComponents extends GetValueHandlerComponents, PutValueHandlerComponents, FindNodeHandlerComponents, GetProvidersHandlerComponents {\n\n}\n\nexport class RPC {\n  private readonly handlers: Record<string, DHTMessageHandler>\n  private readonly routingTable: RoutingTable\n  private readonly log: Logger\n\n  constructor (components: RPCComponents, init: RPCInit) {\n    const { providers, peerRouting, validators, lan } = init\n\n    this.log = logger('libp2p:kad-dht:rpc')\n    this.routingTable = init.routingTable\n    this.handlers = {\n      [MESSAGE_TYPE.GET_VALUE]: new GetValueHandler(components, { peerRouting }),\n      [MESSAGE_TYPE.PUT_VALUE]: new PutValueHandler(components, { validators }),\n      [MESSAGE_TYPE.FIND_NODE]: new FindNodeHandler(components, { peerRouting, lan }),\n      [MESSAGE_TYPE.ADD_PROVIDER]: new AddProviderHandler({ providers }),\n      [MESSAGE_TYPE.GET_PROVIDERS]: new GetProvidersHandler(components, { peerRouting, providers, lan }),\n      [MESSAGE_TYPE.PING]: new PingHandler()\n    }\n  }\n\n  /**\n   * Process incoming DHT messages\n   */\n  async handleMessage (peerId: PeerId, msg: Message): Promise<Message | undefined> {\n    try {\n      await this.routingTable.add(peerId)\n    } catch (err: any) {\n      this.log.error('Failed to update the kbucket store', err)\n    }\n\n    // get handler & execute it\n    const handler = this.handlers[msg.type]\n\n    if (handler == null) {\n      this.log.error(`no handler found for message type: ${msg.type}`)\n      return\n    }\n\n    return await handler.handle(peerId, msg)\n  }\n\n  /**\n   * Handle incoming streams on the dht protocol\n   */\n  onIncomingStream (data: IncomingStreamData): void {\n    Promise.resolve().then(async () => {\n      const { stream, connection } = data\n      const peerId = connection.remotePeer\n\n      try {\n        await this.routingTable.add(peerId)\n      } catch (err: any) {\n        this.log.error(err)\n      }\n\n      const self = this // eslint-disable-line @typescript-eslint/no-this-alias\n\n      await pipe(\n        stream,\n        lp.decode(),\n        async function * (source) {\n          for await (const msg of source) {\n            // handle the message\n            const desMessage = Message.deserialize(msg)\n            self.log('incoming %s from %p', desMessage.type, peerId)\n            const res = await self.handleMessage(peerId, desMessage)\n\n            // Not all handlers will return a response\n            if (res != null) {\n              yield res.serialize()\n            }\n          }\n        },\n        lp.encode(),\n        stream\n      )\n    })\n      .catch(err => {\n        this.log.error(err)\n      })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}