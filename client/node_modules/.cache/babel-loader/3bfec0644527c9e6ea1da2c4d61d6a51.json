{"ast":null,"code":"'use strict';\n\nconst ModuleError = require('module-error');\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\nconst rangeOptions = new Set(['lt', 'lte', 'gt', 'gte']);\n\nmodule.exports = function (options, keyEncoding) {\n  const result = {};\n\n  for (const k in options) {\n    if (!hasOwnProperty.call(options, k)) continue;\n    if (k === 'keyEncoding' || k === 'valueEncoding') continue;\n\n    if (k === 'start' || k === 'end') {\n      throw new ModuleError(`The legacy range option '${k}' has been removed`, {\n        code: 'LEVEL_LEGACY'\n      });\n    } else if (k === 'encoding') {\n      // To help migrating to abstract-level\n      throw new ModuleError(\"The levelup-style 'encoding' alias has been removed, use 'valueEncoding' instead\", {\n        code: 'LEVEL_LEGACY'\n      });\n    }\n\n    if (rangeOptions.has(k)) {\n      // Note that we don't reject nullish and empty options here. While\n      // those types are invalid as keys, they are valid as range options.\n      result[k] = keyEncoding.encode(options[k]);\n    } else {\n      result[k] = options[k];\n    }\n  }\n\n  result.reverse = !!result.reverse;\n  result.limit = Number.isInteger(result.limit) && result.limit >= 0 ? result.limit : -1;\n  return result;\n};","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/abstract-level/lib/range-options.js"],"names":["ModuleError","require","hasOwnProperty","Object","prototype","rangeOptions","Set","module","exports","options","keyEncoding","result","k","call","code","has","encode","reverse","limit","Number","isInteger"],"mappings":"AAAA;;AAEA,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAMC,cAAc,GAAGC,MAAM,CAACC,SAAP,CAAiBF,cAAxC;AACA,MAAMG,YAAY,GAAG,IAAIC,GAAJ,CAAQ,CAAC,IAAD,EAAO,KAAP,EAAc,IAAd,EAAoB,KAApB,CAAR,CAArB;;AAEAC,MAAM,CAACC,OAAP,GAAiB,UAAUC,OAAV,EAAmBC,WAAnB,EAAgC;AAC/C,QAAMC,MAAM,GAAG,EAAf;;AAEA,OAAK,MAAMC,CAAX,IAAgBH,OAAhB,EAAyB;AACvB,QAAI,CAACP,cAAc,CAACW,IAAf,CAAoBJ,OAApB,EAA6BG,CAA7B,CAAL,EAAsC;AACtC,QAAIA,CAAC,KAAK,aAAN,IAAuBA,CAAC,KAAK,eAAjC,EAAkD;;AAElD,QAAIA,CAAC,KAAK,OAAN,IAAiBA,CAAC,KAAK,KAA3B,EAAkC;AAChC,YAAM,IAAIZ,WAAJ,CAAiB,4BAA2BY,CAAE,oBAA9C,EAAmE;AACvEE,QAAAA,IAAI,EAAE;AADiE,OAAnE,CAAN;AAGD,KAJD,MAIO,IAAIF,CAAC,KAAK,UAAV,EAAsB;AAC3B;AACA,YAAM,IAAIZ,WAAJ,CAAgB,kFAAhB,EAAoG;AACxGc,QAAAA,IAAI,EAAE;AADkG,OAApG,CAAN;AAGD;;AAED,QAAIT,YAAY,CAACU,GAAb,CAAiBH,CAAjB,CAAJ,EAAyB;AACvB;AACA;AACAD,MAAAA,MAAM,CAACC,CAAD,CAAN,GAAYF,WAAW,CAACM,MAAZ,CAAmBP,OAAO,CAACG,CAAD,CAA1B,CAAZ;AACD,KAJD,MAIO;AACLD,MAAAA,MAAM,CAACC,CAAD,CAAN,GAAYH,OAAO,CAACG,CAAD,CAAnB;AACD;AACF;;AAEDD,EAAAA,MAAM,CAACM,OAAP,GAAiB,CAAC,CAACN,MAAM,CAACM,OAA1B;AACAN,EAAAA,MAAM,CAACO,KAAP,GAAeC,MAAM,CAACC,SAAP,CAAiBT,MAAM,CAACO,KAAxB,KAAkCP,MAAM,CAACO,KAAP,IAAgB,CAAlD,GAAsDP,MAAM,CAACO,KAA7D,GAAqE,CAAC,CAArF;AAEA,SAAOP,MAAP;AACD,CA/BD","sourcesContent":["'use strict'\n\nconst ModuleError = require('module-error')\nconst hasOwnProperty = Object.prototype.hasOwnProperty\nconst rangeOptions = new Set(['lt', 'lte', 'gt', 'gte'])\n\nmodule.exports = function (options, keyEncoding) {\n  const result = {}\n\n  for (const k in options) {\n    if (!hasOwnProperty.call(options, k)) continue\n    if (k === 'keyEncoding' || k === 'valueEncoding') continue\n\n    if (k === 'start' || k === 'end') {\n      throw new ModuleError(`The legacy range option '${k}' has been removed`, {\n        code: 'LEVEL_LEGACY'\n      })\n    } else if (k === 'encoding') {\n      // To help migrating to abstract-level\n      throw new ModuleError(\"The levelup-style 'encoding' alias has been removed, use 'valueEncoding' instead\", {\n        code: 'LEVEL_LEGACY'\n      })\n    }\n\n    if (rangeOptions.has(k)) {\n      // Note that we don't reject nullish and empty options here. While\n      // those types are invalid as keys, they are valid as range options.\n      result[k] = keyEncoding.encode(options[k])\n    } else {\n      result[k] = options[k]\n    }\n  }\n\n  result.reverse = !!result.reverse\n  result.limit = Number.isInteger(result.limit) && result.limit >= 0 ? result.limit : -1\n\n  return result\n}\n"]},"metadata":{},"sourceType":"script"}