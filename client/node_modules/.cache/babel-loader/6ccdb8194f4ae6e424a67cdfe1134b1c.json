{"ast":null,"code":"/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n */\nexport function anySignal(signals) {\n  const controller = new globalThis.AbortController();\n\n  function onAbort() {\n    controller.abort();\n\n    for (const signal of signals) {\n      if (signal?.removeEventListener != null) {\n        signal.removeEventListener('abort', onAbort);\n      }\n    }\n  }\n\n  for (const signal of signals) {\n    if (signal?.aborted === true) {\n      onAbort();\n      break;\n    }\n\n    if (signal?.addEventListener != null) {\n      signal.addEventListener('abort', onAbort);\n    }\n  }\n\n  function clear() {\n    for (const signal of signals) {\n      if (signal?.removeEventListener != null) {\n        signal.removeEventListener('abort', onAbort);\n      }\n    }\n  }\n\n  const signal = controller.signal;\n  signal.clear = clear;\n  return signal;\n}","map":{"version":3,"mappings":"AAKA;;;;AAIA,OAAM,SAAUA,SAAV,CAAqBC,OAArB,EAAmE;AACvE,QAAMC,UAAU,GAAG,IAAIC,UAAU,CAACC,eAAf,EAAnB;;AAEA,WAASC,OAAT,GAAgB;AACdH,cAAU,CAACI,KAAX;;AAEA,SAAK,MAAMC,MAAX,IAAqBN,OAArB,EAA8B;AAC5B,UAAIM,MAAM,EAAEC,mBAAR,IAA+B,IAAnC,EAAyC;AACvCD,cAAM,CAACC,mBAAP,CAA2B,OAA3B,EAAoCH,OAApC;AACD;AACF;AACF;;AAED,OAAK,MAAME,MAAX,IAAqBN,OAArB,EAA8B;AAC5B,QAAIM,MAAM,EAAEE,OAAR,KAAoB,IAAxB,EAA8B;AAC5BJ,aAAO;AACP;AACD;;AAED,QAAIE,MAAM,EAAEG,gBAAR,IAA4B,IAAhC,EAAsC;AACpCH,YAAM,CAACG,gBAAP,CAAwB,OAAxB,EAAiCL,OAAjC;AACD;AACF;;AAED,WAASM,KAAT,GAAc;AACZ,SAAK,MAAMJ,MAAX,IAAqBN,OAArB,EAA8B;AAC5B,UAAIM,MAAM,EAAEC,mBAAR,IAA+B,IAAnC,EAAyC;AACvCD,cAAM,CAACC,mBAAP,CAA2B,OAA3B,EAAoCH,OAApC;AACD;AACF;AACF;;AAED,QAAME,MAAM,GAAGL,UAAU,CAACK,MAA1B;AACAA,QAAM,CAACI,KAAP,GAAeA,KAAf;AAEA,SAAOJ,MAAP;AACD","names":["anySignal","signals","controller","globalThis","AbortController","onAbort","abort","signal","removeEventListener","aborted","addEventListener","clear"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\mplex\\node_modules\\any-signal\\src\\index.ts"],"sourcesContent":["\nexport interface ClearableSignal extends AbortSignal {\n  clear: () => void\n}\n\n/**\n * Takes an array of AbortSignals and returns a single signal.\n * If any signals are aborted, the returned signal will be aborted.\n */\nexport function anySignal (signals: Array<AbortSignal | undefined | null>): ClearableSignal {\n  const controller = new globalThis.AbortController()\n\n  function onAbort (): void {\n    controller.abort()\n\n    for (const signal of signals) {\n      if (signal?.removeEventListener != null) {\n        signal.removeEventListener('abort', onAbort)\n      }\n    }\n  }\n\n  for (const signal of signals) {\n    if (signal?.aborted === true) {\n      onAbort()\n      break\n    }\n\n    if (signal?.addEventListener != null) {\n      signal.addEventListener('abort', onAbort)\n    }\n  }\n\n  function clear (): void {\n    for (const signal of signals) {\n      if (signal?.removeEventListener != null) {\n        signal.removeEventListener('abort', onAbort)\n      }\n    }\n  }\n\n  const signal = controller.signal as ClearableSignal\n  signal.clear = clear\n\n  return signal\n}\n"]},"metadata":{},"sourceType":"module"}