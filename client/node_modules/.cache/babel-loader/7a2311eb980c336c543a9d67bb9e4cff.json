{"ast":null,"code":"export class TimeoutError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'TimeoutError';\n  }\n\n}\n/**\nAn error to be thrown when the request is aborted by AbortController.\nDOMException is thrown instead of this Error when DOMException is available.\n*/\n\nexport class AbortError extends Error {\n  constructor(message) {\n    super();\n    this.name = 'AbortError';\n    this.message = message;\n  }\n\n}\n/**\nTODO: Remove AbortError and just throw DOMException when targeting Node 18.\n*/\n\nconst getDOMException = errorMessage => globalThis.DOMException === undefined ? new AbortError(errorMessage) : new DOMException(errorMessage);\n/**\nTODO: Remove below function and just 'reject(signal.reason)' when targeting Node 18.\n*/\n\n\nconst getAbortedReason = signal => {\n  const reason = signal.reason === undefined ? getDOMException('This operation was aborted.') : signal.reason;\n  return reason instanceof Error ? reason : getDOMException(reason);\n};\n\nexport default function pTimeout(promise, milliseconds, fallback, options) {\n  let timer;\n  const cancelablePromise = new Promise((resolve, reject) => {\n    if (typeof milliseconds !== 'number' || Math.sign(milliseconds) !== 1) {\n      throw new TypeError(`Expected \\`milliseconds\\` to be a positive number, got \\`${milliseconds}\\``);\n    }\n\n    if (milliseconds === Number.POSITIVE_INFINITY) {\n      resolve(promise);\n      return;\n    }\n\n    options = {\n      customTimers: {\n        setTimeout,\n        clearTimeout\n      },\n      ...options\n    };\n\n    if (options.signal) {\n      const {\n        signal\n      } = options;\n\n      if (signal.aborted) {\n        reject(getAbortedReason(signal));\n      }\n\n      signal.addEventListener('abort', () => {\n        reject(getAbortedReason(signal));\n      });\n    }\n\n    timer = options.customTimers.setTimeout.call(undefined, () => {\n      if (typeof fallback === 'function') {\n        try {\n          resolve(fallback());\n        } catch (error) {\n          reject(error);\n        }\n\n        return;\n      }\n\n      const message = typeof fallback === 'string' ? fallback : `Promise timed out after ${milliseconds} milliseconds`;\n      const timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);\n\n      if (typeof promise.cancel === 'function') {\n        promise.cancel();\n      }\n\n      reject(timeoutError);\n    }, milliseconds);\n\n    (async () => {\n      try {\n        resolve(await promise);\n      } catch (error) {\n        reject(error);\n      } finally {\n        options.customTimers.clearTimeout.call(undefined, timer);\n      }\n    })();\n  });\n\n  cancelablePromise.clear = () => {\n    clearTimeout(timer);\n    timer = undefined;\n  };\n\n  return cancelablePromise;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/p-queue/node_modules/p-timeout/index.js"],"names":["TimeoutError","Error","constructor","message","name","AbortError","getDOMException","errorMessage","globalThis","DOMException","undefined","getAbortedReason","signal","reason","pTimeout","promise","milliseconds","fallback","options","timer","cancelablePromise","Promise","resolve","reject","Math","sign","TypeError","Number","POSITIVE_INFINITY","customTimers","setTimeout","clearTimeout","aborted","addEventListener","call","error","timeoutError","cancel","clear"],"mappings":"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","sourcesContent":["export class TimeoutError extends Error {\n\tconstructor(message) {\n\t\tsuper(message);\n\t\tthis.name = 'TimeoutError';\n\t}\n}\n\n/**\nAn error to be thrown when the request is aborted by AbortController.\nDOMException is thrown instead of this Error when DOMException is available.\n*/\nexport class AbortError extends Error {\n\tconstructor(message) {\n\t\tsuper();\n\t\tthis.name = 'AbortError';\n\t\tthis.message = message;\n\t}\n}\n\n/**\nTODO: Remove AbortError and just throw DOMException when targeting Node 18.\n*/\nconst getDOMException = errorMessage => globalThis.DOMException === undefined ?\n\tnew AbortError(errorMessage) :\n\tnew DOMException(errorMessage);\n\n/**\nTODO: Remove below function and just 'reject(signal.reason)' when targeting Node 18.\n*/\nconst getAbortedReason = signal => {\n\tconst reason = signal.reason === undefined ?\n\t\tgetDOMException('This operation was aborted.') :\n\t\tsignal.reason;\n\n\treturn reason instanceof Error ? reason : getDOMException(reason);\n};\n\nexport default function pTimeout(promise, milliseconds, fallback, options) {\n\tlet timer;\n\n\tconst cancelablePromise = new Promise((resolve, reject) => {\n\t\tif (typeof milliseconds !== 'number' || Math.sign(milliseconds) !== 1) {\n\t\t\tthrow new TypeError(`Expected \\`milliseconds\\` to be a positive number, got \\`${milliseconds}\\``);\n\t\t}\n\n\t\tif (milliseconds === Number.POSITIVE_INFINITY) {\n\t\t\tresolve(promise);\n\t\t\treturn;\n\t\t}\n\n\t\toptions = {\n\t\t\tcustomTimers: {setTimeout, clearTimeout},\n\t\t\t...options\n\t\t};\n\n\t\tif (options.signal) {\n\t\t\tconst {signal} = options;\n\t\t\tif (signal.aborted) {\n\t\t\t\treject(getAbortedReason(signal));\n\t\t\t}\n\n\t\t\tsignal.addEventListener('abort', () => {\n\t\t\t\treject(getAbortedReason(signal));\n\t\t\t});\n\t\t}\n\n\t\ttimer = options.customTimers.setTimeout.call(undefined, () => {\n\t\t\tif (typeof fallback === 'function') {\n\t\t\t\ttry {\n\t\t\t\t\tresolve(fallback());\n\t\t\t\t} catch (error) {\n\t\t\t\t\treject(error);\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst message = typeof fallback === 'string' ? fallback : `Promise timed out after ${milliseconds} milliseconds`;\n\t\t\tconst timeoutError = fallback instanceof Error ? fallback : new TimeoutError(message);\n\n\t\t\tif (typeof promise.cancel === 'function') {\n\t\t\t\tpromise.cancel();\n\t\t\t}\n\n\t\t\treject(timeoutError);\n\t\t}, milliseconds);\n\n\t\t(async () => {\n\t\t\ttry {\n\t\t\t\tresolve(await promise);\n\t\t\t} catch (error) {\n\t\t\t\treject(error);\n\t\t\t} finally {\n\t\t\t\toptions.customTimers.clearTimeout.call(undefined, timer);\n\t\t\t}\n\t\t})();\n\t});\n\n\tcancelablePromise.clear = () => {\n\t\tclearTimeout(timer);\n\t\ttimer = undefined;\n\t};\n\n\treturn cancelablePromise;\n}\n"]},"metadata":{},"sourceType":"module"}