{"ast":null,"code":"/**\n * @template {any} T\n * @typedef {import('./coding').IteratorChannel<T>} IteratorChannel\n */\nfunction noop() {}\n/**\n * @template {any} T\n * @returns {IteratorChannel<T>}\n */\n\n\nexport function create() {\n  /** @type {T[]} */\n  const chunkQueue = [];\n  /** @type {Promise<void> | null} */\n\n  let drainer = null;\n  let drainerResolver = noop;\n  let ended = false;\n  /** @type {Promise<IteratorResult<T>> | null} */\n\n  let outWait = null;\n  let outWaitResolver = noop;\n\n  const makeDrainer = () => {\n    if (!drainer) {\n      drainer = new Promise(resolve => {\n        drainerResolver = () => {\n          drainer = null;\n          drainerResolver = noop;\n          resolve();\n        };\n      });\n    }\n\n    return drainer;\n  };\n  /**\n   * @returns {IteratorChannel<T>}\n   */\n\n\n  const writer = {\n    /**\n     * @param {T} chunk\n     * @returns {Promise<void>}\n     */\n    write(chunk) {\n      chunkQueue.push(chunk);\n      const drainer = makeDrainer();\n      outWaitResolver();\n      return drainer;\n    },\n\n    async end() {\n      ended = true;\n      const drainer = makeDrainer();\n      outWaitResolver();\n      await drainer;\n      /* c8 ignore next 2 */\n      // Node.js 12 c8 bug\n    }\n\n  };\n  /** @type {AsyncIterator<T>} */\n\n  const iterator = {\n    /** @returns {Promise<IteratorResult<T>>} */\n    async next() {\n      const chunk = chunkQueue.shift();\n\n      if (chunk) {\n        if (chunkQueue.length === 0) {\n          drainerResolver();\n        }\n\n        return {\n          done: false,\n          value: chunk\n        };\n      }\n\n      if (ended) {\n        drainerResolver();\n        return {\n          done: true,\n          value: undefined\n        };\n      }\n\n      if (!outWait) {\n        outWait = new Promise(resolve => {\n          outWaitResolver = () => {\n            outWait = null;\n            outWaitResolver = noop;\n            return resolve(iterator.next());\n          };\n        });\n      }\n\n      return outWait;\n      /* c8 ignore next 2 */\n      // Node.js 12 c8 bug\n    }\n\n  };\n  return {\n    writer,\n    iterator\n  };\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/@ipld/car/src/iterator-channel.js"],"names":["noop","create","chunkQueue","drainer","drainerResolver","ended","outWait","outWaitResolver","makeDrainer","Promise","resolve","writer","write","chunk","push","end","iterator","next","shift","length","done","value","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AAEA,SAASA,IAAT,GAAiB,CAAE;AAEnB;AACA;AACA;AACA;;;AACA,OAAO,SAASC,MAAT,GAAmB;AACxB;AACA,QAAMC,UAAU,GAAG,EAAnB;AACA;;AACA,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIC,eAAe,GAAGJ,IAAtB;AACA,MAAIK,KAAK,GAAG,KAAZ;AACA;;AACA,MAAIC,OAAO,GAAG,IAAd;AACA,MAAIC,eAAe,GAAGP,IAAtB;;AAEA,QAAMQ,WAAW,GAAG,MAAM;AACxB,QAAI,CAACL,OAAL,EAAc;AACZA,MAAAA,OAAO,GAAG,IAAIM,OAAJ,CAAaC,OAAD,IAAa;AACjCN,QAAAA,eAAe,GAAG,MAAM;AACtBD,UAAAA,OAAO,GAAG,IAAV;AACAC,UAAAA,eAAe,GAAGJ,IAAlB;AACAU,UAAAA,OAAO;AACR,SAJD;AAKD,OANS,CAAV;AAOD;;AACD,WAAOP,OAAP;AACD,GAXD;AAaA;AACF;AACA;;;AACE,QAAMQ,MAAM,GAAG;AACb;AACJ;AACA;AACA;AACIC,IAAAA,KAAK,CAAEC,KAAF,EAAS;AACZX,MAAAA,UAAU,CAACY,IAAX,CAAgBD,KAAhB;AACA,YAAMV,OAAO,GAAGK,WAAW,EAA3B;AACAD,MAAAA,eAAe;AACf,aAAOJ,OAAP;AACD,KAVY;;AAYb,UAAMY,GAAN,GAAa;AACXV,MAAAA,KAAK,GAAG,IAAR;AACA,YAAMF,OAAO,GAAGK,WAAW,EAA3B;AACAD,MAAAA,eAAe;AACf,YAAMJ,OAAN;AACA;AACA;AACD;;AAnBY,GAAf;AAsBA;;AACA,QAAMa,QAAQ,GAAG;AACf;AACA,UAAMC,IAAN,GAAc;AACZ,YAAMJ,KAAK,GAAGX,UAAU,CAACgB,KAAX,EAAd;;AACA,UAAIL,KAAJ,EAAW;AACT,YAAIX,UAAU,CAACiB,MAAX,KAAsB,CAA1B,EAA6B;AAC3Bf,UAAAA,eAAe;AAChB;;AACD,eAAO;AAAEgB,UAAAA,IAAI,EAAE,KAAR;AAAeC,UAAAA,KAAK,EAAER;AAAtB,SAAP;AACD;;AAED,UAAIR,KAAJ,EAAW;AACTD,QAAAA,eAAe;AACf,eAAO;AAAEgB,UAAAA,IAAI,EAAE,IAAR;AAAcC,UAAAA,KAAK,EAAEC;AAArB,SAAP;AACD;;AAED,UAAI,CAAChB,OAAL,EAAc;AACZA,QAAAA,OAAO,GAAG,IAAIG,OAAJ,CAAaC,OAAD,IAAa;AACjCH,UAAAA,eAAe,GAAG,MAAM;AACtBD,YAAAA,OAAO,GAAG,IAAV;AACAC,YAAAA,eAAe,GAAGP,IAAlB;AACA,mBAAOU,OAAO,CAACM,QAAQ,CAACC,IAAT,EAAD,CAAd;AACD,WAJD;AAKD,SANS,CAAV;AAOD;;AAED,aAAOX,OAAP;AACA;AACA;AACD;;AA7Bc,GAAjB;AAgCA,SAAO;AAAEK,IAAAA,MAAF;AAAUK,IAAAA;AAAV,GAAP;AACD","sourcesContent":["/**\n * @template {any} T\n * @typedef {import('./coding').IteratorChannel<T>} IteratorChannel\n */\n\nfunction noop () {}\n\n/**\n * @template {any} T\n * @returns {IteratorChannel<T>}\n */\nexport function create () {\n  /** @type {T[]} */\n  const chunkQueue = []\n  /** @type {Promise<void> | null} */\n  let drainer = null\n  let drainerResolver = noop\n  let ended = false\n  /** @type {Promise<IteratorResult<T>> | null} */\n  let outWait = null\n  let outWaitResolver = noop\n\n  const makeDrainer = () => {\n    if (!drainer) {\n      drainer = new Promise((resolve) => {\n        drainerResolver = () => {\n          drainer = null\n          drainerResolver = noop\n          resolve()\n        }\n      })\n    }\n    return drainer\n  }\n\n  /**\n   * @returns {IteratorChannel<T>}\n   */\n  const writer = {\n    /**\n     * @param {T} chunk\n     * @returns {Promise<void>}\n     */\n    write (chunk) {\n      chunkQueue.push(chunk)\n      const drainer = makeDrainer()\n      outWaitResolver()\n      return drainer\n    },\n\n    async end () {\n      ended = true\n      const drainer = makeDrainer()\n      outWaitResolver()\n      await drainer\n      /* c8 ignore next 2 */\n      // Node.js 12 c8 bug\n    }\n  }\n\n  /** @type {AsyncIterator<T>} */\n  const iterator = {\n    /** @returns {Promise<IteratorResult<T>>} */\n    async next () {\n      const chunk = chunkQueue.shift()\n      if (chunk) {\n        if (chunkQueue.length === 0) {\n          drainerResolver()\n        }\n        return { done: false, value: chunk }\n      }\n\n      if (ended) {\n        drainerResolver()\n        return { done: true, value: undefined }\n      }\n\n      if (!outWait) {\n        outWait = new Promise((resolve) => {\n          outWaitResolver = () => {\n            outWait = null\n            outWaitResolver = noop\n            return resolve(iterator.next())\n          }\n        })\n      }\n\n      return outWait\n      /* c8 ignore next 2 */\n      // Node.js 12 c8 bug\n    }\n  }\n\n  return { writer, iterator }\n}\n"]},"metadata":{},"sourceType":"module"}