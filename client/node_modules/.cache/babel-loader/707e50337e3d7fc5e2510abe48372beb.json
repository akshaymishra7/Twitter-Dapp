{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * Provides strategies to sort a list of multiaddrs.\n *\n * @example\n *\n * ```typescript\n * import { publicAddressesFirst } from '@libp2p/utils/address-sort'\n * import { multiaddr } from '@multformats/multiaddr'\n *\n *\n * const addresses = [\n *   multiaddr('/ip4/127.0.0.1/tcp/9000'),\n *   multiaddr('/ip4/82.41.53.1/tcp/9000')\n * ].sort(publicAddressesFirst)\n *\n * console.info(addresses)\n * // ['/ip4/82.41.53.1/tcp/9000', '/ip4/127.0.0.1/tcp/9000']\n * ```\n */\nimport { isPrivate } from './multiaddr/is-private.js';\n/**\n * Compare function for array.sort().\n * This sort aims to move the private addresses to the end of the array.\n * In case of equality, a certified address will come first.\n */\n\nexport function publicAddressesFirst(a, b) {\n  const isAPrivate = isPrivate(a.multiaddr);\n  const isBPrivate = isPrivate(b.multiaddr);\n\n  if (isAPrivate && !isBPrivate) {\n    return 1;\n  } else if (!isAPrivate && isBPrivate) {\n    return -1;\n  } // Check certified?\n\n\n  if (a.isCertified && !b.isCertified) {\n    return -1;\n  } else if (!a.isCertified && b.isCertified) {\n    return 1;\n  }\n\n  return 0;\n}\n/**\n * A test thing\n */\n\nexport async function something() {\n  return Uint8Array.from([0, 1, 2]);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASA,SAAT,QAA0B,2BAA1B;AAEA;;;;;;AAKA,OAAM,SAAUC,oBAAV,CAAgCC,CAAhC,EAA4CC,CAA5C,EAAsD;AAC1D,QAAMC,UAAU,GAAGJ,SAAS,CAACE,CAAC,CAACG,SAAH,CAA5B;AACA,QAAMC,UAAU,GAAGN,SAAS,CAACG,CAAC,CAACE,SAAH,CAA5B;;AAEA,MAAID,UAAU,IAAI,CAACE,UAAnB,EAA+B;AAC7B,WAAO,CAAP;AACD,GAFD,MAEO,IAAI,CAACF,UAAD,IAAeE,UAAnB,EAA+B;AACpC,WAAO,CAAC,CAAR;AACD,GARyD,CAS1D;;;AACA,MAAIJ,CAAC,CAACK,WAAF,IAAiB,CAACJ,CAAC,CAACI,WAAxB,EAAqC;AACnC,WAAO,CAAC,CAAR;AACD,GAFD,MAEO,IAAI,CAACL,CAAC,CAACK,WAAH,IAAkBJ,CAAC,CAACI,WAAxB,EAAqC;AAC1C,WAAO,CAAP;AACD;;AAED,SAAO,CAAP;AACD;AAED;;;;AAGA,OAAO,eAAeC,SAAf,GAAwB;AAC7B,SAAOC,UAAU,CAACC,IAAX,CAAgB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAhB,CAAP;AACD","names":["isPrivate","publicAddressesFirst","a","b","isAPrivate","multiaddr","isBPrivate","isCertified","something","Uint8Array","from"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\utils\\src\\address-sort.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * Provides strategies to sort a list of multiaddrs.\n *\n * @example\n *\n * ```typescript\n * import { publicAddressesFirst } from '@libp2p/utils/address-sort'\n * import { multiaddr } from '@multformats/multiaddr'\n *\n *\n * const addresses = [\n *   multiaddr('/ip4/127.0.0.1/tcp/9000'),\n *   multiaddr('/ip4/82.41.53.1/tcp/9000')\n * ].sort(publicAddressesFirst)\n *\n * console.info(addresses)\n * // ['/ip4/82.41.53.1/tcp/9000', '/ip4/127.0.0.1/tcp/9000']\n * ```\n */\n\nimport type { Address } from '@libp2p/interface-peer-store'\nimport { isPrivate } from './multiaddr/is-private.js'\n\n/**\n * Compare function for array.sort().\n * This sort aims to move the private addresses to the end of the array.\n * In case of equality, a certified address will come first.\n */\nexport function publicAddressesFirst (a: Address, b: Address): -1 | 0 | 1 {\n  const isAPrivate = isPrivate(a.multiaddr)\n  const isBPrivate = isPrivate(b.multiaddr)\n\n  if (isAPrivate && !isBPrivate) {\n    return 1\n  } else if (!isAPrivate && isBPrivate) {\n    return -1\n  }\n  // Check certified?\n  if (a.isCertified && !b.isCertified) {\n    return -1\n  } else if (!a.isCertified && b.isCertified) {\n    return 1\n  }\n\n  return 0\n}\n\n/**\n * A test thing\n */\nexport async function something (): Promise<Uint8Array> {\n  return Uint8Array.from([0, 1, 2])\n}\n"]},"metadata":{},"sourceType":"module"}