{"ast":null,"code":"import isIpPrivate from 'private-ip';\n/**\n * Check if a given multiaddr has a private address.\n */\n\nexport function isPrivate(ma) {\n  try {\n    const {\n      address\n    } = ma.nodeAddress();\n    return Boolean(isIpPrivate(address));\n  } catch {\n    return true;\n  }\n}","map":{"version":3,"mappings":"AACA,OAAOA,WAAP,MAAwB,YAAxB;AAEA;;;;AAGA,OAAM,SAAUC,SAAV,CAAqBC,EAArB,EAAkC;AACtC,MAAI;AACF,UAAM;AAAEC;AAAF,QAAcD,EAAE,CAACE,WAAH,EAApB;AAEA,WAAOC,OAAO,CAACL,WAAW,CAACG,OAAD,CAAZ,CAAd;AACD,GAJD,CAIE,MAAM;AACN,WAAO,IAAP;AACD;AACF","names":["isIpPrivate","isPrivate","ma","address","nodeAddress","Boolean"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\utils\\src\\multiaddr\\is-private.ts"],"sourcesContent":["import type { Multiaddr } from '@multiformats/multiaddr'\nimport isIpPrivate from 'private-ip'\n\n/**\n * Check if a given multiaddr has a private address.\n */\nexport function isPrivate (ma: Multiaddr): boolean {\n  try {\n    const { address } = ma.nodeAddress()\n\n    return Boolean(isIpPrivate(address))\n  } catch {\n    return true\n  }\n}\n"]},"metadata":{},"sourceType":"module"}