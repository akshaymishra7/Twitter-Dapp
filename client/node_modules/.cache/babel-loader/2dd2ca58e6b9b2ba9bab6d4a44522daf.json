{"ast":null,"code":"import errCode from 'err-code';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as dagCbor from '@ipld/dag-cbor';\nimport * as raw from 'multiformats/codecs/raw';\nimport { identity } from 'multiformats/hashes/identity';\nimport dagPbResolver from './unixfs-v1/index.js';\nimport rawResolver from './raw.js';\nimport dagCborResolver from './dag-cbor.js';\nimport identifyResolver from './identity.js';\n/**\n * @typedef {import('../types').Resolver} Resolver\n * @typedef {import('../types').Resolve} Resolve\n */\n\n/**\n * @type {{ [ key: string ]: Resolver }}\n */\n\nconst resolvers = {\n  [dagPb.code]: dagPbResolver,\n  [raw.code]: rawResolver,\n  [dagCbor.code]: dagCborResolver,\n  [identity.code]: identifyResolver\n};\n/**\n * @type {Resolve}\n */\n\nfunction resolve(cid, name, path, toResolve, depth, blockstore, options) {\n  const resolver = resolvers[cid.code];\n\n  if (!resolver) {\n    throw errCode(new Error(`No resolver for code ${cid.code}`), 'ERR_NO_RESOLVER');\n  }\n\n  return resolver(cid, name, path, toResolve, resolve, depth, blockstore, options);\n}\n\nexport default resolve;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-unixfs-exporter/src/resolvers/index.js"],"names":["errCode","dagPb","dagCbor","raw","identity","dagPbResolver","rawResolver","dagCborResolver","identifyResolver","resolvers","code","resolve","cid","name","path","toResolve","depth","blockstore","options","resolver","Error"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AAEA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,gBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,yBAArB;AACA,SAASC,QAAT,QAAyB,8BAAzB;AAEA,OAAOC,aAAP,MAA0B,sBAA1B;AACA,OAAOC,WAAP,MAAwB,UAAxB;AACA,OAAOC,eAAP,MAA4B,eAA5B;AACA,OAAOC,gBAAP,MAA6B,eAA7B;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMC,SAAS,GAAG;AAChB,GAACR,KAAK,CAACS,IAAP,GAAcL,aADE;AAEhB,GAACF,GAAG,CAACO,IAAL,GAAYJ,WAFI;AAGhB,GAACJ,OAAO,CAACQ,IAAT,GAAgBH,eAHA;AAIhB,GAACH,QAAQ,CAACM,IAAV,GAAiBF;AAJD,CAAlB;AAOA;AACA;AACA;;AACA,SAASG,OAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6BC,IAA7B,EAAmCC,SAAnC,EAA8CC,KAA9C,EAAqDC,UAArD,EAAiEC,OAAjE,EAA0E;AACxE,QAAMC,QAAQ,GAAGV,SAAS,CAACG,GAAG,CAACF,IAAL,CAA1B;;AAEA,MAAI,CAACS,QAAL,EAAe;AACb,UAAMnB,OAAO,CAAC,IAAIoB,KAAJ,CAAW,wBAAuBR,GAAG,CAACF,IAAK,EAA3C,CAAD,EAAgD,iBAAhD,CAAb;AACD;;AAED,SAAOS,QAAQ,CAACP,GAAD,EAAMC,IAAN,EAAYC,IAAZ,EAAkBC,SAAlB,EAA6BJ,OAA7B,EAAsCK,KAAtC,EAA6CC,UAA7C,EAAyDC,OAAzD,CAAf;AACD;;AAED,eAAeP,OAAf","sourcesContent":["import errCode from 'err-code'\n\nimport * as dagPb from '@ipld/dag-pb'\nimport * as dagCbor from '@ipld/dag-cbor'\nimport * as raw from 'multiformats/codecs/raw'\nimport { identity } from 'multiformats/hashes/identity'\n\nimport dagPbResolver from './unixfs-v1/index.js'\nimport rawResolver from './raw.js'\nimport dagCborResolver from './dag-cbor.js'\nimport identifyResolver from './identity.js'\n\n/**\n * @typedef {import('../types').Resolver} Resolver\n * @typedef {import('../types').Resolve} Resolve\n */\n\n/**\n * @type {{ [ key: string ]: Resolver }}\n */\nconst resolvers = {\n  [dagPb.code]: dagPbResolver,\n  [raw.code]: rawResolver,\n  [dagCbor.code]: dagCborResolver,\n  [identity.code]: identifyResolver\n}\n\n/**\n * @type {Resolve}\n */\nfunction resolve (cid, name, path, toResolve, depth, blockstore, options) {\n  const resolver = resolvers[cid.code]\n\n  if (!resolver) {\n    throw errCode(new Error(`No resolver for code ${cid.code}`), 'ERR_NO_RESOLVER')\n  }\n\n  return resolver(cid, name, path, toResolve, resolve, depth, blockstore, options)\n}\n\nexport default resolve\n"]},"metadata":{},"sourceType":"module"}