{"ast":null,"code":"import { createBitswap } from 'ipfs-bitswap';\nimport { createLibp2p } from './libp2p.js';\nimport { multiaddr } from '@multiformats/multiaddr';\nimport errCode from 'err-code';\nimport { BlockStorage } from '../block-storage.js';\n/**\n * @typedef {object} Online\n * @property {libp2p} libp2p\n * @property {Bitswap} bitswap\n *\n * @typedef {object} Options\n * @property {PeerId} options.peerId\n * @property {Repo} options.repo\n * @property {Print} options.print\n * @property {IPFSOptions} options.options\n * @property {import('ipfs-core-utils/multihashes').Multihashes} options.hashers\n *\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('ipfs-repo').IPFSRepo} Repo\n * @typedef {import('../types').Print} Print\n * @typedef {import('libp2p').Libp2p} libp2p\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\nexport class Network {\n  /**\n   * @param {PeerId} peerId\n   * @param {libp2p} libp2p\n   * @param {Bitswap} bitswap\n   * @param {Repo} repo\n   * @param {BlockStorage} blockstore\n   */\n  constructor(peerId, libp2p, bitswap, repo, blockstore) {\n    this.peerId = peerId;\n    this.libp2p = libp2p;\n    this.bitswap = bitswap;\n    this.repo = repo;\n    this.blockstore = blockstore;\n  }\n  /**\n   * @param {Options} options\n   */\n\n\n  static async start(_ref) {\n    let {\n      peerId,\n      repo,\n      print,\n      hashers,\n      options\n    } = _ref;\n\n    // Need to ensure that repo is open as it could have been closed between\n    // `init` and `start`.\n    if (repo.closed) {\n      await repo.open();\n    }\n    /** @type {IPFSConfig} */\n\n\n    const config = await repo.config.getAll();\n    const libp2p = await createLibp2p({\n      options,\n      repo,\n      peerId,\n      multiaddrs: readAddrs(peerId, config),\n      config,\n      keychainConfig: undefined\n    });\n    await libp2p.start();\n\n    for (const ma of libp2p.getMultiaddrs()) {\n      print(`Swarm listening on ${ma.toString()}`);\n    }\n\n    const bitswap = createBitswap(libp2p, repo.blocks, {\n      statsEnabled: true,\n      hashLoader: hashers,\n      maxInboundStreams: 1024,\n      maxOutboundStreams: 1024\n    });\n    await bitswap.start();\n    const blockstore = new BlockStorage(repo.blocks, bitswap);\n    repo.blocks = blockstore; // @ts-expect-error private field\n\n    repo.pins.blockstore = blockstore;\n    return new Network(peerId, libp2p, bitswap, repo, blockstore);\n  }\n  /**\n   * @param {Network} network\n   */\n\n\n  static async stop(network) {\n    network.repo.blocks = network.blockstore.unwrap(); // @ts-expect-error private field\n\n    network.repo.pins.blockstore = network.blockstore.unwrap();\n    await network.bitswap.stop();\n    await network.libp2p.stop();\n  }\n\n}\n/**\n * @param {PeerId} peerId\n * @param {IPFSConfig} config\n */\n\nconst readAddrs = (peerId, config) => {\n  const peerIdStr = peerId.toString();\n  /** @type {Multiaddr[]} */\n\n  const addrs = [];\n  const swarm = config.Addresses && config.Addresses.Swarm || [];\n\n  for (const addr of swarm) {\n    let ma = multiaddr(addr); // Temporary error for users migrating using websocket-star multiaddrs for listenning on libp2p\n    // websocket-star support was removed from ipfs and libp2p\n\n    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n      throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED');\n    } // multiaddrs that go via a signalling server or other intermediary (e.g. stardust,\n    // webrtc-star) can have the intermediary's peer ID in the address, so append our\n    // peer ID to the end of it\n\n\n    const maId = ma.getPeerId();\n\n    if (maId && maId !== peerIdStr) {\n      ma = ma.encapsulate(`/p2p/${peerIdStr}`);\n    }\n\n    addrs.push(ma);\n  }\n\n  return addrs;\n};\n\nconst WEBSOCKET_STAR_PROTO_CODE = 479;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/network.js"],"names":["createBitswap","createLibp2p","multiaddr","errCode","BlockStorage","Network","constructor","peerId","libp2p","bitswap","repo","blockstore","start","print","hashers","options","closed","open","config","getAll","multiaddrs","readAddrs","keychainConfig","undefined","ma","getMultiaddrs","toString","blocks","statsEnabled","hashLoader","maxInboundStreams","maxOutboundStreams","pins","stop","network","unwrap","peerIdStr","addrs","swarm","Addresses","Swarm","addr","protoCodes","includes","WEBSOCKET_STAR_PROTO_CODE","Error","maId","getPeerId","encapsulate","push"],"mappings":"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","sourcesContent":["import { createBitswap } from 'ipfs-bitswap'\nimport { createLibp2p } from './libp2p.js'\nimport { multiaddr } from '@multiformats/multiaddr'\nimport errCode from 'err-code'\nimport { BlockStorage } from '../block-storage.js'\n\n/**\n * @typedef {object} Online\n * @property {libp2p} libp2p\n * @property {Bitswap} bitswap\n *\n * @typedef {object} Options\n * @property {PeerId} options.peerId\n * @property {Repo} options.repo\n * @property {Print} options.print\n * @property {IPFSOptions} options.options\n * @property {import('ipfs-core-utils/multihashes').Multihashes} options.hashers\n *\n * @typedef {import('ipfs-core-types/src/config').Config} IPFSConfig\n * @typedef {import('../types').Options} IPFSOptions\n * @typedef {import('ipfs-repo').IPFSRepo} Repo\n * @typedef {import('../types').Print} Print\n * @typedef {import('libp2p').Libp2p} libp2p\n * @typedef {import('ipfs-bitswap').IPFSBitswap} Bitswap\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('ipfs-core-types/src/utils').AbortOptions} AbortOptions\n * @typedef {import('@multiformats/multiaddr').Multiaddr} Multiaddr\n */\n\nexport class Network {\n  /**\n   * @param {PeerId} peerId\n   * @param {libp2p} libp2p\n   * @param {Bitswap} bitswap\n   * @param {Repo} repo\n   * @param {BlockStorage} blockstore\n   */\n  constructor (peerId, libp2p, bitswap, repo, blockstore) {\n    this.peerId = peerId\n    this.libp2p = libp2p\n    this.bitswap = bitswap\n    this.repo = repo\n    this.blockstore = blockstore\n  }\n\n  /**\n   * @param {Options} options\n   */\n  static async start ({ peerId, repo, print, hashers, options }) {\n    // Need to ensure that repo is open as it could have been closed between\n    // `init` and `start`.\n    if (repo.closed) {\n      await repo.open()\n    }\n\n    /** @type {IPFSConfig} */\n    const config = await repo.config.getAll()\n\n    const libp2p = await createLibp2p({\n      options,\n      repo,\n      peerId,\n      multiaddrs: readAddrs(peerId, config),\n      config,\n      keychainConfig: undefined\n    })\n\n    await libp2p.start()\n\n    for (const ma of libp2p.getMultiaddrs()) {\n      print(`Swarm listening on ${ma.toString()}`)\n    }\n\n    const bitswap = createBitswap(libp2p, repo.blocks, {\n      statsEnabled: true,\n      hashLoader: hashers,\n      maxInboundStreams: 1024,\n      maxOutboundStreams: 1024\n    })\n    await bitswap.start()\n\n    const blockstore = new BlockStorage(repo.blocks, bitswap)\n    repo.blocks = blockstore\n    // @ts-expect-error private field\n    repo.pins.blockstore = blockstore\n\n    return new Network(peerId, libp2p, bitswap, repo, blockstore)\n  }\n\n  /**\n   * @param {Network} network\n   */\n  static async stop (network) {\n    network.repo.blocks = network.blockstore.unwrap()\n    // @ts-expect-error private field\n    network.repo.pins.blockstore = network.blockstore.unwrap()\n\n    await network.bitswap.stop()\n    await network.libp2p.stop()\n  }\n}\n\n/**\n * @param {PeerId} peerId\n * @param {IPFSConfig} config\n */\nconst readAddrs = (peerId, config) => {\n  const peerIdStr = peerId.toString()\n  /** @type {Multiaddr[]} */\n  const addrs = []\n  const swarm = (config.Addresses && config.Addresses.Swarm) || []\n  for (const addr of swarm) {\n    let ma = multiaddr(addr)\n\n    // Temporary error for users migrating using websocket-star multiaddrs for listenning on libp2p\n    // websocket-star support was removed from ipfs and libp2p\n    if (ma.protoCodes().includes(WEBSOCKET_STAR_PROTO_CODE)) {\n      throw errCode(new Error('websocket-star swarm addresses are not supported. See https://github.com/ipfs/js-ipfs/issues/2779'), 'ERR_WEBSOCKET_STAR_SWARM_ADDR_NOT_SUPPORTED')\n    }\n\n    // multiaddrs that go via a signalling server or other intermediary (e.g. stardust,\n    // webrtc-star) can have the intermediary's peer ID in the address, so append our\n    // peer ID to the end of it\n    const maId = ma.getPeerId()\n    if (maId && maId !== peerIdStr) {\n      ma = ma.encapsulate(`/p2p/${peerIdStr}`)\n    }\n\n    addrs.push(ma)\n  }\n\n  return addrs\n}\n\nconst WEBSOCKET_STAR_PROTO_CODE = 479\n"]},"metadata":{},"sourceType":"module"}