{"ast":null,"code":"import { EventEmitter } from 'events';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nimport * as CONSTANTS from './constants.js';\nimport { logger } from './utils/index.js';\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @param {CID} cid\n */\n\nconst unwantEvent = cid => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`;\n/**\n * @param {CID} cid\n */\n\n\nconst blockEvent = cid => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`;\n\nexport class Notifications extends EventEmitter {\n  /**\n   * Internal module used to track events about incoming blocks,\n   * wants and unwants.\n   *\n   * @param {PeerId} peerId\n   */\n  constructor(peerId) {\n    super();\n    this.setMaxListeners(CONSTANTS.maxListeners);\n    this._log = logger(peerId, 'notif');\n  }\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n\n\n  hasBlock(cid, block) {\n    const event = blockEvent(cid);\n\n    this._log(event);\n\n    this.emit(event, block);\n  }\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  wantBlock(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!cid) {\n      throw new Error('Not a valid cid');\n    }\n\n    const blockEvt = blockEvent(cid);\n    const unwantEvt = unwantEvent(cid);\n\n    this._log(`wantBlock:${cid}`);\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock);\n        reject(new Error(`Block for ${cid} unwanted`));\n      };\n      /**\n       * @param {Uint8Array} data\n       */\n\n\n      const onBlock = data => {\n        this.removeListener(unwantEvt, onUnwant);\n        resolve(data);\n      };\n\n      this.once(unwantEvt, onUnwant);\n      this.once(blockEvt, onBlock);\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock);\n          this.removeListener(unwantEvt, onUnwant);\n          reject(new Error(`Want for ${cid} aborted`));\n        });\n      }\n    });\n  }\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n\n\n  unwantBlock(cid) {\n    const event = unwantEvent(cid);\n\n    this._log(event);\n\n    this.emit(event);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-bitswap/src/notifications.js"],"names":["EventEmitter","toString","uint8ArrayToString","CONSTANTS","logger","unwantEvent","cid","multihash","bytes","blockEvent","Notifications","constructor","peerId","setMaxListeners","maxListeners","_log","hasBlock","block","event","emit","wantBlock","options","Error","blockEvt","unwantEvt","Promise","resolve","reject","onUnwant","removeListener","onBlock","data","once","signal","addEventListener","unwantBlock"],"mappings":"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","sourcesContent":["import { EventEmitter } from 'events'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\nimport * as CONSTANTS from './constants.js'\nimport { logger } from './utils/index.js'\n\n/**\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n */\n\n/**\n * @param {CID} cid\n */\nconst unwantEvent = (cid) => `unwant:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\n/**\n * @param {CID} cid\n */\nconst blockEvent = (cid) => `block:${uint8ArrayToString(cid.multihash.bytes, 'base64')}`\n\nexport class Notifications extends EventEmitter {\n  /**\n   * Internal module used to track events about incoming blocks,\n   * wants and unwants.\n   *\n   * @param {PeerId} peerId\n   */\n  constructor (peerId) {\n    super()\n\n    this.setMaxListeners(CONSTANTS.maxListeners)\n\n    this._log = logger(peerId, 'notif')\n  }\n\n  /**\n   * Signal the system that we received `block`.\n   *\n   * @param {CID} cid\n   * @param {Uint8Array} block\n   * @returns {void}\n   */\n  hasBlock (cid, block) {\n    const event = blockEvent(cid)\n    this._log(event)\n    this.emit(event, block)\n  }\n\n  /**\n   * Signal the system that we are waiting to receive the\n   * block associated with the given `cid`.\n   * Returns a Promise that resolves to the block when it is received,\n   * or undefined when the block is unwanted.\n   *\n   * @param {CID} cid\n   * @param {object} [options]\n   * @param {AbortSignal} [options.signal]\n   * @returns {Promise<Uint8Array>}\n   */\n  wantBlock (cid, options = {}) {\n    if (!cid) {\n      throw new Error('Not a valid cid')\n    }\n\n    const blockEvt = blockEvent(cid)\n    const unwantEvt = unwantEvent(cid)\n\n    this._log(`wantBlock:${cid}`)\n\n    return new Promise((resolve, reject) => {\n      const onUnwant = () => {\n        this.removeListener(blockEvt, onBlock)\n\n        reject(new Error(`Block for ${cid} unwanted`))\n      }\n\n      /**\n       * @param {Uint8Array} data\n       */\n      const onBlock = (data) => {\n        this.removeListener(unwantEvt, onUnwant)\n\n        resolve(data)\n      }\n\n      this.once(unwantEvt, onUnwant)\n      this.once(blockEvt, onBlock)\n\n      if (options && options.signal) {\n        options.signal.addEventListener('abort', () => {\n          this.removeListener(blockEvt, onBlock)\n          this.removeListener(unwantEvt, onUnwant)\n\n          reject(new Error(`Want for ${cid} aborted`))\n        })\n      }\n    })\n  }\n\n  /**\n   * Signal that the block is not wanted anymore.\n   *\n   * @param {CID} cid - the CID of the block that is not wanted anymore.\n   * @returns {void}\n   */\n  unwantBlock (cid) {\n    const event = unwantEvent(cid)\n    this._log(event)\n    this.emit(event)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}