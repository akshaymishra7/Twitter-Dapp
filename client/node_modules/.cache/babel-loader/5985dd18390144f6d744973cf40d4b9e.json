{"ast":null,"code":"import * as utils from '../utils.js';\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare';\nimport { xor as uint8ArrayXor } from 'uint8arrays/xor';\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\n\nexport class PeerDistanceList {\n  constructor(originDhtKey, capacity) {\n    this.originDhtKey = originDhtKey;\n    this.capacity = capacity;\n    this.peerDistances = [];\n  }\n  /**\n   * The length of the list\n   */\n\n\n  get length() {\n    return this.peerDistances.length;\n  }\n  /**\n   * The peerIds in the list, in order of distance from the origin key\n   */\n\n\n  get peers() {\n    return this.peerDistances.map(pd => pd.peerId);\n  }\n  /**\n   * Add a peerId to the list.\n   */\n\n\n  async add(peerId) {\n    if (this.peerDistances.find(pd => pd.peerId.equals(peerId)) != null) {\n      return;\n    }\n\n    const dhtKey = await utils.convertPeerId(peerId);\n    const el = {\n      peerId,\n      distance: uint8ArrayXor(this.originDhtKey, dhtKey)\n    };\n    this.peerDistances.push(el);\n    this.peerDistances.sort((a, b) => uint8ArrayCompare(a.distance, b.distance));\n    this.peerDistances = this.peerDistances.slice(0, this.capacity);\n  }\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   */\n\n\n  async anyCloser(peerIds) {\n    if (peerIds.length === 0) {\n      return false;\n    }\n\n    if (this.length === 0) {\n      return true;\n    }\n\n    const dhtKeys = await Promise.all(peerIds.map(utils.convertPeerId));\n    const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance;\n\n    for (const dhtKey of dhtKeys) {\n      const keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey);\n\n      if (uint8ArrayCompare(keyDistance, furthestDistance) < 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,aAAvB;AACA,SAASC,OAAO,IAAIC,iBAApB,QAA6C,qBAA7C;AACA,SAASC,GAAG,IAAIC,aAAhB,QAAqC,iBAArC;AAQA;;;;AAGA,OAAM,MAAOC,gBAAP,CAAuB;AAa3BC,cAAaC,YAAb,EAAuCC,QAAvC,EAAuD;AACrD,SAAKD,YAAL,GAAoBA,YAApB;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACA,SAAKC,aAAL,GAAqB,EAArB;AACD;AAED;;;;;AAGU,MAANC,MAAM;AACR,WAAO,KAAKD,aAAL,CAAmBC,MAA1B;AACD;AAED;;;;;AAGS,MAALC,KAAK;AACP,WAAO,KAAKF,aAAL,CAAmBG,GAAnB,CAAuBC,EAAE,IAAIA,EAAE,CAACC,MAAhC,CAAP;AACD;AAED;;;;;AAGS,QAAHC,GAAG,CAAED,MAAF,EAAgB;AACvB,QAAI,KAAKL,aAAL,CAAmBO,IAAnB,CAAwBH,EAAE,IAAIA,EAAE,CAACC,MAAH,CAAUG,MAAV,CAAiBH,MAAjB,CAA9B,KAA2D,IAA/D,EAAqE;AACnE;AACD;;AAED,UAAMI,MAAM,GAAG,MAAMlB,KAAK,CAACmB,aAAN,CAAoBL,MAApB,CAArB;AACA,UAAMM,EAAE,GAAG;AACTN,YADS;AAETO,cAAQ,EAAEjB,aAAa,CAAC,KAAKG,YAAN,EAAoBW,MAApB;AAFd,KAAX;AAKA,SAAKT,aAAL,CAAmBa,IAAnB,CAAwBF,EAAxB;AACA,SAAKX,aAAL,CAAmBc,IAAnB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAUvB,iBAAiB,CAACsB,CAAC,CAACH,QAAH,EAAaI,CAAC,CAACJ,QAAf,CAAnD;AACA,SAAKZ,aAAL,GAAqB,KAAKA,aAAL,CAAmBiB,KAAnB,CAAyB,CAAzB,EAA4B,KAAKlB,QAAjC,CAArB;AACD;AAED;;;;;;AAIe,QAATmB,SAAS,CAAEC,OAAF,EAAmB;AAChC,QAAIA,OAAO,CAAClB,MAAR,KAAmB,CAAvB,EAA0B;AACxB,aAAO,KAAP;AACD;;AAED,QAAI,KAAKA,MAAL,KAAgB,CAApB,EAAuB;AACrB,aAAO,IAAP;AACD;;AAED,UAAMmB,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYH,OAAO,CAAChB,GAAR,CAAYZ,KAAK,CAACmB,aAAlB,CAAZ,CAAtB;AACA,UAAMa,gBAAgB,GAAG,KAAKvB,aAAL,CAAmB,KAAKA,aAAL,CAAmBC,MAAnB,GAA4B,CAA/C,EAAkDW,QAA3E;;AAEA,SAAK,MAAMH,MAAX,IAAqBW,OAArB,EAA8B;AAC5B,YAAMI,WAAW,GAAG7B,aAAa,CAAC,KAAKG,YAAN,EAAoBW,MAApB,CAAjC;;AAEA,UAAIhB,iBAAiB,CAAC+B,WAAD,EAAcD,gBAAd,CAAjB,GAAmD,CAAvD,EAA0D;AACxD,eAAO,IAAP;AACD;AACF;;AAED,WAAO,KAAP;AACD;;AA7E0B","names":["utils","compare","uint8ArrayCompare","xor","uint8ArrayXor","PeerDistanceList","constructor","originDhtKey","capacity","peerDistances","length","peers","map","pd","peerId","add","find","equals","dhtKey","convertPeerId","el","distance","push","sort","a","b","slice","anyCloser","peerIds","dhtKeys","Promise","all","furthestDistance","keyDistance"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\kad-dht\\src\\peer-list\\peer-distance-list.ts"],"sourcesContent":["import * as utils from '../utils.js'\nimport { compare as uint8ArrayCompare } from 'uint8arrays/compare'\nimport { xor as uint8ArrayXor } from 'uint8arrays/xor'\nimport type { PeerId } from '@libp2p/interface-peer-id'\n\ninterface PeerDistance {\n  peerId: PeerId\n  distance: Uint8Array\n}\n\n/**\n * Maintains a list of peerIds sorted by distance from a DHT key.\n */\nexport class PeerDistanceList {\n  /**\n   * The DHT key from which distance is calculated\n   */\n  private readonly originDhtKey: Uint8Array\n\n  /**\n   * The maximum size of the list\n   */\n  private readonly capacity: number\n\n  private peerDistances: PeerDistance[]\n\n  constructor (originDhtKey: Uint8Array, capacity: number) {\n    this.originDhtKey = originDhtKey\n    this.capacity = capacity\n    this.peerDistances = []\n  }\n\n  /**\n   * The length of the list\n   */\n  get length (): number {\n    return this.peerDistances.length\n  }\n\n  /**\n   * The peerIds in the list, in order of distance from the origin key\n   */\n  get peers (): PeerId[] {\n    return this.peerDistances.map(pd => pd.peerId)\n  }\n\n  /**\n   * Add a peerId to the list.\n   */\n  async add (peerId: PeerId): Promise<void> {\n    if (this.peerDistances.find(pd => pd.peerId.equals(peerId)) != null) {\n      return\n    }\n\n    const dhtKey = await utils.convertPeerId(peerId)\n    const el = {\n      peerId,\n      distance: uint8ArrayXor(this.originDhtKey, dhtKey)\n    }\n\n    this.peerDistances.push(el)\n    this.peerDistances.sort((a, b) => uint8ArrayCompare(a.distance, b.distance))\n    this.peerDistances = this.peerDistances.slice(0, this.capacity)\n  }\n\n  /**\n   * Indicates whether any of the peerIds passed as a parameter are closer\n   * to the origin key than the furthest peerId in the PeerDistanceList.\n   */\n  async anyCloser (peerIds: PeerId[]): Promise<boolean> {\n    if (peerIds.length === 0) {\n      return false\n    }\n\n    if (this.length === 0) {\n      return true\n    }\n\n    const dhtKeys = await Promise.all(peerIds.map(utils.convertPeerId))\n    const furthestDistance = this.peerDistances[this.peerDistances.length - 1].distance\n\n    for (const dhtKey of dhtKeys) {\n      const keyDistance = uint8ArrayXor(this.originDhtKey, dhtKey)\n\n      if (uint8ArrayCompare(keyDistance, furthestDistance) < 0) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n"]},"metadata":{},"sourceType":"module"}