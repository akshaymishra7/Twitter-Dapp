{"ast":null,"code":"import webcrypto from '../webcrypto.js';\nimport lengths from './lengths.js';\nconst hashTypes = {\n  SHA1: 'SHA-1',\n  SHA256: 'SHA-256',\n  SHA512: 'SHA-512'\n};\n\nconst sign = async (key, data) => {\n  const buf = await webcrypto.get().subtle.sign({\n    name: 'HMAC'\n  }, key, data);\n  return new Uint8Array(buf, 0, buf.byteLength);\n};\n\nexport async function create(hashType, secret) {\n  const hash = hashTypes[hashType];\n  const key = await webcrypto.get().subtle.importKey('raw', secret, {\n    name: 'HMAC',\n    hash: {\n      name: hash\n    }\n  }, false, ['sign']);\n  return {\n    async digest(data) {\n      return sign(key, data);\n    },\n\n    length: lengths[hashType]\n  };\n}","map":{"version":3,"mappings":"AAAA,OAAOA,SAAP,MAAsB,iBAAtB;AACA,OAAOC,OAAP,MAAoB,cAApB;AAEA,MAAMC,SAAS,GAAG;AAChBC,MAAI,EAAE,OADU;AAEhBC,QAAM,EAAE,SAFQ;AAGhBC,QAAM,EAAE;AAHQ,CAAlB;;AAMA,MAAMC,IAAI,GAAG,OAAOC,GAAP,EAAuBC,IAAvB,KAAgE;AAC3E,QAAMC,GAAG,GAAG,MAAMT,SAAS,CAACU,GAAV,GAAgBC,MAAhB,CAAuBL,IAAvB,CAA4B;AAAEM,QAAI,EAAE;AAAR,GAA5B,EAA8CL,GAA9C,EAAmDC,IAAnD,CAAlB;AACA,SAAO,IAAIK,UAAJ,CAAeJ,GAAf,EAAoB,CAApB,EAAuBA,GAAG,CAACK,UAA3B,CAAP;AACD,CAHD;;AAKA,OAAO,eAAeC,MAAf,CAAuBC,QAAvB,EAA+DC,MAA/D,EAAiF;AACtF,QAAMC,IAAI,GAAGhB,SAAS,CAACc,QAAD,CAAtB;AAEA,QAAMT,GAAG,GAAG,MAAMP,SAAS,CAACU,GAAV,GAAgBC,MAAhB,CAAuBQ,SAAvB,CAChB,KADgB,EAEhBF,MAFgB,EAGhB;AACEL,QAAI,EAAE,MADR;AAEEM,QAAI,EAAE;AAAEN,UAAI,EAAEM;AAAR;AAFR,GAHgB,EAOhB,KAPgB,EAQhB,CAAC,MAAD,CARgB,CAAlB;AAWA,SAAO;AACL,UAAME,MAAN,CAAcZ,IAAd,EAA8B;AAC5B,aAAOF,IAAI,CAACC,GAAD,EAAMC,IAAN,CAAX;AACD,KAHI;;AAILa,UAAM,EAAEpB,OAAO,CAACe,QAAD;AAJV,GAAP;AAMD","names":["webcrypto","lengths","hashTypes","SHA1","SHA256","SHA512","sign","key","data","buf","get","subtle","name","Uint8Array","byteLength","create","hashType","secret","hash","importKey","digest","length"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\crypto\\src\\hmac\\index-browser.ts"],"sourcesContent":["import webcrypto from '../webcrypto.js'\nimport lengths from './lengths.js'\n\nconst hashTypes = {\n  SHA1: 'SHA-1',\n  SHA256: 'SHA-256',\n  SHA512: 'SHA-512'\n}\n\nconst sign = async (key: CryptoKey, data: Uint8Array): Promise<Uint8Array> => {\n  const buf = await webcrypto.get().subtle.sign({ name: 'HMAC' }, key, data)\n  return new Uint8Array(buf, 0, buf.byteLength)\n}\n\nexport async function create (hashType: 'SHA1' | 'SHA256' | 'SHA512', secret: Uint8Array): Promise<{ digest: (data: Uint8Array) => Promise<Uint8Array>, length: number }> {\n  const hash = hashTypes[hashType]\n\n  const key = await webcrypto.get().subtle.importKey(\n    'raw',\n    secret,\n    {\n      name: 'HMAC',\n      hash: { name: hash }\n    },\n    false,\n    ['sign']\n  )\n\n  return {\n    async digest (data: Uint8Array) { // eslint-disable-line require-await\n      return sign(key, data)\n    },\n    length: lengths[hashType]\n  }\n}\n"]},"metadata":{},"sourceType":"module"}