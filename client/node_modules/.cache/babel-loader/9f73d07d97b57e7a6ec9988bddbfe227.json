{"ast":null,"code":"import { exporter } from 'ipfs-unixfs-exporter';\nimport { normalizeCidPath } from '../utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { CID } from 'multiformats/cid';\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\n\nexport function createCat(_ref) {\n  let {\n    repo,\n    preload\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"cat\"]}\n   */\n  async function* cat(ipfsPath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    ipfsPath = normalizeCidPath(ipfsPath);\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/');\n      preload(CID.parse(pathComponents[0]));\n    }\n\n    const file = await exporter(ipfsPath, repo.blocks, options); // File may not have unixfs prop if small & imported with rawLeaves true\n\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory');\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content');\n    }\n\n    yield* file.content(options);\n  }\n\n  return withTimeoutOption(cat);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/cat.js"],"names":["exporter","normalizeCidPath","withTimeoutOption","CID","createCat","repo","preload","cat","ipfsPath","options","pathComponents","split","parse","file","blocks","type","Error","content"],"mappings":"AAAA,SAASA,QAAT,QAAyB,sBAAzB;AACA,SAASC,gBAAT,QAAiC,aAAjC;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,GAAT,QAAoB,kBAApB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,OAAuC;AAAA,MAAnB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAmB;;AAC5C;AACF;AACA;AACE,kBAAiBC,GAAjB,CAAsBC,QAAtB,EAA8C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC5CD,IAAAA,QAAQ,GAAGP,gBAAgB,CAACO,QAAD,CAA3B;;AAEA,QAAIC,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7B,YAAMI,cAAc,GAAGF,QAAQ,CAACG,KAAT,CAAe,GAAf,CAAvB;AACAL,MAAAA,OAAO,CAACH,GAAG,CAACS,KAAJ,CAAUF,cAAc,CAAC,CAAD,CAAxB,CAAD,CAAP;AACD;;AAED,UAAMG,IAAI,GAAG,MAAMb,QAAQ,CAACQ,QAAD,EAAWH,IAAI,CAACS,MAAhB,EAAwBL,OAAxB,CAA3B,CAR4C,CAU5C;;AACA,QAAII,IAAI,CAACE,IAAL,KAAc,WAAlB,EAA+B;AAC7B,YAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,QAAI,CAACH,IAAI,CAACI,OAAV,EAAmB;AACjB,YAAM,IAAID,KAAJ,CAAU,8BAAV,CAAN;AACD;;AAED,WAAQH,IAAI,CAACI,OAAL,CAAaR,OAAb,CAAR;AACD;;AAED,SAAOP,iBAAiB,CAACK,GAAD,CAAxB;AACD","sourcesContent":["import { exporter } from 'ipfs-unixfs-exporter'\nimport { normalizeCidPath } from '../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../types').Preload} preload\n *\n * @param {Context} context\n */\nexport function createCat ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"cat\"]}\n   */\n  async function * cat (ipfsPath, options = {}) {\n    ipfsPath = normalizeCidPath(ipfsPath)\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/')\n      preload(CID.parse(pathComponents[0]))\n    }\n\n    const file = await exporter(ipfsPath, repo.blocks, options)\n\n    // File may not have unixfs prop if small & imported with rawLeaves true\n    if (file.type === 'directory') {\n      throw new Error('this dag node is a directory')\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content')\n    }\n\n    yield * file.content(options)\n  }\n\n  return withTimeoutOption(cat)\n}\n"]},"metadata":{},"sourceType":"module"}