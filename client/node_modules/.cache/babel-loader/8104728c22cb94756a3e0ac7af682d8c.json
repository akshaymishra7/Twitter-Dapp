{"ast":null,"code":"import * as isIPFS from 'is-ipfs';\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path';\nimport drain from 'it-drain';\nimport { resolve } from '../../utils.js';\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {object} context\n * @param {import('../ipns').IPNSAPI} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\n\nexport async function resolvePath(_ref, name, options) {\n  let {\n    ipns,\n    repo,\n    codecs\n  } = _ref;\n\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name);\n  }\n\n  const {\n    cid,\n    path\n  } = toCidAndPath(name); // ipfs path\n\n  await drain(resolve(cid, path || '', codecs, repo, options));\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/name/utils.js"],"names":["isIPFS","toCidAndPath","drain","resolve","resolvePath","name","options","ipns","repo","codecs","ipnsPath","cid","path"],"mappings":"AAAA,OAAO,KAAKA,MAAZ,MAAwB,SAAxB;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeC,WAAf,OAAoDC,IAApD,EAA0DC,OAA1D,EAAmE;AAAA,MAAvC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcC,IAAAA;AAAd,GAAuC;;AACxE;AACA,MAAIT,MAAM,CAACU,QAAP,CAAgBL,IAAhB,CAAJ,EAA2B;AACzB,WAAOE,IAAI,CAACJ,OAAL,CAAaE,IAAb,CAAP;AACD;;AAED,QAAM;AACJM,IAAAA,GADI;AAEJC,IAAAA;AAFI,MAGFX,YAAY,CAACI,IAAD,CAHhB,CANwE,CAWxE;;AACA,QAAMH,KAAK,CAACC,OAAO,CAACQ,GAAD,EAAMC,IAAI,IAAI,EAAd,EAAkBH,MAAlB,EAA0BD,IAA1B,EAAgCF,OAAhC,CAAR,CAAX;AACD","sourcesContent":["import * as isIPFS from 'is-ipfs'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport drain from 'it-drain'\nimport { resolve } from '../../utils.js'\n\n/**\n * resolves the given path by parsing out protocol-specific entries\n * (e.g. /ipns/<node-key>) and then going through the /ipfs/ entries and returning the final node\n *\n * @param {object} context\n * @param {import('../ipns').IPNSAPI} context.ipns\n * @param {import('ipfs-repo').IPFSRepo} context.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} context.codecs\n * @param {string} name\n * @param {import('ipfs-core-types/src/utils').AbortOptions} [options]\n */\nexport async function resolvePath ({ ipns, repo, codecs }, name, options) {\n  // ipns path\n  if (isIPFS.ipnsPath(name)) {\n    return ipns.resolve(name)\n  }\n\n  const {\n    cid,\n    path\n  } = toCidAndPath(name)\n\n  // ipfs path\n  await drain(resolve(cid, path || '', codecs, repo, options))\n}\n"]},"metadata":{},"sourceType":"module"}