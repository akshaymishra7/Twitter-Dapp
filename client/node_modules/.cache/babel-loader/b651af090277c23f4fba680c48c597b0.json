{"ast":null,"code":"import { CodeError } from '@libp2p/interfaces/errors'; // @ts-expect-error types are missing\n\nimport forgePbkdf2 from 'node-forge/lib/pbkdf2.js'; // @ts-expect-error types are missing\n\nimport forgeUtil from 'node-forge/lib/util.js';\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\n\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n};\n/**\n * Computes the Password-Based Key Derivation Function 2.\n */\n\nexport default function pbkdf2(password, salt, iterations, keySize, hash) {\n  if (hash !== 'sha1' && hash !== 'sha2-256' && hash !== 'sha2-512') {\n    const types = Object.keys(hashName).join(' / ');\n    throw new CodeError(`Hash '${hash}' is unknown or not supported. Must be ${types}`, 'ERR_UNSUPPORTED_HASH_TYPE');\n  }\n\n  const hasher = hashName[hash];\n  const dek = forgePbkdf2(password, salt, iterations, keySize, hasher);\n  return forgeUtil.encode64(dek, null);\n}","map":{"version":3,"mappings":"AAAA,SAASA,SAAT,QAA0B,2BAA1B,C,CACA;;AACA,OAAOC,WAAP,MAAwB,0BAAxB,C,CACA;;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AAEA;;;;;;;;AAOA,MAAMC,QAAQ,GAAG;AACfC,MAAI,EAAE,MADS;AAEf,cAAY,QAFG;AAGf,cAAY;AAHG,CAAjB;AAMA;;;;AAGA,eAAc,SAAUC,MAAV,CAAkBC,QAAlB,EAAoCC,IAApC,EAAkDC,UAAlD,EAAsEC,OAAtE,EAAuFC,IAAvF,EAAmG;AAC/G,MAAIA,IAAI,KAAK,MAAT,IAAmBA,IAAI,KAAK,UAA5B,IAA0CA,IAAI,KAAK,UAAvD,EAAmE;AACjE,UAAMC,KAAK,GAAGC,MAAM,CAACC,IAAP,CAAYV,QAAZ,EAAsBW,IAAtB,CAA2B,KAA3B,CAAd;AACA,UAAM,IAAId,SAAJ,CAAc,SAASU,IAAI,0CAA0CC,KAAK,EAA1E,EAA8E,2BAA9E,CAAN;AACD;;AAED,QAAMI,MAAM,GAAGZ,QAAQ,CAACO,IAAD,CAAvB;AACA,QAAMM,GAAG,GAAGf,WAAW,CACrBK,QADqB,EAErBC,IAFqB,EAGrBC,UAHqB,EAIrBC,OAJqB,EAKrBM,MALqB,CAAvB;AAQA,SAAOb,SAAS,CAACe,QAAV,CAAmBD,GAAnB,EAAwB,IAAxB,CAAP;AACD","names":["CodeError","forgePbkdf2","forgeUtil","hashName","sha1","pbkdf2","password","salt","iterations","keySize","hash","types","Object","keys","join","hasher","dek","encode64"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\crypto\\src\\pbkdf2.ts"],"sourcesContent":["import { CodeError } from '@libp2p/interfaces/errors'\n// @ts-expect-error types are missing\nimport forgePbkdf2 from 'node-forge/lib/pbkdf2.js'\n// @ts-expect-error types are missing\nimport forgeUtil from 'node-forge/lib/util.js'\n\n/**\n * Maps an IPFS hash name to its node-forge equivalent.\n *\n * See https://github.com/multiformats/multihash/blob/master/hashtable.csv\n *\n * @private\n */\nconst hashName = {\n  sha1: 'sha1',\n  'sha2-256': 'sha256',\n  'sha2-512': 'sha512'\n}\n\n/**\n * Computes the Password-Based Key Derivation Function 2.\n */\nexport default function pbkdf2 (password: string, salt: string, iterations: number, keySize: number, hash: string): string {\n  if (hash !== 'sha1' && hash !== 'sha2-256' && hash !== 'sha2-512') {\n    const types = Object.keys(hashName).join(' / ')\n    throw new CodeError(`Hash '${hash}' is unknown or not supported. Must be ${types}`, 'ERR_UNSUPPORTED_HASH_TYPE')\n  }\n\n  const hasher = hashName[hash]\n  const dek = forgePbkdf2(\n    password,\n    salt,\n    iterations,\n    keySize,\n    hasher\n  )\n\n  return forgeUtil.encode64(dek, null)\n}\n"]},"metadata":{},"sourceType":"module"}