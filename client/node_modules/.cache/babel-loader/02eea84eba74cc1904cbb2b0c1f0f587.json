{"ast":null,"code":"/* eslint-env browser */\nimport HTTP from 'ipfs-utils/src/http.js';\nimport { logger } from '@libp2p/logger';\nimport PQueue from 'p-queue';\nconst log = logger('ipfs:preload'); // @ts-expect-error PQueue@6 is broken\n\nconst Queue = PQueue.default ? PQueue.default : PQueue; // browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\n\nconst httpQueue = new Queue({\n  concurrency: 4\n});\n/**\n * @param {string} url\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\n\nexport function preload(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  log(url);\n  return httpQueue.add(async () => {\n    const res = await HTTP.post(url, {\n      signal: options.signal\n    }); // @ts-expect-error\n\n    const reader = res.body.getReader();\n\n    try {\n      while (true) {\n        const {\n          done\n        } = await reader.read();\n        if (done) return; // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core-config/src/preload.browser.js"],"names":["HTTP","logger","PQueue","log","Queue","default","httpQueue","concurrency","preload","url","options","add","res","post","signal","reader","body","getReader","done","read","releaseLock"],"mappings":"AAAA;AAEA,OAAOA,IAAP,MAAiB,wBAAjB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,OAAOC,MAAP,MAAmB,SAAnB;AAEA,MAAMC,GAAG,GAAGF,MAAM,CAAC,cAAD,CAAlB,C,CAEA;;AACA,MAAMG,KAAK,GAAGF,MAAM,CAACG,OAAP,GAAiBH,MAAM,CAACG,OAAxB,GAAkCH,MAAhD,C,CAEA;AACA;;AACA,MAAMI,SAAS,GAAG,IAAIF,KAAJ,CAAU;AAAEG,EAAAA,WAAW,EAAE;AAAf,CAAV,CAAlB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,OAAT,CAAkBC,GAAlB,EAAqC;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAC1CP,EAAAA,GAAG,CAACM,GAAD,CAAH;AAEA,SAAOH,SAAS,CAACK,GAAV,CAAc,YAAY;AAC/B,UAAMC,GAAG,GAAG,MAAMZ,IAAI,CAACa,IAAL,CAAUJ,GAAV,EAAe;AAAEK,MAAAA,MAAM,EAAEJ,OAAO,CAACI;AAAlB,KAAf,CAAlB,CAD+B,CAG/B;;AACA,UAAMC,MAAM,GAAGH,GAAG,CAACI,IAAJ,CAASC,SAAT,EAAf;;AAEA,QAAI;AACF,aAAO,IAAP,EAAa;AACX,cAAM;AAAEC,UAAAA;AAAF,YAAW,MAAMH,MAAM,CAACI,IAAP,EAAvB;AACA,YAAID,IAAJ,EAAU,OAFC,CAGX;AACD;AACF,KAND,SAMU;AACRH,MAAAA,MAAM,CAACK,WAAP;AACD;AACF,GAfM,CAAP;AAgBD","sourcesContent":["/* eslint-env browser */\n\nimport HTTP from 'ipfs-utils/src/http.js'\nimport { logger } from '@libp2p/logger'\nimport PQueue from 'p-queue'\n\nconst log = logger('ipfs:preload')\n\n// @ts-expect-error PQueue@6 is broken\nconst Queue = PQueue.default ? PQueue.default : PQueue\n\n// browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\nconst httpQueue = new Queue({ concurrency: 4 })\n\n/**\n * @param {string} url\n * @param {import('ipfs-core-types/src/utils').AbortOptions} options\n */\nexport function preload (url, options = {}) {\n  log(url)\n\n  return httpQueue.add(async () => {\n    const res = await HTTP.post(url, { signal: options.signal })\n\n    // @ts-expect-error\n    const reader = res.body.getReader()\n\n    try {\n      while (true) {\n        const { done } = await reader.read()\n        if (done) return\n        // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock()\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"module"}