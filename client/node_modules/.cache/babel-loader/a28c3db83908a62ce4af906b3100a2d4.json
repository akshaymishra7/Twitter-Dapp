{"ast":null,"code":"import { ERR_INVALID_PEER_SCORE_PARAMS } from './constants.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\nexport const defaultPeerScoreParams = {\n  topics: {},\n  topicScoreCap: 10.0,\n  appSpecificScore: () => 0.0,\n  appSpecificWeight: 10.0,\n  IPColocationFactorWeight: -5.0,\n  IPColocationFactorThreshold: 10.0,\n  IPColocationFactorWhitelist: new Set(),\n  behaviourPenaltyWeight: -10.0,\n  behaviourPenaltyThreshold: 0.0,\n  behaviourPenaltyDecay: 0.2,\n  decayInterval: 1000.0,\n  decayToZero: 0.1,\n  retainScore: 3600 * 1000\n};\nexport const defaultTopicScoreParams = {\n  topicWeight: 0.5,\n  timeInMeshWeight: 1,\n  timeInMeshQuantum: 1,\n  timeInMeshCap: 3600,\n  firstMessageDeliveriesWeight: 1,\n  firstMessageDeliveriesDecay: 0.5,\n  firstMessageDeliveriesCap: 2000,\n  meshMessageDeliveriesWeight: -1,\n  meshMessageDeliveriesDecay: 0.5,\n  meshMessageDeliveriesCap: 100,\n  meshMessageDeliveriesThreshold: 20,\n  meshMessageDeliveriesWindow: 10,\n  meshMessageDeliveriesActivation: 5000,\n  meshFailurePenaltyWeight: -1,\n  meshFailurePenaltyDecay: 0.5,\n  invalidMessageDeliveriesWeight: -1,\n  invalidMessageDeliveriesDecay: 0.3\n};\nexport function createPeerScoreParams() {\n  let p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return { ...defaultPeerScoreParams,\n    ...p,\n    topics: p.topics ? Object.entries(p.topics).reduce((topics, _ref) => {\n      let [topic, topicScoreParams] = _ref;\n      topics[topic] = createTopicScoreParams(topicScoreParams);\n      return topics;\n    }, {}) : {}\n  };\n}\nexport function createTopicScoreParams() {\n  let p = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return { ...defaultTopicScoreParams,\n    ...p\n  };\n} // peer score parameter validation\n\nexport function validatePeerScoreParams(p) {\n  for (const [topic, params] of Object.entries(p.topics)) {\n    try {\n      validateTopicScoreParams(params);\n    } catch (e) {\n      throw new CodeError(`invalid score parameters for topic ${topic}: ${e.message}`, ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n  } // check that the topic score is 0 or something positive\n\n\n  if (p.topicScoreCap < 0) {\n    throw new CodeError('invalid topic score cap; must be positive (or 0 for no cap)', ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check that we have an app specific score; the weight can be anything (but expected positive)\n\n\n  if (p.appSpecificScore === null || p.appSpecificScore === undefined) {\n    throw new CodeError('missing application specific score function', ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check the IP colocation factor\n\n\n  if (p.IPColocationFactorWeight > 0) {\n    throw new CodeError('invalid IPColocationFactorWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.IPColocationFactorWeight !== 0 && p.IPColocationFactorThreshold < 1) {\n    throw new CodeError('invalid IPColocationFactorThreshold; must be at least 1', ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check the behaviour penalty\n\n\n  if (p.behaviourPenaltyWeight > 0) {\n    throw new CodeError('invalid BehaviourPenaltyWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.behaviourPenaltyWeight !== 0 && (p.behaviourPenaltyDecay <= 0 || p.behaviourPenaltyDecay >= 1)) {\n    throw new CodeError('invalid BehaviourPenaltyDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check the decay parameters\n\n\n  if (p.decayInterval < 1000) {\n    throw new CodeError('invalid DecayInterval; must be at least 1s', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.decayToZero <= 0 || p.decayToZero >= 1) {\n    throw new CodeError('invalid DecayToZero; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n  } // no need to check the score retention; a value of 0 means that we don't retain scores\n\n}\nexport function validateTopicScoreParams(p) {\n  // make sure we have a sane topic weight\n  if (p.topicWeight < 0) {\n    throw new CodeError('invalid topic weight; must be >= 0', ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check P1\n\n\n  if (p.timeInMeshQuantum === 0) {\n    throw new CodeError('invalid TimeInMeshQuantum; must be non zero', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.timeInMeshWeight < 0) {\n    throw new CodeError('invalid TimeInMeshWeight; must be positive (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.timeInMeshWeight !== 0 && p.timeInMeshQuantum <= 0) {\n    throw new CodeError('invalid TimeInMeshQuantum; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.timeInMeshWeight !== 0 && p.timeInMeshCap <= 0) {\n    throw new CodeError('invalid TimeInMeshCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check P2\n\n\n  if (p.firstMessageDeliveriesWeight < 0) {\n    throw new CodeError('invallid FirstMessageDeliveriesWeight; must be positive (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.firstMessageDeliveriesWeight !== 0 && (p.firstMessageDeliveriesDecay <= 0 || p.firstMessageDeliveriesDecay >= 1)) {\n    throw new CodeError('invalid FirstMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.firstMessageDeliveriesWeight !== 0 && p.firstMessageDeliveriesCap <= 0) {\n    throw new CodeError('invalid FirstMessageDeliveriesCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check P3\n\n\n  if (p.meshMessageDeliveriesWeight > 0) {\n    throw new CodeError('invalid MeshMessageDeliveriesWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.meshMessageDeliveriesWeight !== 0 && (p.meshMessageDeliveriesDecay <= 0 || p.meshMessageDeliveriesDecay >= 1)) {\n    throw new CodeError('invalid MeshMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesCap <= 0) {\n    throw new CodeError('invalid MeshMessageDeliveriesCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesThreshold <= 0) {\n    throw new CodeError('invalid MeshMessageDeliveriesThreshold; must be positive', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.meshMessageDeliveriesWindow < 0) {\n    throw new CodeError('invalid MeshMessageDeliveriesWindow; must be non-negative', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesActivation < 1000) {\n    throw new CodeError('invalid MeshMessageDeliveriesActivation; must be at least 1s', ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check P3b\n\n\n  if (p.meshFailurePenaltyWeight > 0) {\n    throw new CodeError('invalid MeshFailurePenaltyWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.meshFailurePenaltyWeight !== 0 && (p.meshFailurePenaltyDecay <= 0 || p.meshFailurePenaltyDecay >= 1)) {\n    throw new CodeError('invalid MeshFailurePenaltyDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check P4\n\n\n  if (p.invalidMessageDeliveriesWeight > 0) {\n    throw new CodeError('invalid InvalidMessageDeliveriesWeight; must be negative (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.invalidMessageDeliveriesDecay <= 0 || p.invalidMessageDeliveriesDecay >= 1) {\n    throw new CodeError('invalid InvalidMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n}","map":{"version":3,"mappings":"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","names":["ERR_INVALID_PEER_SCORE_PARAMS","CodeError","defaultPeerScoreParams","topics","topicScoreCap","appSpecificScore","appSpecificWeight","IPColocationFactorWeight","IPColocationFactorThreshold","IPColocationFactorWhitelist","Set","behaviourPenaltyWeight","behaviourPenaltyThreshold","behaviourPenaltyDecay","decayInterval","decayToZero","retainScore","defaultTopicScoreParams","topicWeight","timeInMeshWeight","timeInMeshQuantum","timeInMeshCap","firstMessageDeliveriesWeight","firstMessageDeliveriesDecay","firstMessageDeliveriesCap","meshMessageDeliveriesWeight","meshMessageDeliveriesDecay","meshMessageDeliveriesCap","meshMessageDeliveriesThreshold","meshMessageDeliveriesWindow","meshMessageDeliveriesActivation","meshFailurePenaltyWeight","meshFailurePenaltyDecay","invalidMessageDeliveriesWeight","invalidMessageDeliveriesDecay","createPeerScoreParams","p","Object","entries","reduce","topic","topicScoreParams","createTopicScoreParams","validatePeerScoreParams","params","validateTopicScoreParams","e","message","undefined"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@chainsafe\\libp2p-gossipsub\\src\\score\\peer-score-params.ts"],"sourcesContent":["import { ERR_INVALID_PEER_SCORE_PARAMS } from './constants.js'\nimport { CodeError } from '@libp2p/interfaces/errors'\n\n// This file defines PeerScoreParams and TopicScoreParams interfaces\n// as well as constructors, default constructors, and validation functions\n// for these interfaces\n\nexport interface PeerScoreParams {\n  /**\n   * Score parameters per topic.\n   */\n  topics: Record<string, TopicScoreParams>\n\n  /**\n   * Aggregate topic score cap; this limits the total contribution of topics towards a positive\n   * score. It must be positive (or 0 for no cap).\n   */\n  topicScoreCap: number\n\n  /**\n   * P5: Application-specific peer scoring\n   */\n  appSpecificScore: (p: string) => number\n  appSpecificWeight: number\n\n  /**\n   * P6: IP-colocation factor.\n   * The parameter has an associated counter which counts the number of peers with the same IP.\n   * If the number of peers in the same IP exceeds IPColocationFactorThreshold, then the value\n   * is the square of the difference, ie (PeersInSameIP - IPColocationThreshold)^2.\n   * If the number of peers in the same IP is less than the threshold, then the value is 0.\n   * The weight of the parameter MUST be negative, unless you want to disable for testing.\n   * Note: In order to simulate many IPs in a managable manner when testing, you can set the weight to 0\n   *       thus disabling the IP colocation penalty.\n   */\n  IPColocationFactorWeight: number\n  IPColocationFactorThreshold: number\n  IPColocationFactorWhitelist: Set<string>\n\n  /**\n   * P7: behavioural pattern penalties.\n   * This parameter has an associated counter which tracks misbehaviour as detected by the\n   * router. The router currently applies penalties for the following behaviors:\n   * - attempting to re-graft before the prune backoff time has elapsed.\n   * - not following up in IWANT requests for messages advertised with IHAVE.\n   *\n   * The value of the parameter is the square of the counter, which decays with  BehaviourPenaltyDecay.\n   * The weight of the parameter MUST be negative (or zero to disable).\n   */\n  behaviourPenaltyWeight: number\n  behaviourPenaltyThreshold: number\n  behaviourPenaltyDecay: number\n\n  /**\n   * the decay interval for parameter counters.\n   */\n  decayInterval: number\n\n  /**\n   * counter value below which it is considered 0.\n   */\n  decayToZero: number\n\n  /**\n   * time to remember counters for a disconnected peer.\n   */\n  retainScore: number\n}\n\nexport interface TopicScoreParams {\n  /**\n   * The weight of the topic.\n   */\n  topicWeight: number\n\n  /**\n   * P1: time in the mesh\n   * This is the time the peer has ben grafted in the mesh.\n   * The value of the parameter is the time/TimeInMeshQuantum, capped by TimeInMeshCap\n   * The weight of the parameter MUST be positive (or zero to disable).\n   */\n  timeInMeshWeight: number\n  timeInMeshQuantum: number\n  timeInMeshCap: number\n\n  /**\n   * P2: first message deliveries\n   * This is the number of message deliveries in the topic.\n   * The value of the parameter is a counter, decaying with FirstMessageDeliveriesDecay, and capped\n   * by FirstMessageDeliveriesCap.\n   * The weight of the parameter MUST be positive (or zero to disable).\n   */\n  firstMessageDeliveriesWeight: number\n  firstMessageDeliveriesDecay: number\n  firstMessageDeliveriesCap: number\n\n  /**\n   * P3: mesh message deliveries\n   * This is the number of message deliveries in the mesh, within the MeshMessageDeliveriesWindow of\n   * message validation; deliveries during validation also count and are retroactively applied\n   * when validation succeeds.\n   * This window accounts for the minimum time before a hostile mesh peer trying to game the score\n   * could replay back a valid message we just sent them.\n   * It effectively tracks first and near-first deliveries, ie a message seen from a mesh peer\n   * before we have forwarded it to them.\n   * The parameter has an associated counter, decaying with MeshMessageDeliveriesDecay.\n   * If the counter exceeds the threshold, its value is 0.\n   * If the counter is below the MeshMessageDeliveriesThreshold, the value is the square of\n   * the deficit, ie (MessageDeliveriesThreshold - counter)^2\n   * The penalty is only activated after MeshMessageDeliveriesActivation time in the mesh.\n   * The weight of the parameter MUST be negative (or zero to disable).\n   */\n  meshMessageDeliveriesWeight: number\n  meshMessageDeliveriesDecay: number\n  meshMessageDeliveriesCap: number\n  meshMessageDeliveriesThreshold: number\n  meshMessageDeliveriesWindow: number\n  meshMessageDeliveriesActivation: number\n\n  /**\n   * P3b: sticky mesh propagation failures\n   * This is a sticky penalty that applies when a peer gets pruned from the mesh with an active\n   * mesh message delivery penalty.\n   * The weight of the parameter MUST be negative (or zero to disable)\n   */\n  meshFailurePenaltyWeight: number\n  meshFailurePenaltyDecay: number\n\n  /**\n   * P4: invalid messages\n   * This is the number of invalid messages in the topic.\n   * The value of the parameter is the square of the counter, decaying with\n   * InvalidMessageDeliveriesDecay.\n   * The weight of the parameter MUST be negative (or zero to disable).\n   */\n  invalidMessageDeliveriesWeight: number\n  invalidMessageDeliveriesDecay: number\n}\n\nexport const defaultPeerScoreParams: PeerScoreParams = {\n  topics: {},\n  topicScoreCap: 10.0,\n  appSpecificScore: () => 0.0,\n  appSpecificWeight: 10.0,\n  IPColocationFactorWeight: -5.0,\n  IPColocationFactorThreshold: 10.0,\n  IPColocationFactorWhitelist: new Set(),\n  behaviourPenaltyWeight: -10.0,\n  behaviourPenaltyThreshold: 0.0,\n  behaviourPenaltyDecay: 0.2,\n  decayInterval: 1000.0,\n  decayToZero: 0.1,\n  retainScore: 3600 * 1000\n}\n\nexport const defaultTopicScoreParams: TopicScoreParams = {\n  topicWeight: 0.5,\n  timeInMeshWeight: 1,\n  timeInMeshQuantum: 1,\n  timeInMeshCap: 3600,\n\n  firstMessageDeliveriesWeight: 1,\n  firstMessageDeliveriesDecay: 0.5,\n  firstMessageDeliveriesCap: 2000,\n\n  meshMessageDeliveriesWeight: -1,\n  meshMessageDeliveriesDecay: 0.5,\n  meshMessageDeliveriesCap: 100,\n  meshMessageDeliveriesThreshold: 20,\n  meshMessageDeliveriesWindow: 10,\n  meshMessageDeliveriesActivation: 5000,\n\n  meshFailurePenaltyWeight: -1,\n  meshFailurePenaltyDecay: 0.5,\n\n  invalidMessageDeliveriesWeight: -1,\n  invalidMessageDeliveriesDecay: 0.3\n}\n\nexport function createPeerScoreParams(p: Partial<PeerScoreParams> = {}): PeerScoreParams {\n  return {\n    ...defaultPeerScoreParams,\n    ...p,\n    topics: p.topics\n      ? Object.entries(p.topics).reduce((topics, [topic, topicScoreParams]) => {\n          topics[topic] = createTopicScoreParams(topicScoreParams)\n          return topics\n        }, {} as Record<string, TopicScoreParams>)\n      : {}\n  }\n}\n\nexport function createTopicScoreParams(p: Partial<TopicScoreParams> = {}): TopicScoreParams {\n  return {\n    ...defaultTopicScoreParams,\n    ...p\n  }\n}\n\n// peer score parameter validation\nexport function validatePeerScoreParams(p: PeerScoreParams): void {\n  for (const [topic, params] of Object.entries(p.topics)) {\n    try {\n      validateTopicScoreParams(params)\n    } catch (e) {\n      throw new CodeError(\n        `invalid score parameters for topic ${topic}: ${(e as Error).message}`,\n        ERR_INVALID_PEER_SCORE_PARAMS\n      )\n    }\n  }\n\n  // check that the topic score is 0 or something positive\n  if (p.topicScoreCap < 0) {\n    throw new CodeError('invalid topic score cap; must be positive (or 0 for no cap)', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n\n  // check that we have an app specific score; the weight can be anything (but expected positive)\n  if (p.appSpecificScore === null || p.appSpecificScore === undefined) {\n    throw new CodeError('missing application specific score function', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n\n  // check the IP colocation factor\n  if (p.IPColocationFactorWeight > 0) {\n    throw new CodeError(\n      'invalid IPColocationFactorWeight; must be negative (or 0 to disable)',\n      ERR_INVALID_PEER_SCORE_PARAMS\n    )\n  }\n  if (p.IPColocationFactorWeight !== 0 && p.IPColocationFactorThreshold < 1) {\n    throw new CodeError('invalid IPColocationFactorThreshold; must be at least 1', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n\n  // check the behaviour penalty\n  if (p.behaviourPenaltyWeight > 0) {\n    throw new CodeError(\n      'invalid BehaviourPenaltyWeight; must be negative (or 0 to disable)',\n      ERR_INVALID_PEER_SCORE_PARAMS\n    )\n  }\n  if (p.behaviourPenaltyWeight !== 0 && (p.behaviourPenaltyDecay <= 0 || p.behaviourPenaltyDecay >= 1)) {\n    throw new CodeError('invalid BehaviourPenaltyDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n\n  // check the decay parameters\n  if (p.decayInterval < 1000) {\n    throw new CodeError('invalid DecayInterval; must be at least 1s', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n  if (p.decayToZero <= 0 || p.decayToZero >= 1) {\n    throw new CodeError('invalid DecayToZero; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n\n  // no need to check the score retention; a value of 0 means that we don't retain scores\n}\n\nexport function validateTopicScoreParams(p: TopicScoreParams): void {\n  // make sure we have a sane topic weight\n  if (p.topicWeight < 0) {\n    throw new CodeError('invalid topic weight; must be >= 0', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n\n  // check P1\n  if (p.timeInMeshQuantum === 0) {\n    throw new CodeError('invalid TimeInMeshQuantum; must be non zero', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n  if (p.timeInMeshWeight < 0) {\n    throw new CodeError('invalid TimeInMeshWeight; must be positive (or 0 to disable)', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n  if (p.timeInMeshWeight !== 0 && p.timeInMeshQuantum <= 0) {\n    throw new CodeError('invalid TimeInMeshQuantum; must be positive', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n  if (p.timeInMeshWeight !== 0 && p.timeInMeshCap <= 0) {\n    throw new CodeError('invalid TimeInMeshCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n\n  // check P2\n  if (p.firstMessageDeliveriesWeight < 0) {\n    throw new CodeError(\n      'invallid FirstMessageDeliveriesWeight; must be positive (or 0 to disable)',\n      ERR_INVALID_PEER_SCORE_PARAMS\n    )\n  }\n  if (\n    p.firstMessageDeliveriesWeight !== 0 &&\n    (p.firstMessageDeliveriesDecay <= 0 || p.firstMessageDeliveriesDecay >= 1)\n  ) {\n    throw new CodeError('invalid FirstMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n  if (p.firstMessageDeliveriesWeight !== 0 && p.firstMessageDeliveriesCap <= 0) {\n    throw new CodeError('invalid FirstMessageDeliveriesCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n\n  // check P3\n  if (p.meshMessageDeliveriesWeight > 0) {\n    throw new CodeError(\n      'invalid MeshMessageDeliveriesWeight; must be negative (or 0 to disable)',\n      ERR_INVALID_PEER_SCORE_PARAMS\n    )\n  }\n  if (p.meshMessageDeliveriesWeight !== 0 && (p.meshMessageDeliveriesDecay <= 0 || p.meshMessageDeliveriesDecay >= 1)) {\n    throw new CodeError('invalid MeshMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n  if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesCap <= 0) {\n    throw new CodeError('invalid MeshMessageDeliveriesCap; must be positive', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n  if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesThreshold <= 0) {\n    throw new CodeError('invalid MeshMessageDeliveriesThreshold; must be positive', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n  if (p.meshMessageDeliveriesWindow < 0) {\n    throw new CodeError('invalid MeshMessageDeliveriesWindow; must be non-negative', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n  if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesActivation < 1000) {\n    throw new CodeError('invalid MeshMessageDeliveriesActivation; must be at least 1s', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n\n  // check P3b\n  if (p.meshFailurePenaltyWeight > 0) {\n    throw new CodeError(\n      'invalid MeshFailurePenaltyWeight; must be negative (or 0 to disable)',\n      ERR_INVALID_PEER_SCORE_PARAMS\n    )\n  }\n  if (p.meshFailurePenaltyWeight !== 0 && (p.meshFailurePenaltyDecay <= 0 || p.meshFailurePenaltyDecay >= 1)) {\n    throw new CodeError('invalid MeshFailurePenaltyDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n\n  // check P4\n  if (p.invalidMessageDeliveriesWeight > 0) {\n    throw new CodeError(\n      'invalid InvalidMessageDeliveriesWeight; must be negative (or 0 to disable)',\n      ERR_INVALID_PEER_SCORE_PARAMS\n    )\n  }\n  if (p.invalidMessageDeliveriesDecay <= 0 || p.invalidMessageDeliveriesDecay >= 1) {\n    throw new CodeError('invalid InvalidMessageDeliveriesDecay; must be between 0 and 1', ERR_INVALID_PEER_SCORE_PARAMS)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}