{"ast":null,"code":"import accessor from 'byte-access';\nconst TWO_32 = 4294967296;\nexport class LongBits {\n  constructor() {\n    let hi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let lo = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    this.hi = hi;\n    this.lo = lo;\n  }\n  /**\n   * Returns these hi/lo bits as a BigInt\n   */\n\n\n  toBigInt(unsigned) {\n    if (unsigned === true) {\n      return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n);\n    }\n\n    if (this.hi >>> 31 !== 0) {\n      const lo = ~this.lo + 1 >>> 0;\n      let hi = ~this.hi >>> 0;\n\n      if (lo === 0) {\n        hi = hi + 1 >>> 0;\n      }\n\n      return -(BigInt(lo) + (BigInt(hi) << 32n));\n    }\n\n    return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n);\n  }\n  /**\n   * Returns these hi/lo bits as a Number - this may overflow, toBigInt\n   * should be preferred\n   */\n\n\n  toNumber(unsigned) {\n    return Number(this.toBigInt(unsigned));\n  }\n  /**\n   * ZigZag decode a LongBits object\n   */\n\n\n  zzDecode() {\n    const mask = -(this.lo & 1);\n    const lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    const hi = (this.hi >>> 1 ^ mask) >>> 0;\n    return new LongBits(hi, lo);\n  }\n  /**\n   * ZigZag encode a LongBits object\n   */\n\n\n  zzEncode() {\n    const mask = this.hi >> 31;\n    const hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    const lo = (this.lo << 1 ^ mask) >>> 0;\n    return new LongBits(hi, lo);\n  }\n  /**\n   * Encode a LongBits object as a varint byte array\n   */\n\n\n  toBytes(buf) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const access = accessor(buf);\n\n    while (this.hi > 0) {\n      access.set(offset++, this.lo & 127 | 128);\n      this.lo = (this.lo >>> 7 | this.hi << 25) >>> 0;\n      this.hi >>>= 7;\n    }\n\n    while (this.lo > 127) {\n      access.set(offset++, this.lo & 127 | 128);\n      this.lo = this.lo >>> 7;\n    }\n\n    access.set(offset++, this.lo);\n  }\n  /**\n   * Parse a LongBits object from a BigInt\n   */\n\n\n  static fromBigInt(value) {\n    if (value === 0n) {\n      return new LongBits();\n    }\n\n    const negative = value < 0;\n\n    if (negative) {\n      value = -value;\n    }\n\n    let hi = Number(value >> 32n) | 0;\n    let lo = Number(value - (BigInt(hi) << 32n)) | 0;\n\n    if (negative) {\n      hi = ~hi >>> 0;\n      lo = ~lo >>> 0;\n\n      if (++lo > TWO_32) {\n        lo = 0;\n\n        if (++hi > TWO_32) {\n          hi = 0;\n        }\n      }\n    }\n\n    return new LongBits(hi, lo);\n  }\n  /**\n   * Parse a LongBits object from a Number\n   */\n\n\n  static fromNumber(value) {\n    if (value === 0) {\n      return new LongBits();\n    }\n\n    const sign = value < 0;\n\n    if (sign) {\n      value = -value;\n    }\n\n    let lo = value >>> 0;\n    let hi = (value - lo) / 4294967296 >>> 0;\n\n    if (sign) {\n      hi = ~hi >>> 0;\n      lo = ~lo >>> 0;\n\n      if (++lo > 4294967295) {\n        lo = 0;\n\n        if (++hi > 4294967295) {\n          hi = 0;\n        }\n      }\n    }\n\n    return new LongBits(hi, lo);\n  }\n  /**\n   * Parse a LongBits object from a varint byte array\n   */\n\n\n  static fromBytes(buf) {\n    let offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    const access = accessor(buf); // tends to deopt with local vars for octet etc.\n\n    const bits = new LongBits();\n    let i = 0;\n\n    if (buf.length - offset > 4) {\n      // fast route (lo)\n      for (; i < 4; ++i) {\n        // 1st..4th\n        bits.lo = (bits.lo | (access.get(offset) & 127) << i * 7) >>> 0;\n\n        if (access.get(offset++) < 128) {\n          return bits;\n        }\n      } // 5th\n\n\n      bits.lo = (bits.lo | (access.get(offset) & 127) << 28) >>> 0;\n      bits.hi = (bits.hi | (access.get(offset) & 127) >> 4) >>> 0;\n\n      if (access.get(offset++) < 128) {\n        return bits;\n      }\n\n      i = 0;\n    } else {\n      for (; i < 4; ++i) {\n        /* istanbul ignore if */\n        if (offset >= buf.length) {\n          throw RangeError(`index out of range: ${offset} > ${buf.length}`);\n        } // 1st..4th\n\n\n        bits.lo = (bits.lo | (access.get(offset) & 127) << i * 7) >>> 0;\n\n        if (access.get(offset++) < 128) {\n          return bits;\n        }\n      }\n    }\n\n    if (buf.length - offset > 4) {\n      // fast route (hi)\n      for (; i < 5; ++i) {\n        // 6th..10th\n        bits.hi = (bits.hi | (access.get(offset) & 127) << i * 7 + 3) >>> 0;\n\n        if (access.get(offset++) < 128) {\n          return bits;\n        }\n      }\n    } else if (offset < buf.byteLength) {\n      for (; i < 5; ++i) {\n        /* istanbul ignore if */\n        if (offset >= buf.length) {\n          throw RangeError(`index out of range: ${offset} > ${buf.length}`);\n        } // 6th..10th\n\n\n        bits.hi = (bits.hi | (access.get(offset) & 127) << i * 7 + 3) >>> 0;\n\n        if (access.get(offset++) < 128) {\n          return bits;\n        }\n      }\n    }\n    /* istanbul ignore next */\n\n\n    throw RangeError('invalid varint encoding');\n  }\n\n}","map":{"version":3,"mappings":"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","names":["accessor","TWO_32","LongBits","constructor","hi","lo","toBigInt","unsigned","BigInt","toNumber","Number","zzDecode","mask","zzEncode","toBytes","buf","offset","access","set","fromBigInt","value","negative","fromNumber","sign","fromBytes","bits","i","length","get","RangeError","byteLength"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\longbits\\src\\index.ts"],"sourcesContent":["import type { Uint8ArrayList } from 'uint8arraylist'\nimport accessor from 'byte-access'\n\nconst TWO_32 = 4294967296\n\nexport class LongBits {\n  public hi: number\n  public lo: number\n\n  constructor (hi: number = 0, lo: number = 0) {\n    this.hi = hi\n    this.lo = lo\n  }\n\n  /**\n   * Returns these hi/lo bits as a BigInt\n   */\n  toBigInt (unsigned?: boolean): bigint {\n    if (unsigned === true) {\n      return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n)\n    }\n\n    if ((this.hi >>> 31) !== 0) {\n      const lo = ~this.lo + 1 >>> 0\n      let hi = ~this.hi >>> 0\n\n      if (lo === 0) {\n        hi = hi + 1 >>> 0\n      }\n\n      return -(BigInt(lo) + (BigInt(hi) << 32n))\n    }\n\n    return BigInt(this.lo >>> 0) + (BigInt(this.hi >>> 0) << 32n)\n  }\n\n  /**\n   * Returns these hi/lo bits as a Number - this may overflow, toBigInt\n   * should be preferred\n   */\n  toNumber (unsigned?: boolean): number {\n    return Number(this.toBigInt(unsigned))\n  }\n\n  /**\n   * ZigZag decode a LongBits object\n   */\n  zzDecode () {\n    const mask = -(this.lo & 1)\n    const lo = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0\n    const hi = (this.hi >>> 1 ^ mask) >>> 0\n\n    return new LongBits(hi, lo)\n  }\n\n  /**\n   * ZigZag encode a LongBits object\n   */\n  zzEncode () {\n    const mask = this.hi >> 31\n    const hi = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0\n    const lo = (this.lo << 1 ^ mask) >>> 0\n\n    return new LongBits(hi, lo)\n  }\n\n  /**\n   * Encode a LongBits object as a varint byte array\n   */\n  toBytes (buf: Uint8ArrayList | Uint8Array, offset = 0) {\n    const access = accessor(buf)\n\n    while (this.hi > 0) {\n      access.set(offset++, this.lo & 127 | 128)\n      this.lo = (this.lo >>> 7 | this.hi << 25) >>> 0\n      this.hi >>>= 7\n    }\n\n    while (this.lo > 127) {\n      access.set(offset++, this.lo & 127 | 128)\n      this.lo = this.lo >>> 7\n    }\n\n    access.set(offset++, this.lo)\n  }\n\n  /**\n   * Parse a LongBits object from a BigInt\n   */\n  static fromBigInt (value: bigint) {\n    if (value === 0n) {\n      return new LongBits()\n    }\n\n    const negative = value < 0\n\n    if (negative) {\n      value = -value\n    }\n\n    let hi = Number(value >> 32n) | 0\n    let lo = Number(value - (BigInt(hi) << 32n)) | 0\n\n    if (negative) {\n      hi = ~hi >>> 0\n      lo = ~lo >>> 0\n\n      if (++lo > TWO_32) {\n        lo = 0\n\n        if (++hi > TWO_32) {\n          hi = 0\n        }\n      }\n    }\n\n    return new LongBits(hi, lo)\n  }\n\n  /**\n   * Parse a LongBits object from a Number\n   */\n  static fromNumber (value: number) {\n    if (value === 0) {\n      return new LongBits()\n    }\n\n    const sign = value < 0\n\n    if (sign) {\n      value = -value\n    }\n\n    let lo = value >>> 0\n    let hi = (value - lo) / 4294967296 >>> 0\n\n    if (sign) {\n      hi = ~hi >>> 0\n      lo = ~lo >>> 0\n\n      if (++lo > 4294967295) {\n        lo = 0\n\n        if (++hi > 4294967295) {\n          hi = 0\n        }\n      }\n    }\n\n    return new LongBits(hi, lo)\n  }\n\n  /**\n   * Parse a LongBits object from a varint byte array\n   */\n  static fromBytes (buf: Uint8ArrayList | Uint8Array, offset: number = 0) {\n    const access = accessor(buf)\n\n    // tends to deopt with local vars for octet etc.\n    const bits = new LongBits()\n    let i = 0\n\n    if (buf.length - offset > 4) { // fast route (lo)\n      for (; i < 4; ++i) {\n        // 1st..4th\n        bits.lo = (bits.lo | (access.get(offset) & 127) << i * 7) >>> 0\n\n        if (access.get(offset++) < 128) {\n          return bits\n        }\n      }\n\n      // 5th\n      bits.lo = (bits.lo | (access.get(offset) & 127) << 28) >>> 0\n      bits.hi = (bits.hi | (access.get(offset) & 127) >> 4) >>> 0\n\n      if (access.get(offset++) < 128) {\n        return bits\n      }\n\n      i = 0\n    } else {\n      for (; i < 4; ++i) {\n        /* istanbul ignore if */\n        if (offset >= buf.length) {\n          throw RangeError(`index out of range: ${offset} > ${buf.length}`)\n        }\n\n        // 1st..4th\n        bits.lo = (bits.lo | (access.get(offset) & 127) << i * 7) >>> 0\n\n        if (access.get(offset++) < 128) {\n          return bits\n        }\n      }\n    }\n\n    if (buf.length - offset > 4) { // fast route (hi)\n      for (; i < 5; ++i) {\n        // 6th..10th\n        bits.hi = (bits.hi | (access.get(offset) & 127) << i * 7 + 3) >>> 0\n\n        if (access.get(offset++) < 128) {\n          return bits\n        }\n      }\n    } else if (offset < buf.byteLength) {\n      for (; i < 5; ++i) {\n        /* istanbul ignore if */\n        if (offset >= buf.length) {\n          throw RangeError(`index out of range: ${offset} > ${buf.length}`)\n        }\n\n        // 6th..10th\n        bits.hi = (bits.hi | (access.get(offset) & 127) << i * 7 + 3) >>> 0\n\n        if (access.get(offset++) < 128) {\n          return bits\n        }\n      }\n    }\n\n    /* istanbul ignore next */\n    throw RangeError('invalid varint encoding')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}