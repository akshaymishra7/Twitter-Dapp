{"ast":null,"code":"import { peerIdFromString } from '@libp2p/peer-id';\nimport { isMultiaddr } from '@multiformats/multiaddr';\nimport errCode from 'err-code';\nimport { codes } from './errors.js';\nimport { isPeerId } from '@libp2p/interface-peer-id';\n/**\n * Extracts a PeerId and/or multiaddr from the passed PeerId or Multiaddr\n */\n\nexport function getPeerAddress(peer) {\n  if (isPeerId(peer)) {\n    return {\n      peerId: peer\n    };\n  }\n\n  if (isMultiaddr(peer)) {\n    const peerId = peer.getPeerId();\n    return {\n      multiaddr: peer,\n      peerId: peerId == null ? undefined : peerIdFromString(peerId)\n    };\n  }\n\n  throw errCode(new Error(`${peer} is not a PeerId or a Multiaddr`), // eslint-disable-line @typescript-eslint/restrict-template-expressions\n  codes.ERR_INVALID_MULTIADDR);\n}","map":{"version":3,"mappings":"AAAA,SAASA,gBAAT,QAAiC,iBAAjC;AAEA,SAASC,WAAT,QAA4B,yBAA5B;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,KAAT,QAAsB,aAAtB;AACA,SAASC,QAAT,QAAyB,2BAAzB;AAGA;;;;AAGA,OAAM,SAAUC,cAAV,CAA0BC,IAA1B,EAAkD;AACtD,MAAIF,QAAQ,CAACE,IAAD,CAAZ,EAAoB;AAClB,WAAO;AACLC,YAAM,EAAED;AADH,KAAP;AAGD;;AAED,MAAIL,WAAW,CAACK,IAAD,CAAf,EAAuB;AACrB,UAAMC,MAAM,GAAGD,IAAI,CAACE,SAAL,EAAf;AAEA,WAAO;AACLC,eAAS,EAAEH,IADN;AAELC,YAAM,EAAEA,MAAM,IAAI,IAAV,GAAiBG,SAAjB,GAA6BV,gBAAgB,CAACO,MAAD;AAFhD,KAAP;AAID;;AAED,QAAML,OAAO,CACX,IAAIS,KAAJ,CAAU,GAAGL,IAAI,iCAAjB,CADW,EAC0C;AACrDH,OAAK,CAACS,qBAFK,CAAb;AAID","names":["peerIdFromString","isMultiaddr","errCode","codes","isPeerId","getPeerAddress","peer","peerId","getPeerId","multiaddr","undefined","Error","ERR_INVALID_MULTIADDR"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\src\\get-peer.ts"],"sourcesContent":["import { peerIdFromString } from '@libp2p/peer-id'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport { isMultiaddr } from '@multiformats/multiaddr'\nimport errCode from 'err-code'\nimport { codes } from './errors.js'\nimport { isPeerId } from '@libp2p/interface-peer-id'\nimport type { PeerId } from '@libp2p/interface-peer-id'\n\n/**\n * Extracts a PeerId and/or multiaddr from the passed PeerId or Multiaddr\n */\nexport function getPeerAddress (peer: PeerId | Multiaddr): { peerId?: PeerId, multiaddr?: Multiaddr } {\n  if (isPeerId(peer)) {\n    return {\n      peerId: peer\n    }\n  }\n\n  if (isMultiaddr(peer)) {\n    const peerId = peer.getPeerId()\n\n    return {\n      multiaddr: peer,\n      peerId: peerId == null ? undefined : peerIdFromString(peerId)\n    }\n  }\n\n  throw errCode(\n    new Error(`${peer} is not a PeerId or a Multiaddr`), // eslint-disable-line @typescript-eslint/restrict-template-expressions\n    codes.ERR_INVALID_MULTIADDR\n  )\n}\n"]},"metadata":{},"sourceType":"module"}