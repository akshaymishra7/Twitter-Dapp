{"ast":null,"code":"import { MplexStreamMuxer } from './mplex.js';\n\nclass Mplex {\n  constructor() {\n    let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.protocol = '/mplex/6.7.0';\n    this._init = init;\n  }\n\n  createStreamMuxer() {\n    let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new MplexStreamMuxer({ ...init,\n      ...this._init\n    });\n  }\n\n}\n\nexport function mplex() {\n  let init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  return () => new Mplex(init);\n}","map":{"version":3,"mappings":"AACA,SAASA,gBAAT,QAAiC,YAAjC;;AA6DA,MAAMC,KAAN,CAAW;AAITC,gBAAiC;AAAA,QAApBC,IAAoB,uEAAF,EAAE;AAH1B,oBAAW,cAAX;AAIL,SAAKC,KAAL,GAAaD,IAAb;AACD;;AAEDE,mBAAiB,GAA4B;AAAA,QAA1BF,IAA0B,uEAAF,EAAE;AAC3C,WAAO,IAAIH,gBAAJ,CAAqB,EAC1B,GAAGG,IADuB;AAE1B,SAAG,KAAKC;AAFkB,KAArB,CAAP;AAID;;AAbQ;;AAgBX,OAAM,SAAUE,KAAV,GAAqC;AAAA,MAApBH,IAAoB,uEAAF,EAAE;AACzC,SAAO,MAAM,IAAIF,KAAJ,CAAUE,IAAV,CAAb;AACD","names":["MplexStreamMuxer","Mplex","constructor","init","_init","createStreamMuxer","mplex"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\mplex\\src\\index.ts"],"sourcesContent":["import type { StreamMuxer, StreamMuxerFactory, StreamMuxerInit } from '@libp2p/interface-stream-muxer'\nimport { MplexStreamMuxer } from './mplex.js'\n\nexport interface MplexInit {\n  /**\n   * The maximum size of message that can be sent in one go in bytes.\n   * Messages larger than this will be split into multiple smaller\n   * messages. If we receive a message larger than this an error will\n   * be thrown and the connection closed. (default: 1MB)\n   */\n  maxMsgSize?: number\n\n  /**\n   * Constrains the size of the unprocessed message queue buffer.\n   * Before messages are deserialized, the raw bytes are buffered to ensure\n   * we have the complete message to deserialized. If the queue gets longer\n   * than this value an error will be thrown and the connection closed.\n   * (default: 4MB)\n   */\n  maxUnprocessedMessageQueueSize?: number\n\n  /**\n   * Each byte array written into a multiplexed stream is converted to one or\n   * more messages which are sent as byte arrays to the remote node. Sending\n   * lots of small messages can be expensive - use this setting to batch up\n   * the serialized bytes of all messages sent during the current tick up to\n   * this limit to send in one go similar to Nagle's algorithm. N.b. you\n   * should benchmark your application carefully when using this setting as it\n   * may cause the opposite of the desired effect. Omit this setting to send\n   * all messages as they become available. (default: undefined)\n   */\n  minSendBytes?: number\n\n  /**\n   * The maximum number of multiplexed streams that can be open at any\n   * one time. A request to open more than this will have a stream\n   * reset message sent immediately as a response for the newly opened\n   * stream id (default: 1024)\n   */\n  maxInboundStreams?: number\n\n  /**\n   * The maximum number of multiplexed streams that can be open at any\n   * one time. An attempt to open more than this will throw (default: 1024)\n   */\n  maxOutboundStreams?: number\n\n  /**\n   * Incoming stream messages are buffered until processed by the stream\n   * handler. If the buffer reaches this size in bytes the stream will\n   * be reset (default: 4MB)\n   */\n  maxStreamBufferSize?: number\n\n  /**\n   * When `maxInboundStreams` is hit, if the remote continues try to open\n   * more than this many new multiplexed streams per second the connection\n   * will be closed (default: 5)\n   */\n  disconnectThreshold?: number\n}\n\nclass Mplex implements StreamMuxerFactory {\n  public protocol = '/mplex/6.7.0'\n  private readonly _init: MplexInit\n\n  constructor (init: MplexInit = {}) {\n    this._init = init\n  }\n\n  createStreamMuxer (init: StreamMuxerInit = {}): StreamMuxer {\n    return new MplexStreamMuxer({\n      ...init,\n      ...this._init\n    })\n  }\n}\n\nexport function mplex (init: MplexInit = {}): () => StreamMuxerFactory {\n  return () => new Mplex(init)\n}\n"]},"metadata":{},"sourceType":"module"}