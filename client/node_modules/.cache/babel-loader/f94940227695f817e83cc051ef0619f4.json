{"ast":null,"code":"import { createAdd } from './add.js';\nimport { createAddAll } from './add-all.js';\nimport { createLs } from './ls.js';\nimport { createRm } from './rm.js';\nimport { createRmAll } from './rm-all.js';\nexport class PinAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor(_ref) {\n    let {\n      codecs,\n      repo\n    } = _ref;\n    const addAll = createAddAll({\n      codecs,\n      repo\n    });\n    this.addAll = addAll;\n    this.add = createAdd({\n      addAll\n    });\n    const rmAll = createRmAll({\n      codecs,\n      repo\n    });\n    this.rmAll = rmAll;\n    this.rm = createRm({\n      rmAll\n    });\n    this.ls = createLs({\n      codecs,\n      repo\n    });\n    /** @type {import('ipfs-core-types/src/pin/remote').API} */\n\n    this.remote = {\n      add: function (cid) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return Promise.reject(new Error('Not implemented'));\n      },\n      ls: async function* (query) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return Promise.reject(new Error('Not implemented'));\n      },\n      // eslint-disable-line require-yield\n      rm: function (query) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return Promise.reject(new Error('Not implemented'));\n      },\n      rmAll: function (query) {\n        let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return Promise.reject(new Error('Not implemented'));\n      },\n      service: {\n        add: (name, credentials) => Promise.reject(new Error('Not implemented')),\n        rm: function (name) {\n          let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n          return Promise.reject(new Error('Not implemented'));\n        },\n        // @ts-expect-error return types seem to be broken by a recent ts release. doesn't matter here because\n        // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n        ls: function () {\n          let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n          return Promise.reject(new Error('Not implemented'));\n        }\n      }\n    };\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/pin/index.js"],"names":["createAdd","createAddAll","createLs","createRm","createRmAll","PinAPI","constructor","codecs","repo","addAll","add","rmAll","rm","ls","remote","cid","options","Promise","reject","Error","query","service","name","credentials"],"mappings":"AAAA,SAASA,SAAT,QAA0B,UAA1B;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,MAAMC,MAAN,CAAa;AAClB;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,OAAoB;AAAA,QAAlB;AAAEC,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAkB;AAC7B,UAAMC,MAAM,GAAGR,YAAY,CAAC;AAAEM,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,CAA3B;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKC,GAAL,GAAWV,SAAS,CAAC;AAAES,MAAAA;AAAF,KAAD,CAApB;AACA,UAAME,KAAK,GAAGP,WAAW,CAAC;AAAEG,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,CAAzB;AACA,SAAKG,KAAL,GAAaA,KAAb;AACA,SAAKC,EAAL,GAAUT,QAAQ,CAAC;AAAEQ,MAAAA;AAAF,KAAD,CAAlB;AACA,SAAKE,EAAL,GAAUX,QAAQ,CAAC;AAAEK,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAD,CAAlB;AAEA;;AACA,SAAKM,MAAL,GAAc;AACZJ,MAAAA,GAAG,EAAE,UAACK,GAAD;AAAA,YAAMC,OAAN,uEAAgB,EAAhB;AAAA,eAAuBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAvB;AAAA,OADO;AAEZN,MAAAA,EAAE,EAAE,iBAAkBO,KAAlB,EAAuC;AAAA,YAAdJ,OAAc,uEAAJ,EAAI;AAAE,eAAOC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAP;AAAqD,OAFtF;AAEwF;AACpGP,MAAAA,EAAE,EAAE,UAACQ,KAAD;AAAA,YAAQJ,OAAR,uEAAkB,EAAlB;AAAA,eAAyBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAzB;AAAA,OAHQ;AAIZR,MAAAA,KAAK,EAAE,UAACS,KAAD;AAAA,YAAQJ,OAAR,uEAAkB,EAAlB;AAAA,eAAyBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAzB;AAAA,OAJK;AAKZE,MAAAA,OAAO,EAAE;AACPX,QAAAA,GAAG,EAAE,CAACY,IAAD,EAAOC,WAAP,KAAuBN,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CADrB;AAEPP,QAAAA,EAAE,EAAE,UAACU,IAAD;AAAA,cAAON,OAAP,uEAAiB,EAAjB;AAAA,iBAAwBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAxB;AAAA,SAFG;AAGP;AACA;AACAN,QAAAA,EAAE,EAAE;AAAA,cAACG,OAAD,uEAAW,EAAX;AAAA,iBAAkBC,OAAO,CAACC,MAAR,CAAe,IAAIC,KAAJ,CAAU,iBAAV,CAAf,CAAlB;AAAA;AALG;AALG,KAAd;AAaD;;AA7BiB","sourcesContent":["import { createAdd } from './add.js'\nimport { createAddAll } from './add-all.js'\nimport { createLs } from './ls.js'\nimport { createRm } from './rm.js'\nimport { createRmAll } from './rm-all.js'\n\nexport class PinAPI {\n  /**\n   * @param {object} config\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   */\n  constructor ({ codecs, repo }) {\n    const addAll = createAddAll({ codecs, repo })\n    this.addAll = addAll\n    this.add = createAdd({ addAll })\n    const rmAll = createRmAll({ codecs, repo })\n    this.rmAll = rmAll\n    this.rm = createRm({ rmAll })\n    this.ls = createLs({ codecs, repo })\n\n    /** @type {import('ipfs-core-types/src/pin/remote').API} */\n    this.remote = {\n      add: (cid, options = {}) => Promise.reject(new Error('Not implemented')),\n      ls: async function * (query, options = {}) { return Promise.reject(new Error('Not implemented')) }, // eslint-disable-line require-yield\n      rm: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      rmAll: (query, options = {}) => Promise.reject(new Error('Not implemented')),\n      service: {\n        add: (name, credentials) => Promise.reject(new Error('Not implemented')),\n        rm: (name, options = {}) => Promise.reject(new Error('Not implemented')),\n        // @ts-expect-error return types seem to be broken by a recent ts release. doesn't matter here because\n        // we are just throwing. Will be removed by https://github.com/protocol/web3-dev-team/pull/58\n        ls: (options = {}) => Promise.reject(new Error('Not implemented'))\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}