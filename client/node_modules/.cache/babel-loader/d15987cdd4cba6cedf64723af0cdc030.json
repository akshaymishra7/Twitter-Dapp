{"ast":null,"code":"import { createRepo as create } from 'ipfs-repo';\nimport { LevelDatastore } from 'datastore-level';\nimport { BlockstoreDatastoreAdapter } from 'blockstore-datastore-adapter';\nimport { MemoryLock } from 'ipfs-repo/locks/memory';\n/**\n * @typedef {import('ipfs-repo-migrations').ProgressCallback} MigrationProgressCallback\n */\n\n/**\n * @param {(...args: any[]) => void} print\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {object} options\n * @param {string} [options.path]\n * @param {boolean} [options.autoMigrate]\n * @param {MigrationProgressCallback} [options.onMigrationProgress]\n * @param {number} [options.peerStoreCacheSize]\n */\n\nexport function createRepo(print, codecs, options) {\n  const repoPath = options.path || 'ipfs';\n  return create(repoPath, codeOrName => codecs.getCodec(codeOrName), {\n    root: new LevelDatastore(repoPath, {\n      prefix: '',\n      version: 2\n    }),\n    blocks: new BlockstoreDatastoreAdapter(new LevelDatastore(`${repoPath}/blocks`, {\n      prefix: '',\n      version: 2\n    })),\n    datastore: new LevelDatastore(`${repoPath}/datastore`, {\n      prefix: '',\n      version: 2\n    }),\n    keys: new LevelDatastore(`${repoPath}/keys`, {\n      prefix: '',\n      version: 2\n    }),\n    pins: new LevelDatastore(`${repoPath}/pins`, {\n      prefix: '',\n      version: 2\n    })\n  }, {\n    autoMigrate: options.autoMigrate,\n    onMigrationProgress: options.onMigrationProgress || print,\n    repoLock: MemoryLock\n  });\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core-config/src/repo.browser.js"],"names":["createRepo","create","LevelDatastore","BlockstoreDatastoreAdapter","MemoryLock","print","codecs","options","repoPath","path","codeOrName","getCodec","root","prefix","version","blocks","datastore","keys","pins","autoMigrate","onMigrationProgress","repoLock"],"mappings":"AAAA,SAASA,UAAU,IAAIC,MAAvB,QAAqC,WAArC;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,0BAAT,QAA2C,8BAA3C;AACA,SAASC,UAAT,QAA2B,wBAA3B;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASJ,UAAT,CAAqBK,KAArB,EAA4BC,MAA5B,EAAoCC,OAApC,EAA6C;AAClD,QAAMC,QAAQ,GAAGD,OAAO,CAACE,IAAR,IAAgB,MAAjC;AAEA,SAAOR,MAAM,CAACO,QAAD,EAAYE,UAAD,IAAgBJ,MAAM,CAACK,QAAP,CAAgBD,UAAhB,CAA3B,EAAwD;AACnEE,IAAAA,IAAI,EAAE,IAAIV,cAAJ,CAAmBM,QAAnB,EAA6B;AACjCK,MAAAA,MAAM,EAAE,EADyB;AAEjCC,MAAAA,OAAO,EAAE;AAFwB,KAA7B,CAD6D;AAKnEC,IAAAA,MAAM,EAAE,IAAIZ,0BAAJ,CACN,IAAID,cAAJ,CAAoB,GAAEM,QAAS,SAA/B,EAAyC;AACvCK,MAAAA,MAAM,EAAE,EAD+B;AAEvCC,MAAAA,OAAO,EAAE;AAF8B,KAAzC,CADM,CAL2D;AAWnEE,IAAAA,SAAS,EAAE,IAAId,cAAJ,CAAoB,GAAEM,QAAS,YAA/B,EAA4C;AACrDK,MAAAA,MAAM,EAAE,EAD6C;AAErDC,MAAAA,OAAO,EAAE;AAF4C,KAA5C,CAXwD;AAenEG,IAAAA,IAAI,EAAE,IAAIf,cAAJ,CAAoB,GAAEM,QAAS,OAA/B,EAAuC;AAC3CK,MAAAA,MAAM,EAAE,EADmC;AAE3CC,MAAAA,OAAO,EAAE;AAFkC,KAAvC,CAf6D;AAmBnEI,IAAAA,IAAI,EAAE,IAAIhB,cAAJ,CAAoB,GAAEM,QAAS,OAA/B,EAAuC;AAC3CK,MAAAA,MAAM,EAAE,EADmC;AAE3CC,MAAAA,OAAO,EAAE;AAFkC,KAAvC;AAnB6D,GAAxD,EAuBV;AACDK,IAAAA,WAAW,EAAEZ,OAAO,CAACY,WADpB;AAEDC,IAAAA,mBAAmB,EAAEb,OAAO,CAACa,mBAAR,IAA+Bf,KAFnD;AAGDgB,IAAAA,QAAQ,EAAEjB;AAHT,GAvBU,CAAb;AA4BD","sourcesContent":["import { createRepo as create } from 'ipfs-repo'\nimport { LevelDatastore } from 'datastore-level'\nimport { BlockstoreDatastoreAdapter } from 'blockstore-datastore-adapter'\nimport { MemoryLock } from 'ipfs-repo/locks/memory'\n\n/**\n * @typedef {import('ipfs-repo-migrations').ProgressCallback} MigrationProgressCallback\n */\n\n/**\n * @param {(...args: any[]) => void} print\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} codecs\n * @param {object} options\n * @param {string} [options.path]\n * @param {boolean} [options.autoMigrate]\n * @param {MigrationProgressCallback} [options.onMigrationProgress]\n * @param {number} [options.peerStoreCacheSize]\n */\nexport function createRepo (print, codecs, options) {\n  const repoPath = options.path || 'ipfs'\n\n  return create(repoPath, (codeOrName) => codecs.getCodec(codeOrName), {\n    root: new LevelDatastore(repoPath, {\n      prefix: '',\n      version: 2\n    }),\n    blocks: new BlockstoreDatastoreAdapter(\n      new LevelDatastore(`${repoPath}/blocks`, {\n        prefix: '',\n        version: 2\n      })\n    ),\n    datastore: new LevelDatastore(`${repoPath}/datastore`, {\n      prefix: '',\n      version: 2\n    }),\n    keys: new LevelDatastore(`${repoPath}/keys`, {\n      prefix: '',\n      version: 2\n    }),\n    pins: new LevelDatastore(`${repoPath}/pins`, {\n      prefix: '',\n      version: 2\n    })\n  }, {\n    autoMigrate: options.autoMigrate,\n    onMigrationProgress: options.onMigrationProgress || print,\n    repoLock: MemoryLock\n  })\n}\n"]},"metadata":{},"sourceType":"module"}