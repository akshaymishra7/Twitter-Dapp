{"ast":null,"code":"\"use strict\"; // Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n/**\n * Package chacha implements ChaCha stream cipher.\n */\n\nvar binary_1 = require(\"@stablelib/binary\");\n\nvar wipe_1 = require(\"@stablelib/wipe\"); // Number of ChaCha rounds (ChaCha20).\n\n\nvar ROUNDS = 20; // Applies the ChaCha core function to 16-byte input,\n// 32-byte key key, and puts the result into 64-byte array out.\n\nfunction core(out, input, key) {\n  var j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n\n  var j1 = 0x3320646E; // \"nd 3\"     for 32-byte keys\n\n  var j2 = 0x79622D32; // \"2-by\"\n\n  var j3 = 0x6B206574; // \"te k\"\n\n  var j4 = key[3] << 24 | key[2] << 16 | key[1] << 8 | key[0];\n  var j5 = key[7] << 24 | key[6] << 16 | key[5] << 8 | key[4];\n  var j6 = key[11] << 24 | key[10] << 16 | key[9] << 8 | key[8];\n  var j7 = key[15] << 24 | key[14] << 16 | key[13] << 8 | key[12];\n  var j8 = key[19] << 24 | key[18] << 16 | key[17] << 8 | key[16];\n  var j9 = key[23] << 24 | key[22] << 16 | key[21] << 8 | key[20];\n  var j10 = key[27] << 24 | key[26] << 16 | key[25] << 8 | key[24];\n  var j11 = key[31] << 24 | key[30] << 16 | key[29] << 8 | key[28];\n  var j12 = input[3] << 24 | input[2] << 16 | input[1] << 8 | input[0];\n  var j13 = input[7] << 24 | input[6] << 16 | input[5] << 8 | input[4];\n  var j14 = input[11] << 24 | input[10] << 16 | input[9] << 8 | input[8];\n  var j15 = input[15] << 24 | input[14] << 16 | input[13] << 8 | input[12];\n  var x0 = j0;\n  var x1 = j1;\n  var x2 = j2;\n  var x3 = j3;\n  var x4 = j4;\n  var x5 = j5;\n  var x6 = j6;\n  var x7 = j7;\n  var x8 = j8;\n  var x9 = j9;\n  var x10 = j10;\n  var x11 = j11;\n  var x12 = j12;\n  var x13 = j13;\n  var x14 = j14;\n  var x15 = j15;\n\n  for (var i = 0; i < ROUNDS; i += 2) {\n    x0 = x0 + x4 | 0;\n    x12 ^= x0;\n    x12 = x12 >>> 32 - 16 | x12 << 16;\n    x8 = x8 + x12 | 0;\n    x4 ^= x8;\n    x4 = x4 >>> 32 - 12 | x4 << 12;\n    x1 = x1 + x5 | 0;\n    x13 ^= x1;\n    x13 = x13 >>> 32 - 16 | x13 << 16;\n    x9 = x9 + x13 | 0;\n    x5 ^= x9;\n    x5 = x5 >>> 32 - 12 | x5 << 12;\n    x2 = x2 + x6 | 0;\n    x14 ^= x2;\n    x14 = x14 >>> 32 - 16 | x14 << 16;\n    x10 = x10 + x14 | 0;\n    x6 ^= x10;\n    x6 = x6 >>> 32 - 12 | x6 << 12;\n    x3 = x3 + x7 | 0;\n    x15 ^= x3;\n    x15 = x15 >>> 32 - 16 | x15 << 16;\n    x11 = x11 + x15 | 0;\n    x7 ^= x11;\n    x7 = x7 >>> 32 - 12 | x7 << 12;\n    x2 = x2 + x6 | 0;\n    x14 ^= x2;\n    x14 = x14 >>> 32 - 8 | x14 << 8;\n    x10 = x10 + x14 | 0;\n    x6 ^= x10;\n    x6 = x6 >>> 32 - 7 | x6 << 7;\n    x3 = x3 + x7 | 0;\n    x15 ^= x3;\n    x15 = x15 >>> 32 - 8 | x15 << 8;\n    x11 = x11 + x15 | 0;\n    x7 ^= x11;\n    x7 = x7 >>> 32 - 7 | x7 << 7;\n    x1 = x1 + x5 | 0;\n    x13 ^= x1;\n    x13 = x13 >>> 32 - 8 | x13 << 8;\n    x9 = x9 + x13 | 0;\n    x5 ^= x9;\n    x5 = x5 >>> 32 - 7 | x5 << 7;\n    x0 = x0 + x4 | 0;\n    x12 ^= x0;\n    x12 = x12 >>> 32 - 8 | x12 << 8;\n    x8 = x8 + x12 | 0;\n    x4 ^= x8;\n    x4 = x4 >>> 32 - 7 | x4 << 7;\n    x0 = x0 + x5 | 0;\n    x15 ^= x0;\n    x15 = x15 >>> 32 - 16 | x15 << 16;\n    x10 = x10 + x15 | 0;\n    x5 ^= x10;\n    x5 = x5 >>> 32 - 12 | x5 << 12;\n    x1 = x1 + x6 | 0;\n    x12 ^= x1;\n    x12 = x12 >>> 32 - 16 | x12 << 16;\n    x11 = x11 + x12 | 0;\n    x6 ^= x11;\n    x6 = x6 >>> 32 - 12 | x6 << 12;\n    x2 = x2 + x7 | 0;\n    x13 ^= x2;\n    x13 = x13 >>> 32 - 16 | x13 << 16;\n    x8 = x8 + x13 | 0;\n    x7 ^= x8;\n    x7 = x7 >>> 32 - 12 | x7 << 12;\n    x3 = x3 + x4 | 0;\n    x14 ^= x3;\n    x14 = x14 >>> 32 - 16 | x14 << 16;\n    x9 = x9 + x14 | 0;\n    x4 ^= x9;\n    x4 = x4 >>> 32 - 12 | x4 << 12;\n    x2 = x2 + x7 | 0;\n    x13 ^= x2;\n    x13 = x13 >>> 32 - 8 | x13 << 8;\n    x8 = x8 + x13 | 0;\n    x7 ^= x8;\n    x7 = x7 >>> 32 - 7 | x7 << 7;\n    x3 = x3 + x4 | 0;\n    x14 ^= x3;\n    x14 = x14 >>> 32 - 8 | x14 << 8;\n    x9 = x9 + x14 | 0;\n    x4 ^= x9;\n    x4 = x4 >>> 32 - 7 | x4 << 7;\n    x1 = x1 + x6 | 0;\n    x12 ^= x1;\n    x12 = x12 >>> 32 - 8 | x12 << 8;\n    x11 = x11 + x12 | 0;\n    x6 ^= x11;\n    x6 = x6 >>> 32 - 7 | x6 << 7;\n    x0 = x0 + x5 | 0;\n    x15 ^= x0;\n    x15 = x15 >>> 32 - 8 | x15 << 8;\n    x10 = x10 + x15 | 0;\n    x5 ^= x10;\n    x5 = x5 >>> 32 - 7 | x5 << 7;\n  }\n\n  binary_1.writeUint32LE(x0 + j0 | 0, out, 0);\n  binary_1.writeUint32LE(x1 + j1 | 0, out, 4);\n  binary_1.writeUint32LE(x2 + j2 | 0, out, 8);\n  binary_1.writeUint32LE(x3 + j3 | 0, out, 12);\n  binary_1.writeUint32LE(x4 + j4 | 0, out, 16);\n  binary_1.writeUint32LE(x5 + j5 | 0, out, 20);\n  binary_1.writeUint32LE(x6 + j6 | 0, out, 24);\n  binary_1.writeUint32LE(x7 + j7 | 0, out, 28);\n  binary_1.writeUint32LE(x8 + j8 | 0, out, 32);\n  binary_1.writeUint32LE(x9 + j9 | 0, out, 36);\n  binary_1.writeUint32LE(x10 + j10 | 0, out, 40);\n  binary_1.writeUint32LE(x11 + j11 | 0, out, 44);\n  binary_1.writeUint32LE(x12 + j12 | 0, out, 48);\n  binary_1.writeUint32LE(x13 + j13 | 0, out, 52);\n  binary_1.writeUint32LE(x14 + j14 | 0, out, 56);\n  binary_1.writeUint32LE(x15 + j15 | 0, out, 60);\n}\n/**\n * Encrypt src with ChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the\n * same key and nonce, otherwise the stream will repeat. The function will\n * throw error if counter overflows to prevent this.\n *\n * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which\n * is more than a million petabytes). However, it is not recommended to\n * generate 8-byte nonces randomly, as the chance of collision is high.\n *\n * Never use the same key and nonce to encrypt more than one message.\n *\n * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte\n * array with stream counter in first nonceInplaceCounterLength bytes and nonce\n * in the last remaining bytes. The counter will be incremented inplace for\n * each ChaCha block. This is useful if you need to encrypt one stream of data\n * in chunks.\n */\n\n\nfunction streamXOR(key, nonce, src, dst, nonceInplaceCounterLength) {\n  if (nonceInplaceCounterLength === void 0) {\n    nonceInplaceCounterLength = 0;\n  } // We only support 256-bit keys.\n\n\n  if (key.length !== 32) {\n    throw new Error(\"ChaCha: key size must be 32 bytes\");\n  }\n\n  if (dst.length < src.length) {\n    throw new Error(\"ChaCha: destination is shorter than source\");\n  }\n\n  var nc;\n  var counterLength;\n\n  if (nonceInplaceCounterLength === 0) {\n    if (nonce.length !== 8 && nonce.length !== 12) {\n      throw new Error(\"ChaCha nonce must be 8 or 12 bytes\");\n    }\n\n    nc = new Uint8Array(16); // First counterLength bytes of nc are counter, starting with zero.\n\n    counterLength = nc.length - nonce.length; // Last bytes of nc after counterLength are nonce, set them.\n\n    nc.set(nonce, counterLength);\n  } else {\n    if (nonce.length !== 16) {\n      throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n    } // This will update passed nonce with counter inplace.\n\n\n    nc = nonce;\n    counterLength = nonceInplaceCounterLength;\n  } // Allocate temporary space for ChaCha block.\n\n\n  var block = new Uint8Array(64);\n\n  for (var i = 0; i < src.length; i += 64) {\n    // Generate a block.\n    core(block, nc, key); // XOR block bytes with src into dst.\n\n    for (var j = i; j < i + 64 && j < src.length; j++) {\n      dst[j] = src[j] ^ block[j - i];\n    } // Increment counter.\n\n\n    incrementCounter(nc, 0, counterLength);\n  } // Cleanup temporary space.\n\n\n  wipe_1.wipe(block);\n\n  if (nonceInplaceCounterLength === 0) {\n    // Cleanup counter.\n    wipe_1.wipe(nc);\n  }\n\n  return dst;\n}\n\nexports.streamXOR = streamXOR;\n/**\n * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte\n * nonce and write it into dst and return it.\n *\n * Never use the same key and nonce to generate more than one stream.\n *\n * If nonceInplaceCounterLength is not 0, it behaves the same with respect to\n * the nonce as described in the streamXOR documentation.\n *\n * stream is like streamXOR with all-zero src.\n */\n\nfunction stream(key, nonce, dst, nonceInplaceCounterLength) {\n  if (nonceInplaceCounterLength === void 0) {\n    nonceInplaceCounterLength = 0;\n  }\n\n  wipe_1.wipe(dst);\n  return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);\n}\n\nexports.stream = stream;\n\nfunction incrementCounter(counter, pos, len) {\n  var carry = 1;\n\n  while (len--) {\n    carry = carry + (counter[pos] & 0xff) | 0;\n    counter[pos] = carry & 0xff;\n    carry >>>= 8;\n    pos++;\n  }\n\n  if (carry > 0) {\n    throw new Error(\"ChaCha: counter overflow\");\n  }\n}","map":{"version":3,"mappings":"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","names":["ROUNDS","core","out","input","key","j0","j1","j2","j3","j4","j5","j6","j7","j8","j9","j10","j11","j12","j13","j14","j15","x0","x1","x2","x3","x4","x5","x6","x7","x8","x9","x10","x11","x12","x13","x14","x15","i","binary_1","streamXOR","nonce","src","dst","nonceInplaceCounterLength","length","Error","nc","counterLength","Uint8Array","set","block","j","incrementCounter","wipe_1","exports","stream","counter","pos","len","carry"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@stablelib\\chacha\\chacha.ts"],"sourcesContent":["// Copyright (C) 2016 Dmitry Chestnykh\n// MIT License. See LICENSE file for details.\n\n/**\n * Package chacha implements ChaCha stream cipher.\n */\n\nimport { writeUint32LE } from \"@stablelib/binary\";\nimport { wipe } from \"@stablelib/wipe\";\n\n// Number of ChaCha rounds (ChaCha20).\nconst ROUNDS = 20;\n\n// Applies the ChaCha core function to 16-byte input,\n// 32-byte key key, and puts the result into 64-byte array out.\nfunction core(out: Uint8Array, input: Uint8Array, key: Uint8Array): void {\n    let j0 = 0x61707865; // \"expa\"  -- ChaCha's \"sigma\" constant\n    let j1 = 0x3320646E; // \"nd 3\"     for 32-byte keys\n    let j2 = 0x79622D32; // \"2-by\"\n    let j3 = 0x6B206574; // \"te k\"\n    let j4 = (key[3] << 24) | (key[2] << 16) | (key[1] << 8) | key[0];\n    let j5 = (key[7] << 24) | (key[6] << 16) | (key[5] << 8) | key[4];\n    let j6 = (key[11] << 24) | (key[10] << 16) | (key[9] << 8) | key[8];\n    let j7 = (key[15] << 24) | (key[14] << 16) | (key[13] << 8) | key[12];\n    let j8 = (key[19] << 24) | (key[18] << 16) | (key[17] << 8) | key[16];\n    let j9 = (key[23] << 24) | (key[22] << 16) | (key[21] << 8) | key[20];\n    let j10 = (key[27] << 24) | (key[26] << 16) | (key[25] << 8) | key[24];\n    let j11 = (key[31] << 24) | (key[30] << 16) | (key[29] << 8) | key[28];\n    let j12 = (input[3] << 24) | (input[2] << 16) | (input[1] << 8) | input[0];\n    let j13 = (input[7] << 24) | (input[6] << 16) | (input[5] << 8) | input[4];\n    let j14 = (input[11] << 24) | (input[10] << 16) | (input[9] << 8) | input[8];\n    let j15 = (input[15] << 24) | (input[14] << 16) | (input[13] << 8) | input[12];\n\n    let x0 = j0;\n    let x1 = j1;\n    let x2 = j2;\n    let x3 = j3;\n    let x4 = j4;\n    let x5 = j5;\n    let x6 = j6;\n    let x7 = j7;\n    let x8 = j8;\n    let x9 = j9;\n    let x10 = j10;\n    let x11 = j11;\n    let x12 = j12;\n    let x13 = j13;\n    let x14 = j14;\n    let x15 = j15;\n\n    for (let i = 0; i < ROUNDS; i += 2) {\n        x0 = x0 + x4 | 0; x12 ^= x0; x12 = x12 >>> (32 - 16) | x12 << 16;\n        x8 = x8 + x12 | 0; x4 ^= x8; x4 = x4 >>> (32 - 12) | x4 << 12;\n        x1 = x1 + x5 | 0; x13 ^= x1; x13 = x13 >>> (32 - 16) | x13 << 16;\n        x9 = x9 + x13 | 0; x5 ^= x9; x5 = x5 >>> (32 - 12) | x5 << 12;\n\n        x2 = x2 + x6 | 0; x14 ^= x2; x14 = x14 >>> (32 - 16) | x14 << 16;\n        x10 = x10 + x14 | 0; x6 ^= x10; x6 = x6 >>> (32 - 12) | x6 << 12;\n        x3 = x3 + x7 | 0; x15 ^= x3; x15 = x15 >>> (32 - 16) | x15 << 16;\n        x11 = x11 + x15 | 0; x7 ^= x11; x7 = x7 >>> (32 - 12) | x7 << 12;\n\n        x2 = x2 + x6 | 0; x14 ^= x2; x14 = x14 >>> (32 - 8) | x14 << 8;\n        x10 = x10 + x14 | 0; x6 ^= x10; x6 = x6 >>> (32 - 7) | x6 << 7;\n        x3 = x3 + x7 | 0; x15 ^= x3; x15 = x15 >>> (32 - 8) | x15 << 8;\n        x11 = x11 + x15 | 0; x7 ^= x11; x7 = x7 >>> (32 - 7) | x7 << 7;\n\n        x1 = x1 + x5 | 0; x13 ^= x1; x13 = x13 >>> (32 - 8) | x13 << 8;\n        x9 = x9 + x13 | 0; x5 ^= x9; x5 = x5 >>> (32 - 7) | x5 << 7;\n        x0 = x0 + x4 | 0; x12 ^= x0; x12 = x12 >>> (32 - 8) | x12 << 8;\n        x8 = x8 + x12 | 0; x4 ^= x8; x4 = x4 >>> (32 - 7) | x4 << 7;\n\n        x0 = x0 + x5 | 0; x15 ^= x0; x15 = x15 >>> (32 - 16) | x15 << 16;\n        x10 = x10 + x15 | 0; x5 ^= x10; x5 = x5 >>> (32 - 12) | x5 << 12;\n        x1 = x1 + x6 | 0; x12 ^= x1; x12 = x12 >>> (32 - 16) | x12 << 16;\n        x11 = x11 + x12 | 0; x6 ^= x11; x6 = x6 >>> (32 - 12) | x6 << 12;\n\n        x2 = x2 + x7 | 0; x13 ^= x2; x13 = x13 >>> (32 - 16) | x13 << 16;\n        x8 = x8 + x13 | 0; x7 ^= x8; x7 = x7 >>> (32 - 12) | x7 << 12;\n        x3 = x3 + x4 | 0; x14 ^= x3; x14 = x14 >>> (32 - 16) | x14 << 16;\n        x9 = x9 + x14 | 0; x4 ^= x9; x4 = x4 >>> (32 - 12) | x4 << 12;\n\n        x2 = x2 + x7 | 0; x13 ^= x2; x13 = x13 >>> (32 - 8) | x13 << 8;\n        x8 = x8 + x13 | 0; x7 ^= x8; x7 = x7 >>> (32 - 7) | x7 << 7;\n        x3 = x3 + x4 | 0; x14 ^= x3; x14 = x14 >>> (32 - 8) | x14 << 8;\n        x9 = x9 + x14 | 0; x4 ^= x9; x4 = x4 >>> (32 - 7) | x4 << 7;\n\n        x1 = x1 + x6 | 0; x12 ^= x1; x12 = x12 >>> (32 - 8) | x12 << 8;\n        x11 = x11 + x12 | 0; x6 ^= x11; x6 = x6 >>> (32 - 7) | x6 << 7;\n        x0 = x0 + x5 | 0; x15 ^= x0; x15 = x15 >>> (32 - 8) | x15 << 8;\n        x10 = x10 + x15 | 0; x5 ^= x10; x5 = x5 >>> (32 - 7) | x5 << 7;\n    }\n    writeUint32LE(x0 + j0 | 0, out, 0);\n    writeUint32LE(x1 + j1 | 0, out, 4);\n    writeUint32LE(x2 + j2 | 0, out, 8);\n    writeUint32LE(x3 + j3 | 0, out, 12);\n    writeUint32LE(x4 + j4 | 0, out, 16);\n    writeUint32LE(x5 + j5 | 0, out, 20);\n    writeUint32LE(x6 + j6 | 0, out, 24);\n    writeUint32LE(x7 + j7 | 0, out, 28);\n    writeUint32LE(x8 + j8 | 0, out, 32);\n    writeUint32LE(x9 + j9 | 0, out, 36);\n    writeUint32LE(x10 + j10 | 0, out, 40);\n    writeUint32LE(x11 + j11 | 0, out, 44);\n    writeUint32LE(x12 + j12 | 0, out, 48);\n    writeUint32LE(x13 + j13 | 0, out, 52);\n    writeUint32LE(x14 + j14 | 0, out, 56);\n    writeUint32LE(x15 + j15 | 0, out, 60);\n}\n\n/**\n * Encrypt src with ChaCha20 stream generated for the given 32-byte key and\n * 8-byte (as in original implementation) or 12-byte (as in RFC7539) nonce and\n * write the result into dst and return it.\n *\n * dst and src may be the same, but otherwise must not overlap.\n *\n * If nonce is 12 bytes, users should not encrypt more than 256 GiB with the\n * same key and nonce, otherwise the stream will repeat. The function will\n * throw error if counter overflows to prevent this.\n *\n * If nonce is 8 bytes, the output is practically unlimited (2^70 bytes, which\n * is more than a million petabytes). However, it is not recommended to\n * generate 8-byte nonces randomly, as the chance of collision is high.\n *\n * Never use the same key and nonce to encrypt more than one message.\n *\n * If nonceInplaceCounterLength is not 0, the nonce is assumed to be a 16-byte\n * array with stream counter in first nonceInplaceCounterLength bytes and nonce\n * in the last remaining bytes. The counter will be incremented inplace for\n * each ChaCha block. This is useful if you need to encrypt one stream of data\n * in chunks.\n */\nexport function streamXOR(key: Uint8Array, nonce: Uint8Array,\n    src: Uint8Array, dst: Uint8Array, nonceInplaceCounterLength = 0): Uint8Array {\n    // We only support 256-bit keys.\n    if (key.length !== 32) {\n        throw new Error(\"ChaCha: key size must be 32 bytes\");\n    }\n\n    if (dst.length < src.length) {\n        throw new Error(\"ChaCha: destination is shorter than source\");\n    }\n\n    let nc: Uint8Array;\n    let counterLength: number;\n\n    if (nonceInplaceCounterLength === 0) {\n        if (nonce.length !== 8 && nonce.length !== 12) {\n            throw new Error(\"ChaCha nonce must be 8 or 12 bytes\");\n        }\n        nc = new Uint8Array(16);\n        // First counterLength bytes of nc are counter, starting with zero.\n        counterLength = nc.length - nonce.length;\n        // Last bytes of nc after counterLength are nonce, set them.\n        nc.set(nonce, counterLength);\n    } else {\n        if (nonce.length !== 16) {\n            throw new Error(\"ChaCha nonce with counter must be 16 bytes\");\n        }\n        // This will update passed nonce with counter inplace.\n        nc = nonce;\n        counterLength = nonceInplaceCounterLength;\n    }\n\n    // Allocate temporary space for ChaCha block.\n    const block = new Uint8Array(64);\n\n    for (let i = 0; i < src.length; i += 64) {\n        // Generate a block.\n        core(block, nc, key);\n\n        // XOR block bytes with src into dst.\n        for (let j = i; j < i + 64 && j < src.length; j++) {\n            dst[j] = src[j] ^ block[j - i];\n        }\n\n        // Increment counter.\n        incrementCounter(nc, 0, counterLength);\n    }\n\n    // Cleanup temporary space.\n    wipe(block);\n\n    if (nonceInplaceCounterLength === 0) {\n        // Cleanup counter.\n        wipe(nc);\n    }\n\n    return dst;\n}\n\n/**\n * Generate ChaCha20 stream for the given 32-byte key and 8-byte or 12-byte\n * nonce and write it into dst and return it.\n *\n * Never use the same key and nonce to generate more than one stream.\n *\n * If nonceInplaceCounterLength is not 0, it behaves the same with respect to\n * the nonce as described in the streamXOR documentation.\n *\n * stream is like streamXOR with all-zero src.\n */\nexport function stream(key: Uint8Array, nonce: Uint8Array,\n    dst: Uint8Array, nonceInplaceCounterLength = 0): Uint8Array {\n    wipe(dst);\n    return streamXOR(key, nonce, dst, dst, nonceInplaceCounterLength);\n}\n\nfunction incrementCounter(counter: Uint8Array, pos: number, len: number) {\n    let carry = 1;\n    while (len--) {\n        carry = carry + (counter[pos] & 0xff) | 0;\n        counter[pos] = carry & 0xff;\n        carry >>>= 8;\n        pos++;\n    }\n    if (carry > 0) {\n        throw new Error(\"ChaCha: counter overflow\");\n    }\n}\n"]},"metadata":{},"sourceType":"script"}