{"ast":null,"code":"import { Key } from 'interface-datastore/key';\nimport { notFoundError } from 'datastore-core/errors';\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\nexport const CONFIG_KEY = new Key('/config');\nexport const VERSION_KEY = new Key('/version');\n/**\n * Level dbs wrap level dbs that wrap level dbs. Find a level-js\n * instance in the chain if one exists.\n *\n * @param {Datastore} store\n * @returns {Datastore | undefined}\n */\n\nexport function findLevelJs(store) {\n  let db = store; // @ts-ignore\n\n  while (db.db || db.child) {\n    // @ts-ignore\n    db = db.db || db.child; // `Level` is only present in the browser, in node it is LevelDOWN\n    // @ts-ignore\n\n    if (db.type === 'level-js' || db.constructor.name === 'Level') {\n      return db;\n    }\n  }\n}\n/**\n * @param {Key} key\n * @param {function (Key): Promise<boolean>} has\n * @param {Datastore} store\n * @returns {Promise<boolean>}\n */\n\nexport async function hasWithFallback(key, has, store) {\n  const result = await has(key);\n\n  if (result) {\n    return result;\n  } // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n\n\n  const levelJs = findLevelJs(store);\n\n  if (!levelJs) {\n    return false;\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString());\n\n    req.transaction.onabort = () => {\n      reject(req.transaction.error);\n    };\n\n    req.transaction.oncomplete = () => {\n      resolve(Boolean(req.result));\n    };\n  });\n}\n/**\n * @param {import('interface-datastore').Key} key\n * @param {function (Key): Promise<Uint8Array>} get\n * @param {function (Key): Promise<boolean>} has\n * @param {import('interface-datastore').Datastore} store\n * @returns {Promise<Uint8Array>}\n */\n\nasync function getWithFallback(key, get, has, store) {\n  if (await has(key)) {\n    return get(key);\n  } // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n\n\n  const levelJs = findLevelJs(store);\n\n  if (!levelJs) {\n    throw notFoundError();\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString());\n\n    req.transaction.onabort = () => {\n      reject(req.transaction.error);\n    };\n\n    req.transaction.oncomplete = () => {\n      if (req.result) {\n        return resolve(req.result);\n      }\n\n      reject(notFoundError());\n    };\n  });\n}\n/**\n * @param {Datastore} store\n */\n\n\nfunction wrapStore(store) {\n  // necessary since level-js@5 cannot read keys from level-js@4 and earlier\n  const originalGet = store.get.bind(store);\n  const originalHas = store.has.bind(store);\n  /**\n   * @param {Key} key\n   */\n\n  store.get = key => getWithFallback(key, originalGet, originalHas, store);\n  /**\n   * @param {Key} key\n   */\n\n\n  store.has = key => hasWithFallback(key, originalHas, store);\n\n  return store;\n}\n/**\n * @param {import('./types').Backends} backends\n */\n\n\nexport function wrapBackends(backends) {\n  return { ...backends,\n    root: wrapStore(backends.root),\n    datastore: wrapStore(backends.datastore),\n    pins: wrapStore(backends.pins),\n    keys: wrapStore(backends.keys)\n  };\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-repo-migrations/src/utils.js"],"names":["Key","notFoundError","CONFIG_KEY","VERSION_KEY","findLevelJs","store","db","child","type","constructor","name","hasWithFallback","key","has","result","levelJs","Promise","resolve","reject","req","get","toString","transaction","onabort","error","oncomplete","Boolean","getWithFallback","wrapStore","originalGet","bind","originalHas","wrapBackends","backends","root","datastore","pins","keys"],"mappings":"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","sourcesContent":["\nimport { Key } from 'interface-datastore/key'\nimport { notFoundError } from 'datastore-core/errors'\n\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\nexport const CONFIG_KEY = new Key('/config')\nexport const VERSION_KEY = new Key('/version')\n\n/**\n * Level dbs wrap level dbs that wrap level dbs. Find a level-js\n * instance in the chain if one exists.\n *\n * @param {Datastore} store\n * @returns {Datastore | undefined}\n */\nexport function findLevelJs (store) {\n  let db = store\n\n  // @ts-ignore\n  while (db.db || db.child) {\n    // @ts-ignore\n    db = db.db || db.child\n\n    // `Level` is only present in the browser, in node it is LevelDOWN\n    // @ts-ignore\n    if (db.type === 'level-js' || db.constructor.name === 'Level') {\n      return db\n    }\n  }\n}\n\n/**\n * @param {Key} key\n * @param {function (Key): Promise<boolean>} has\n * @param {Datastore} store\n * @returns {Promise<boolean>}\n */\nexport async function hasWithFallback (key, has, store) {\n  const result = await has(key)\n\n  if (result) {\n    return result\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    return false\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      resolve(Boolean(req.result))\n    }\n  })\n}\n\n/**\n * @param {import('interface-datastore').Key} key\n * @param {function (Key): Promise<Uint8Array>} get\n * @param {function (Key): Promise<boolean>} has\n * @param {import('interface-datastore').Datastore} store\n * @returns {Promise<Uint8Array>}\n */\nasync function getWithFallback (key, get, has, store) {\n  if (await has(key)) {\n    return get(key)\n  }\n\n  // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n  const levelJs = findLevelJs(store)\n\n  if (!levelJs) {\n    throw notFoundError()\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    // @ts-ignore\n    const req = levelJs.store('readonly').get(key.toString())\n    req.transaction.onabort = () => {\n      reject(req.transaction.error)\n    }\n    req.transaction.oncomplete = () => {\n      if (req.result) {\n        return resolve(req.result)\n      }\n\n      reject(notFoundError())\n    }\n  })\n}\n\n/**\n * @param {Datastore} store\n */\nfunction wrapStore (store) {\n  // necessary since level-js@5 cannot read keys from level-js@4 and earlier\n  const originalGet = store.get.bind(store)\n  const originalHas = store.has.bind(store)\n  /**\n   * @param {Key} key\n   */\n  store.get = (key) => getWithFallback(key, originalGet, originalHas, store)\n  /**\n   * @param {Key} key\n   */\n  store.has = (key) => hasWithFallback(key, originalHas, store)\n\n  return store\n}\n\n/**\n * @param {import('./types').Backends} backends\n */\nexport function wrapBackends (backends) {\n  return {\n    ...backends,\n    root: wrapStore(backends.root),\n    datastore: wrapStore(backends.datastore),\n    pins: wrapStore(backends.pins),\n    keys: wrapStore(backends.keys)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}