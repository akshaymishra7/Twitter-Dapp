{"ast":null,"code":"import mergeOptions from 'merge-options';\nimport { dnsaddrResolver } from '@multiformats/multiaddr/resolvers';\nimport * as Constants from './constants.js';\nimport { AGENT_VERSION } from './identify/consts.js';\nimport * as RelayConstants from './circuit/constants.js';\nimport { publicAddressesFirst } from '@libp2p/utils/address-sort';\nimport { FaultTolerance } from '@libp2p/interface-transport';\nimport { codes, messages } from './errors.js';\nimport errCode from 'err-code';\nimport { isNode, isBrowser, isWebWorker, isElectronMain, isElectronRenderer, isReactNative } from 'wherearewe';\nconst DefaultConfig = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: [],\n    announceFilter: multiaddrs => multiaddrs\n  },\n  connectionManager: {\n    maxConnections: 300,\n    minConnections: 50,\n    autoDial: true,\n    autoDialInterval: 10000,\n    maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n    dialTimeout: Constants.DIAL_TIMEOUT,\n    inboundUpgradeTimeout: Constants.INBOUND_UPGRADE_TIMEOUT,\n    resolvers: {\n      dnsaddr: dnsaddrResolver\n    },\n    addressSorter: publicAddressesFirst\n  },\n  connectionGater: {},\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  },\n  peerRouting: {\n    refreshManager: {\n      enabled: true,\n      interval: 6e5,\n      bootDelay: 10e3\n    }\n  },\n  nat: {\n    enabled: true,\n    ttl: 7200,\n    keepAlive: true\n  },\n  relay: {\n    enabled: true,\n    advertise: {\n      bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,\n      enabled: false,\n      ttl: RelayConstants.ADVERTISE_TTL\n    },\n    hop: {\n      enabled: false,\n      active: false,\n      timeout: 30000\n    },\n    autoRelay: {\n      enabled: false,\n      maxListeners: 2\n    }\n  },\n  identify: {\n    protocolPrefix: 'ipfs',\n    host: {\n      agentVersion: AGENT_VERSION\n    },\n    // https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/identify/id.go#L48\n    timeout: 60000,\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    maxPushIncomingStreams: 1,\n    maxPushOutgoingStreams: 1\n  },\n  ping: {\n    protocolPrefix: 'ipfs',\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    timeout: 10000\n  },\n  fetch: {\n    protocolPrefix: 'libp2p',\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    timeout: 10000\n  }\n};\nexport function validateConfig(opts) {\n  const resultingOptions = mergeOptions(DefaultConfig, opts);\n\n  if (resultingOptions.transports == null || resultingOptions.transports.length < 1) {\n    throw errCode(new Error(messages.ERR_TRANSPORTS_REQUIRED), codes.ERR_TRANSPORTS_REQUIRED);\n  }\n\n  if (resultingOptions.connectionEncryption == null || resultingOptions.connectionEncryption.length === 0) {\n    throw errCode(new Error(messages.CONN_ENCRYPTION_REQUIRED), codes.CONN_ENCRYPTION_REQUIRED);\n  }\n\n  if (resultingOptions.connectionProtector === null && globalThis.process?.env?.LIBP2P_FORCE_PNET != null) {\n    // eslint-disable-line no-undef\n    throw errCode(new Error(messages.ERR_PROTECTOR_REQUIRED), codes.ERR_PROTECTOR_REQUIRED);\n  } // Append user agent version to default AGENT_VERSION depending on the environment\n\n\n  if (resultingOptions.identify.host.agentVersion === AGENT_VERSION) {\n    if (isNode || isElectronMain) {\n      resultingOptions.identify.host.agentVersion += ` UserAgent=${globalThis.process.version}`;\n    } else if (isBrowser || isWebWorker || isElectronRenderer || isReactNative) {\n      resultingOptions.identify.host.agentVersion += ` UserAgent=${globalThis.navigator.userAgent}`;\n    }\n  }\n\n  return resultingOptions;\n}","map":{"version":3,"mappings":"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","names":["mergeOptions","dnsaddrResolver","Constants","AGENT_VERSION","RelayConstants","publicAddressesFirst","FaultTolerance","codes","messages","errCode","isNode","isBrowser","isWebWorker","isElectronMain","isElectronRenderer","isReactNative","DefaultConfig","addresses","listen","announce","noAnnounce","announceFilter","multiaddrs","connectionManager","maxConnections","minConnections","autoDial","autoDialInterval","maxParallelDials","MAX_PARALLEL_DIALS","maxDialsPerPeer","MAX_PER_PEER_DIALS","dialTimeout","DIAL_TIMEOUT","inboundUpgradeTimeout","INBOUND_UPGRADE_TIMEOUT","resolvers","dnsaddr","addressSorter","connectionGater","transportManager","faultTolerance","FATAL_ALL","peerRouting","refreshManager","enabled","interval","bootDelay","nat","ttl","keepAlive","relay","advertise","ADVERTISE_BOOT_DELAY","ADVERTISE_TTL","hop","active","timeout","autoRelay","maxListeners","identify","protocolPrefix","host","agentVersion","maxInboundStreams","maxOutboundStreams","maxPushIncomingStreams","maxPushOutgoingStreams","ping","fetch","validateConfig","opts","resultingOptions","transports","length","Error","ERR_TRANSPORTS_REQUIRED","connectionEncryption","CONN_ENCRYPTION_REQUIRED","connectionProtector","globalThis","process","env","LIBP2P_FORCE_PNET","ERR_PROTECTOR_REQUIRED","version","navigator","userAgent"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\src\\config.ts"],"sourcesContent":["import mergeOptions from 'merge-options'\nimport { dnsaddrResolver } from '@multiformats/multiaddr/resolvers'\nimport * as Constants from './constants.js'\nimport { AGENT_VERSION } from './identify/consts.js'\nimport * as RelayConstants from './circuit/constants.js'\nimport { publicAddressesFirst } from '@libp2p/utils/address-sort'\nimport { FaultTolerance } from '@libp2p/interface-transport'\nimport type { Multiaddr } from '@multiformats/multiaddr'\nimport type { Libp2pInit } from './index.js'\nimport { codes, messages } from './errors.js'\nimport errCode from 'err-code'\nimport type { RecursivePartial } from '@libp2p/interfaces'\nimport { isNode, isBrowser, isWebWorker, isElectronMain, isElectronRenderer, isReactNative } from 'wherearewe'\n\nconst DefaultConfig: Partial<Libp2pInit> = {\n  addresses: {\n    listen: [],\n    announce: [],\n    noAnnounce: [],\n    announceFilter: (multiaddrs: Multiaddr[]) => multiaddrs\n  },\n  connectionManager: {\n    maxConnections: 300,\n    minConnections: 50,\n    autoDial: true,\n    autoDialInterval: 10000,\n    maxParallelDials: Constants.MAX_PARALLEL_DIALS,\n    maxDialsPerPeer: Constants.MAX_PER_PEER_DIALS,\n    dialTimeout: Constants.DIAL_TIMEOUT,\n    inboundUpgradeTimeout: Constants.INBOUND_UPGRADE_TIMEOUT,\n    resolvers: {\n      dnsaddr: dnsaddrResolver\n    },\n    addressSorter: publicAddressesFirst\n  },\n  connectionGater: {},\n  transportManager: {\n    faultTolerance: FaultTolerance.FATAL_ALL\n  },\n  peerRouting: {\n    refreshManager: {\n      enabled: true,\n      interval: 6e5,\n      bootDelay: 10e3\n    }\n  },\n  nat: {\n    enabled: true,\n    ttl: 7200,\n    keepAlive: true\n  },\n  relay: {\n    enabled: true,\n    advertise: {\n      bootDelay: RelayConstants.ADVERTISE_BOOT_DELAY,\n      enabled: false,\n      ttl: RelayConstants.ADVERTISE_TTL\n    },\n    hop: {\n      enabled: false,\n      active: false,\n      timeout: 30000\n    },\n    autoRelay: {\n      enabled: false,\n      maxListeners: 2\n    }\n  },\n  identify: {\n    protocolPrefix: 'ipfs',\n    host: {\n      agentVersion: AGENT_VERSION\n    },\n    // https://github.com/libp2p/go-libp2p/blob/8d2e54e1637041d5cf4fac1e531287560bd1f4ac/p2p/protocol/identify/id.go#L48\n    timeout: 60000,\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    maxPushIncomingStreams: 1,\n    maxPushOutgoingStreams: 1\n  },\n  ping: {\n    protocolPrefix: 'ipfs',\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    timeout: 10000\n  },\n  fetch: {\n    protocolPrefix: 'libp2p',\n    maxInboundStreams: 1,\n    maxOutboundStreams: 1,\n    timeout: 10000\n  }\n}\n\nexport function validateConfig (opts: RecursivePartial<Libp2pInit>): Libp2pInit {\n  const resultingOptions: Libp2pInit = mergeOptions(DefaultConfig, opts)\n\n  if (resultingOptions.transports == null || resultingOptions.transports.length < 1) {\n    throw errCode(new Error(messages.ERR_TRANSPORTS_REQUIRED), codes.ERR_TRANSPORTS_REQUIRED)\n  }\n\n  if (resultingOptions.connectionEncryption == null || resultingOptions.connectionEncryption.length === 0) {\n    throw errCode(new Error(messages.CONN_ENCRYPTION_REQUIRED), codes.CONN_ENCRYPTION_REQUIRED)\n  }\n\n  if (resultingOptions.connectionProtector === null && globalThis.process?.env?.LIBP2P_FORCE_PNET != null) { // eslint-disable-line no-undef\n    throw errCode(new Error(messages.ERR_PROTECTOR_REQUIRED), codes.ERR_PROTECTOR_REQUIRED)\n  }\n\n  // Append user agent version to default AGENT_VERSION depending on the environment\n  if (resultingOptions.identify.host.agentVersion === AGENT_VERSION) {\n    if (isNode || isElectronMain) {\n      resultingOptions.identify.host.agentVersion += ` UserAgent=${globalThis.process.version}`\n    } else if (isBrowser || isWebWorker || isElectronRenderer || isReactNative) {\n      resultingOptions.identify.host.agentVersion += ` UserAgent=${globalThis.navigator.userAgent}`\n    }\n  }\n\n  return resultingOptions\n}\n"]},"metadata":{},"sourceType":"module"}