{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport first from 'it-first';\nimport last from 'it-last';\nimport { resolve } from '../../utils.js';\nimport errCode from 'err-code';\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\nexport function createGet(_ref) {\n  let {\n    codecs,\n    repo,\n    preload\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"get\"]}\n   */\n  const get = async function get(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    if (options.path) {\n      const entry = options.localResolve ? await first(resolve(cid, options.path, codecs, repo, options)) : await last(resolve(cid, options.path, codecs, repo, options));\n      /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n\n      const result = entry;\n\n      if (!result) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n      }\n\n      return result;\n    }\n\n    const codec = await codecs.getCodec(cid.code);\n    const block = await repo.blocks.get(cid, options);\n    const node = codec.decode(block);\n    return {\n      value: node,\n      remainderPath: ''\n    };\n  };\n\n  return withTimeoutOption(get);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/dag/get.js"],"names":["withTimeoutOption","first","last","resolve","errCode","createGet","codecs","repo","preload","get","cid","options","path","entry","localResolve","result","Error","codec","getCodec","code","block","blocks","node","decode","value","remainderPath"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qCAAlC;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,OAAOC,OAAP,MAAoB,UAApB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,OAA+C;AAAA,MAA3B;AAAEC,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBC,IAAAA;AAAhB,GAA2B;;AACpD;AACF;AACA;AACE,QAAMC,GAAG,GAAG,eAAeA,GAAf,CAAoBC,GAApB,EAAuC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACjD,QAAIA,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACE,GAAD,CAAP;AACD;;AAED,QAAIC,OAAO,CAACC,IAAZ,EAAkB;AAChB,YAAMC,KAAK,GAAGF,OAAO,CAACG,YAAR,GACV,MAAMb,KAAK,CAACE,OAAO,CAACO,GAAD,EAAMC,OAAO,CAACC,IAAd,EAAoBN,MAApB,EAA4BC,IAA5B,EAAkCI,OAAlC,CAAR,CADD,GAEV,MAAMT,IAAI,CAACC,OAAO,CAACO,GAAD,EAAMC,OAAO,CAACC,IAAd,EAAoBN,MAApB,EAA4BC,IAA5B,EAAkCI,OAAlC,CAAR,CAFd;AAGA;;AACA,YAAMI,MAAM,GAAIF,KAAhB;;AAEA,UAAI,CAACE,MAAL,EAAa;AACX,cAAMX,OAAO,CAAC,IAAIY,KAAJ,CAAU,WAAV,CAAD,EAAyB,eAAzB,CAAb;AACD;;AAED,aAAOD,MAAP;AACD;;AAED,UAAME,KAAK,GAAG,MAAMX,MAAM,CAACY,QAAP,CAAgBR,GAAG,CAACS,IAApB,CAApB;AACA,UAAMC,KAAK,GAAG,MAAMb,IAAI,CAACc,MAAL,CAAYZ,GAAZ,CAAgBC,GAAhB,EAAqBC,OAArB,CAApB;AACA,UAAMW,IAAI,GAAGL,KAAK,CAACM,MAAN,CAAaH,KAAb,CAAb;AAEA,WAAO;AACLI,MAAAA,KAAK,EAAEF,IADF;AAELG,MAAAA,aAAa,EAAE;AAFV,KAAP;AAID,GA3BD;;AA6BA,SAAOzB,iBAAiB,CAACS,GAAD,CAAxB;AACD","sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport first from 'it-first'\nimport last from 'it-last'\nimport { resolve } from '../../utils.js'\nimport errCode from 'err-code'\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createGet ({ codecs, repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"get\"]}\n   */\n  const get = async function get (cid, options = {}) {\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    if (options.path) {\n      const entry = options.localResolve\n        ? await first(resolve(cid, options.path, codecs, repo, options))\n        : await last(resolve(cid, options.path, codecs, repo, options))\n      /** @type {import('ipfs-core-types/src/dag').GetResult | undefined} - first and last will return undefined when empty */\n      const result = (entry)\n\n      if (!result) {\n        throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n      }\n\n      return result\n    }\n\n    const codec = await codecs.getCodec(cid.code)\n    const block = await repo.blocks.get(cid, options)\n    const node = codec.decode(block)\n\n    return {\n      value: node,\n      remainderPath: ''\n    }\n  }\n\n  return withTimeoutOption(get)\n}\n"]},"metadata":{},"sourceType":"module"}