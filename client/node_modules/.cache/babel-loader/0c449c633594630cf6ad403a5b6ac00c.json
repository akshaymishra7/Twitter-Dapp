{"ast":null,"code":"import * as dagPB from '@ipld/dag-pb';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { UnixFS } from 'ipfs-unixfs';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { CID } from 'multiformats/cid';\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\nexport function createNew(_ref) {\n  let {\n    repo,\n    preload\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"new\"]}\n   */\n  async function _new() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let data;\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = new UnixFS({\n          type: 'directory'\n        }).marshal();\n      } else {\n        throw new Error('unknown template');\n      }\n    }\n\n    const buf = dagPB.encode({\n      Data: data,\n      Links: []\n    });\n    const hash = await sha256.digest(buf);\n    const cid = CID.createV0(hash);\n    await repo.blocks.put(cid, buf, {\n      signal: options.signal\n    });\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    return cid;\n  }\n\n  return withTimeoutOption(_new);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/object/new.js"],"names":["dagPB","sha256","UnixFS","withTimeoutOption","CID","createNew","repo","preload","_new","options","data","template","type","marshal","Error","buf","encode","Data","Links","hash","digest","cid","createV0","blocks","put","signal"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,cAAvB;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,MAAT,QAAuB,aAAvB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,GAAT,QAAoB,kBAApB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,OAAuC;AAAA,MAAnB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAmB;;AAC5C;AACF;AACA;AACE,iBAAeC,IAAf,GAAmC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACjC,QAAIC,IAAJ;;AAEA,QAAID,OAAO,CAACE,QAAZ,EAAsB;AACpB,UAAIF,OAAO,CAACE,QAAR,KAAqB,YAAzB,EAAuC;AACrCD,QAAAA,IAAI,GAAI,IAAIR,MAAJ,CAAW;AAAEU,UAAAA,IAAI,EAAE;AAAR,SAAX,CAAD,CAAoCC,OAApC,EAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIC,KAAJ,CAAU,kBAAV,CAAN;AACD;AACF;;AAED,UAAMC,GAAG,GAAGf,KAAK,CAACgB,MAAN,CAAa;AACvBC,MAAAA,IAAI,EAAEP,IADiB;AAEvBQ,MAAAA,KAAK,EAAE;AAFgB,KAAb,CAAZ;AAIA,UAAMC,IAAI,GAAG,MAAMlB,MAAM,CAACmB,MAAP,CAAcL,GAAd,CAAnB;AACA,UAAMM,GAAG,GAAGjB,GAAG,CAACkB,QAAJ,CAAaH,IAAb,CAAZ;AAEA,UAAMb,IAAI,CAACiB,MAAL,CAAYC,GAAZ,CAAgBH,GAAhB,EAAqBN,GAArB,EAA0B;AAC9BU,MAAAA,MAAM,EAAEhB,OAAO,CAACgB;AADc,KAA1B,CAAN;;AAIA,QAAIhB,OAAO,CAACF,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACc,GAAD,CAAP;AACD;;AAED,WAAOA,GAAP;AACD;;AAED,SAAOlB,iBAAiB,CAACK,IAAD,CAAxB;AACD","sourcesContent":["import * as dagPB from '@ipld/dag-pb'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createNew ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"new\"]}\n   */\n  async function _new (options = {}) {\n    let data\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = (new UnixFS({ type: 'directory' })).marshal()\n      } else {\n        throw new Error('unknown template')\n      }\n    }\n\n    const buf = dagPB.encode({\n      Data: data,\n      Links: []\n    })\n    const hash = await sha256.digest(buf)\n    const cid = CID.createV0(hash)\n\n    await repo.blocks.put(cid, buf, {\n      signal: options.signal\n    })\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return cid\n  }\n\n  return withTimeoutOption(_new)\n}\n"]},"metadata":{},"sourceType":"module"}