{"ast":null,"code":"import { CID } from 'multiformats/cid';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\n\nexport function createPut(_ref) {\n  let {\n    repo,\n    codecs,\n    hashers,\n    preload\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"put\"]}\n   */\n  async function put(dagNode) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const release = options.pin ? await repo.gcLock.readLock() : null;\n\n    try {\n      const storeCodec = await codecs.getCodec(options.storeCodec || 'dag-cbor'); // TODO: doesn't getCodec throw? verify and possibly remove this\n\n      if (!storeCodec) {\n        throw new Error(`Unknown storeCodec ${options.storeCodec}, please configure additional BlockCodecs for this IPFS instance`);\n      }\n\n      if (options.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded');\n        }\n\n        const inputCodec = await codecs.getCodec(options.inputCodec);\n\n        if (!inputCodec) {\n          throw new Error(`Unknown inputCodec ${options.inputCodec}, please configure additional BlockCodecs for this IPFS instance`);\n        }\n\n        dagNode = inputCodec.decode(dagNode);\n      }\n\n      const cidVersion = options.version != null ? options.version : 1;\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256');\n\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`);\n      }\n\n      const buf = storeCodec.encode(dagNode);\n      const hash = await hasher.digest(buf);\n      const cid = CID.create(cidVersion, storeCodec.code, hash);\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      });\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid);\n      }\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      return cid;\n    } finally {\n      if (release) {\n        release();\n      }\n    }\n  }\n\n  return withTimeoutOption(put);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/dag/put.js"],"names":["CID","withTimeoutOption","createPut","repo","codecs","hashers","preload","put","dagNode","options","release","pin","gcLock","readLock","storeCodec","getCodec","Error","inputCodec","Uint8Array","decode","cidVersion","version","hasher","getHasher","hashAlg","buf","encode","hash","digest","cid","create","code","blocks","signal","pins","pinRecursively"],"mappings":"AAAA,SAASA,GAAT,QAAoB,kBAApB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,OAAwD;AAAA,MAApC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA;AAAzB,GAAoC;;AAC7D;AACF;AACA;AACE,iBAAeC,GAAf,CAAoBC,OAApB,EAA2C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACzC,UAAMC,OAAO,GAAGD,OAAO,CAACE,GAAR,GAAc,MAAMR,IAAI,CAACS,MAAL,CAAYC,QAAZ,EAApB,GAA6C,IAA7D;;AAEA,QAAI;AACF,YAAMC,UAAU,GAAG,MAAMV,MAAM,CAACW,QAAP,CAAgBN,OAAO,CAACK,UAAR,IAAsB,UAAtC,CAAzB,CADE,CAEF;;AACA,UAAI,CAACA,UAAL,EAAiB;AACf,cAAM,IAAIE,KAAJ,CAAW,sBAAqBP,OAAO,CAACK,UAAW,kEAAnD,CAAN;AACD;;AAED,UAAIL,OAAO,CAACQ,UAAZ,EAAwB;AACtB,YAAI,EAAET,OAAO,YAAYU,UAArB,CAAJ,EAAsC;AACpC,gBAAM,IAAIF,KAAJ,CAAU,sDAAV,CAAN;AACD;;AACD,cAAMC,UAAU,GAAG,MAAMb,MAAM,CAACW,QAAP,CAAgBN,OAAO,CAACQ,UAAxB,CAAzB;;AACA,YAAI,CAACA,UAAL,EAAiB;AACf,gBAAM,IAAID,KAAJ,CAAW,sBAAqBP,OAAO,CAACQ,UAAW,kEAAnD,CAAN;AACD;;AACDT,QAAAA,OAAO,GAAGS,UAAU,CAACE,MAAX,CAAkBX,OAAlB,CAAV;AACD;;AAED,YAAMY,UAAU,GAAGX,OAAO,CAACY,OAAR,IAAmB,IAAnB,GAA0BZ,OAAO,CAACY,OAAlC,GAA4C,CAA/D;AACA,YAAMC,MAAM,GAAG,MAAMjB,OAAO,CAACkB,SAAR,CAAkBd,OAAO,CAACe,OAAR,IAAmB,UAArC,CAArB;;AAEA,UAAI,CAACF,MAAL,EAAa;AACX,cAAM,IAAIN,KAAJ,CAAW,0BAAyBP,OAAO,CAACe,OAAQ,uEAApD,CAAN;AACD;;AAED,YAAMC,GAAG,GAAGX,UAAU,CAACY,MAAX,CAAkBlB,OAAlB,CAAZ;AACA,YAAMmB,IAAI,GAAG,MAAML,MAAM,CAACM,MAAP,CAAcH,GAAd,CAAnB;AACA,YAAMI,GAAG,GAAG7B,GAAG,CAAC8B,MAAJ,CAAWV,UAAX,EAAuBN,UAAU,CAACiB,IAAlC,EAAwCJ,IAAxC,CAAZ;AAEA,YAAMxB,IAAI,CAAC6B,MAAL,CAAYzB,GAAZ,CAAgBsB,GAAhB,EAAqBJ,GAArB,EAA0B;AAC9BQ,QAAAA,MAAM,EAAExB,OAAO,CAACwB;AADc,OAA1B,CAAN;;AAIA,UAAIxB,OAAO,CAACE,GAAZ,EAAiB;AACf,cAAMR,IAAI,CAAC+B,IAAL,CAAUC,cAAV,CAAyBN,GAAzB,CAAN;AACD;;AAED,UAAIpB,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,QAAAA,OAAO,CAACuB,GAAD,CAAP;AACD;;AAED,aAAOA,GAAP;AACD,KA1CD,SA0CU;AACR,UAAInB,OAAJ,EAAa;AACXA,QAAAA,OAAO;AACR;AACF;AACF;;AAED,SAAOT,iBAAiB,CAACM,GAAD,CAAxB;AACD","sourcesContent":["import { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-core-utils/multihashes').Multihashes} config.hashers\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut ({ repo, codecs, hashers, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"put\"]}\n   */\n  async function put (dagNode, options = {}) {\n    const release = options.pin ? await repo.gcLock.readLock() : null\n\n    try {\n      const storeCodec = await codecs.getCodec(options.storeCodec || 'dag-cbor')\n      // TODO: doesn't getCodec throw? verify and possibly remove this\n      if (!storeCodec) {\n        throw new Error(`Unknown storeCodec ${options.storeCodec}, please configure additional BlockCodecs for this IPFS instance`)\n      }\n\n      if (options.inputCodec) {\n        if (!(dagNode instanceof Uint8Array)) {\n          throw new Error('Can only inputCodec on raw bytes that can be decoded')\n        }\n        const inputCodec = await codecs.getCodec(options.inputCodec)\n        if (!inputCodec) {\n          throw new Error(`Unknown inputCodec ${options.inputCodec}, please configure additional BlockCodecs for this IPFS instance`)\n        }\n        dagNode = inputCodec.decode(dagNode)\n      }\n\n      const cidVersion = options.version != null ? options.version : 1\n      const hasher = await hashers.getHasher(options.hashAlg || 'sha2-256')\n\n      if (!hasher) {\n        throw new Error(`Unknown hash algorithm ${options.hashAlg}, please configure additional MultihashHashers for this IPFS instance`)\n      }\n\n      const buf = storeCodec.encode(dagNode)\n      const hash = await hasher.digest(buf)\n      const cid = CID.create(cidVersion, storeCodec.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid)\n      }\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      return cid\n    } finally {\n      if (release) {\n        release()\n      }\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"]},"metadata":{},"sourceType":"module"}