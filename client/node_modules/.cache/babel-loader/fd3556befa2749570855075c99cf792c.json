{"ast":null,"code":"import { importer } from 'ipfs-unixfs-importer';\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-multiple';\nimport { parseChunkerString } from './utils.js';\nimport { pipe } from 'it-pipe';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport mergeOpts from 'merge-options';\nconst mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs-importer').ImportResult} ImportResult\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * @template T\n *\n * @typedef {import('it-stream-types').Source<T>} Source<T>\n */\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../../types').Preload} preload\n * @property {Multihashes} hashers\n * @property {import('ipfs-core-types/src/root').ShardingOptions} [options]\n * @param {Context} context\n */\n\nexport function createAddAll(_ref) {\n  let {\n    repo,\n    preload,\n    hashers,\n    options\n  } = _ref;\n  const isShardingEnabled = options && options.sharding;\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]}\n   */\n\n  async function* addAll(source) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const opts = mergeOptions({\n      shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n      strategy: 'balanced'\n    }, options, { ...parseChunkerString(options.chunker)\n    }); // CID v0 is for multihashes encoded with sha2-256\n\n    if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n      opts.cidVersion = 1;\n    }\n\n    if (opts.trickle) {\n      opts.strategy = 'trickle';\n    }\n\n    if (opts.strategy === 'trickle') {\n      opts.leafType = 'raw';\n      opts.reduceSingleLeafToSelf = false;\n    }\n\n    if (opts.cidVersion > 0 && opts.rawLeaves === undefined) {\n      // if the cid version is 1 or above, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true;\n    }\n\n    if (opts.hashAlg !== undefined && opts.rawLeaves === undefined) {\n      // if a non-default hash alg has been specified, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true;\n    }\n\n    delete opts.trickle;\n    /** @type {Record<string, number>} */\n\n    const totals = {};\n\n    if (opts.progress) {\n      const prog = opts.progress;\n      /**\n       * @param {number} bytes\n       * @param {string} path\n       */\n\n      opts.progress = (bytes, path) => {\n        if (!totals[path]) {\n          totals[path] = 0;\n        }\n\n        totals[path] += bytes;\n        prog(totals[path], path);\n      };\n    }\n    /** @type {MultihashHasher | undefined} */\n\n\n    let hasher;\n\n    if (opts.hashAlg != null) {\n      hasher = await hashers.getHasher(opts.hashAlg);\n    }\n\n    const iterator = pipe(normaliseInput(source),\n    /**\n     * @param {Source<import('ipfs-unixfs-importer').ImportCandidate>} source\n     */\n    source => importer(source, repo.blocks, { ...opts,\n      hasher,\n      pin: false\n    }), transformFile(opts), preloadFile(preload, opts), pinFile(repo, opts));\n    const releaseLock = await repo.gcLock.readLock();\n\n    try {\n      for await (const added of iterator) {\n        const path = added.path ?? added.cid.toString(); // do not keep file totals around forever\n\n        delete totals[path];\n        yield { ...added,\n          path\n        };\n      }\n    } finally {\n      releaseLock();\n    }\n  }\n\n  return withTimeoutOption(addAll);\n}\n/**\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\n\nfunction transformFile(opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function* transformFile(source) {\n    for await (const file of source) {\n      let cid = file.cid;\n\n      if (opts.cidVersion === 1) {\n        cid = cid.toV1();\n      }\n\n      let path = file.path ? file.path : cid.toString();\n\n      if (opts.wrapWithDirectory && !file.path) {\n        path = '';\n      }\n\n      yield {\n        path,\n        cid: cid,\n        size: file.size,\n        mode: file.unixfs && file.unixfs.mode,\n        mtime: file.unixfs && file.unixfs.mtime\n      };\n    }\n  }\n\n  return transformFile;\n}\n/**\n * @param {(cid: CID) => void} preload\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\n\n\nfunction preloadFile(preload, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function* maybePreloadFile(source) {\n    for await (const file of source) {\n      const isRootFile = !file.path || opts.wrapWithDirectory ? file.path === '' : !file.path.includes('/');\n      const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false;\n\n      if (shouldPreload) {\n        preload(file.cid);\n      }\n\n      yield file;\n    }\n  }\n\n  return maybePreloadFile;\n}\n/**\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\n\n\nfunction pinFile(repo, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function* maybePinFile(source) {\n    for await (const file of source) {\n      // Pin a file if it is the root dir of a recursive add or the single file\n      // of a direct add.\n      const isRootDir = !(file.path && file.path.includes('/'));\n      const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash;\n\n      if (shouldPin) {\n        await repo.pins.pinRecursively(file.cid);\n      }\n\n      yield file;\n    }\n  }\n\n  return maybePinFile;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/add-all/index.js"],"names":["importer","normaliseInput","parseChunkerString","pipe","withTimeoutOption","mergeOpts","mergeOptions","bind","ignoreUndefined","createAddAll","repo","preload","hashers","options","isShardingEnabled","sharding","addAll","source","opts","shardSplitThreshold","Infinity","strategy","chunker","hashAlg","cidVersion","trickle","leafType","reduceSingleLeafToSelf","rawLeaves","undefined","totals","progress","prog","bytes","path","hasher","getHasher","iterator","blocks","pin","transformFile","preloadFile","pinFile","releaseLock","gcLock","readLock","added","cid","toString","file","toV1","wrapWithDirectory","size","mode","unixfs","mtime","maybePreloadFile","isRootFile","includes","shouldPreload","onlyHash","maybePinFile","isRootDir","shouldPin","pins","pinRecursively"],"mappings":"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","sourcesContent":["import { importer } from 'ipfs-unixfs-importer'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-multiple'\nimport { parseChunkerString } from './utils.js'\nimport { pipe } from 'it-pipe'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport mergeOpts from 'merge-options'\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('ipfs-unixfs-importer').ImportResult} ImportResult\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * @template T\n *\n * @typedef {import('it-stream-types').Source<T>} Source<T>\n */\n\n/**\n * @typedef {object} Context\n * @property {import('ipfs-repo').IPFSRepo} repo\n * @property {import('../../types').Preload} preload\n * @property {Multihashes} hashers\n * @property {import('ipfs-core-types/src/root').ShardingOptions} [options]\n * @param {Context} context\n */\nexport function createAddAll ({ repo, preload, hashers, options }) {\n  const isShardingEnabled = options && options.sharding\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]}\n   */\n  async function * addAll (source, options = {}) {\n    const opts = mergeOptions({\n      shardSplitThreshold: isShardingEnabled ? 1000 : Infinity,\n      strategy: 'balanced'\n    }, options, {\n      ...parseChunkerString(options.chunker)\n    })\n\n    // CID v0 is for multihashes encoded with sha2-256\n    if (opts.hashAlg && opts.hashAlg !== 'sha2-256' && opts.cidVersion !== 1) {\n      opts.cidVersion = 1\n    }\n\n    if (opts.trickle) {\n      opts.strategy = 'trickle'\n    }\n\n    if (opts.strategy === 'trickle') {\n      opts.leafType = 'raw'\n      opts.reduceSingleLeafToSelf = false\n    }\n\n    if (opts.cidVersion > 0 && opts.rawLeaves === undefined) {\n      // if the cid version is 1 or above, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    if (opts.hashAlg !== undefined && opts.rawLeaves === undefined) {\n      // if a non-default hash alg has been specified, use raw leaves as this is\n      // what go does.\n      opts.rawLeaves = true\n    }\n\n    delete opts.trickle\n\n    /** @type {Record<string, number>} */\n    const totals = {}\n\n    if (opts.progress) {\n      const prog = opts.progress\n\n      /**\n       * @param {number} bytes\n       * @param {string} path\n       */\n      opts.progress = (bytes, path) => {\n        if (!totals[path]) {\n          totals[path] = 0\n        }\n\n        totals[path] += bytes\n\n        prog(totals[path], path)\n      }\n    }\n\n    /** @type {MultihashHasher | undefined} */\n    let hasher\n\n    if (opts.hashAlg != null) {\n      hasher = await hashers.getHasher(opts.hashAlg)\n    }\n\n    const iterator = pipe(\n      normaliseInput(source),\n      /**\n       * @param {Source<import('ipfs-unixfs-importer').ImportCandidate>} source\n       */\n      source => importer(source, repo.blocks, {\n        ...opts,\n        hasher,\n        pin: false\n      }),\n      transformFile(opts),\n      preloadFile(preload, opts),\n      pinFile(repo, opts)\n    )\n\n    const releaseLock = await repo.gcLock.readLock()\n\n    try {\n      for await (const added of iterator) {\n        const path = added.path ?? added.cid.toString()\n\n        // do not keep file totals around forever\n        delete totals[path]\n\n        yield {\n          ...added,\n          path\n        }\n      }\n    } finally {\n      releaseLock()\n    }\n  }\n\n  return withTimeoutOption(addAll)\n}\n\n/**\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction transformFile (opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * transformFile (source) {\n    for await (const file of source) {\n      let cid = file.cid\n\n      if (opts.cidVersion === 1) {\n        cid = cid.toV1()\n      }\n\n      let path = file.path ? file.path : cid.toString()\n\n      if (opts.wrapWithDirectory && !file.path) {\n        path = ''\n      }\n\n      yield {\n        path,\n        cid: cid,\n        size: file.size,\n        mode: file.unixfs && file.unixfs.mode,\n        mtime: file.unixfs && file.unixfs.mtime\n      }\n    }\n  }\n\n  return transformFile\n}\n\n/**\n * @param {(cid: CID) => void} preload\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction preloadFile (preload, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * maybePreloadFile (source) {\n    for await (const file of source) {\n      const isRootFile = !file.path || opts.wrapWithDirectory\n        ? file.path === ''\n        : !file.path.includes('/')\n\n      const shouldPreload = isRootFile && !opts.onlyHash && opts.preload !== false\n\n      if (shouldPreload) {\n        preload(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePreloadFile\n}\n\n/**\n * @param {import('ipfs-repo').IPFSRepo} repo\n * @param {import('ipfs-core-types/src/root').AddAllOptions} opts\n */\nfunction pinFile (repo, opts) {\n  /**\n   * @param {Source<ImportResult>} source\n   */\n  async function * maybePinFile (source) {\n    for await (const file of source) {\n      // Pin a file if it is the root dir of a recursive add or the single file\n      // of a direct add.\n      const isRootDir = !(file.path && file.path.includes('/'))\n      const shouldPin = (opts.pin == null ? true : opts.pin) && isRootDir && !opts.onlyHash\n\n      if (shouldPin) {\n        await repo.pins.pinRecursively(file.cid)\n      }\n\n      yield file\n    }\n  }\n\n  return maybePinFile\n}\n"]},"metadata":{},"sourceType":"module"}