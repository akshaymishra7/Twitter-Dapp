{"ast":null,"code":"import { Message } from '../../message/index.js';\nimport { logger } from '@libp2p/logger';\nimport { removePrivateAddresses, removePublicAddresses } from '../../utils.js';\nimport { equals as uint8ArrayEquals } from 'uint8arrays';\nimport { protocols } from '@multiformats/multiaddr';\nconst log = logger('libp2p:kad-dht:rpc:handlers:find-node');\nexport class FindNodeHandler {\n  constructor(components, init) {\n    const {\n      peerRouting,\n      lan\n    } = init;\n    this.components = components;\n    this.peerRouting = peerRouting;\n    this.lan = Boolean(lan);\n  }\n  /**\n   * Process `FindNode` DHT messages\n   */\n\n\n  async handle(peerId, msg) {\n    log('incoming request from %p for peers closer to %b', peerId, msg.key);\n    let closer = [];\n\n    if (uint8ArrayEquals(this.components.peerId.toBytes(), msg.key)) {\n      closer = [{\n        id: this.components.peerId,\n        multiaddrs: this.components.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code)),\n        protocols: []\n      }];\n    } else {\n      closer = await this.peerRouting.getCloserPeersOffline(msg.key, peerId);\n    }\n\n    closer = closer.map(this.lan ? removePublicAddresses : removePrivateAddresses).filter(_ref => {\n      let {\n        multiaddrs\n      } = _ref;\n      return multiaddrs.length;\n    });\n    const response = new Message(msg.type, new Uint8Array(0), msg.clusterLevel);\n\n    if (closer.length > 0) {\n      response.closerPeers = closer;\n    } else {\n      log('could not find any peers closer to %b than %p', msg.key, peerId);\n    }\n\n    return response;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,OAAT,QAAwB,wBAAxB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SACEC,sBADF,EAEEC,qBAFF,QAGO,gBAHP;AAIA,SAASC,MAAM,IAAIC,gBAAnB,QAA2C,aAA3C;AACA,SAASC,SAAT,QAA0B,yBAA1B;AAOA,MAAMC,GAAG,GAAGN,MAAM,CAAC,uCAAD,CAAlB;AAYA,OAAM,MAAOO,eAAP,CAAsB;AAK1BC,cAAaC,UAAb,EAAoDC,IAApD,EAA6E;AAC3E,UAAM;AAAEC,iBAAF;AAAeC;AAAf,QAAuBF,IAA7B;AAEA,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKE,WAAL,GAAmBA,WAAnB;AACA,SAAKC,GAAL,GAAWC,OAAO,CAACD,GAAD,CAAlB;AACD;AAED;;;;;AAGY,QAANE,MAAM,CAAEC,MAAF,EAAkBC,GAAlB,EAA8B;AACxCV,OAAG,CAAC,iDAAD,EAAoDS,MAApD,EAA4DC,GAAG,CAACC,GAAhE,CAAH;AAEA,QAAIC,MAAM,GAAe,EAAzB;;AAEA,QAAId,gBAAgB,CAAC,KAAKK,UAAL,CAAgBM,MAAhB,CAAuBI,OAAvB,EAAD,EAAmCH,GAAG,CAACC,GAAvC,CAApB,EAAiE;AAC/DC,YAAM,GAAG,CAAC;AACRE,UAAE,EAAE,KAAKX,UAAL,CAAgBM,MADZ;AAERM,kBAAU,EAAE,KAAKZ,UAAL,CAAgBa,cAAhB,CAA+BC,YAA/B,GAA8CC,GAA9C,CAAkDC,EAAE,IAAIA,EAAE,CAACC,eAAH,CAAmBrB,SAAS,CAAC,KAAD,CAAT,CAAiBsB,IAApC,CAAxD,CAFJ;AAGRtB,iBAAS,EAAE;AAHH,OAAD,CAAT;AAKD,KAND,MAMO;AACLa,YAAM,GAAG,MAAM,KAAKP,WAAL,CAAiBiB,qBAAjB,CAAuCZ,GAAG,CAACC,GAA3C,EAAgDF,MAAhD,CAAf;AACD;;AAEDG,UAAM,GAAGA,MAAM,CACZM,GADM,CACF,KAAKZ,GAAL,GAAWV,qBAAX,GAAmCD,sBADjC,EAEN4B,MAFM,CAEC;AAAA,UAAC;AAAER;AAAF,OAAD;AAAA,aAAoBA,UAAU,CAACS,MAA/B;AAAA,KAFD,CAAT;AAIA,UAAMC,QAAQ,GAAG,IAAIhC,OAAJ,CAAYiB,GAAG,CAACgB,IAAhB,EAAsB,IAAIC,UAAJ,CAAe,CAAf,CAAtB,EAAyCjB,GAAG,CAACkB,YAA7C,CAAjB;;AAEA,QAAIhB,MAAM,CAACY,MAAP,GAAgB,CAApB,EAAuB;AACrBC,cAAQ,CAACI,WAAT,GAAuBjB,MAAvB;AACD,KAFD,MAEO;AACLZ,SAAG,CAAC,+CAAD,EAAkDU,GAAG,CAACC,GAAtD,EAA2DF,MAA3D,CAAH;AACD;;AAED,WAAOgB,QAAP;AACD;;AA5CyB","names":["Message","logger","removePrivateAddresses","removePublicAddresses","equals","uint8ArrayEquals","protocols","log","FindNodeHandler","constructor","components","init","peerRouting","lan","Boolean","handle","peerId","msg","key","closer","toBytes","id","multiaddrs","addressManager","getAddresses","map","ma","decapsulateCode","code","getCloserPeersOffline","filter","length","response","type","Uint8Array","clusterLevel","closerPeers"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\kad-dht\\src\\rpc\\handlers\\find-node.ts"],"sourcesContent":["import { Message } from '../../message/index.js'\nimport { logger } from '@libp2p/logger'\nimport {\n  removePrivateAddresses,\n  removePublicAddresses\n} from '../../utils.js'\nimport { equals as uint8ArrayEquals } from 'uint8arrays'\nimport { protocols } from '@multiformats/multiaddr'\nimport type { PeerInfo } from '@libp2p/interface-peer-info'\nimport type { DHTMessageHandler } from '../index.js'\nimport type { PeerRouting } from '../../peer-routing/index.js'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { AddressManager } from '@libp2p/interface-address-manager'\n\nconst log = logger('libp2p:kad-dht:rpc:handlers:find-node')\n\nexport interface FindNodeHandlerInit {\n  peerRouting: PeerRouting\n  lan: boolean\n}\n\nexport interface FindNodeHandlerComponents {\n  peerId: PeerId\n  addressManager: AddressManager\n}\n\nexport class FindNodeHandler implements DHTMessageHandler {\n  private readonly peerRouting: PeerRouting\n  private readonly lan: boolean\n  private readonly components: FindNodeHandlerComponents\n\n  constructor (components: FindNodeHandlerComponents, init: FindNodeHandlerInit) {\n    const { peerRouting, lan } = init\n\n    this.components = components\n    this.peerRouting = peerRouting\n    this.lan = Boolean(lan)\n  }\n\n  /**\n   * Process `FindNode` DHT messages\n   */\n  async handle (peerId: PeerId, msg: Message): Promise<Message> {\n    log('incoming request from %p for peers closer to %b', peerId, msg.key)\n\n    let closer: PeerInfo[] = []\n\n    if (uint8ArrayEquals(this.components.peerId.toBytes(), msg.key)) {\n      closer = [{\n        id: this.components.peerId,\n        multiaddrs: this.components.addressManager.getAddresses().map(ma => ma.decapsulateCode(protocols('p2p').code)),\n        protocols: []\n      }]\n    } else {\n      closer = await this.peerRouting.getCloserPeersOffline(msg.key, peerId)\n    }\n\n    closer = closer\n      .map(this.lan ? removePublicAddresses : removePrivateAddresses)\n      .filter(({ multiaddrs }) => multiaddrs.length)\n\n    const response = new Message(msg.type, new Uint8Array(0), msg.clusterLevel)\n\n    if (closer.length > 0) {\n      response.closerPeers = closer\n    } else {\n      log('could not find any peers closer to %b than %p', msg.key, peerId)\n    }\n\n    return response\n  }\n}\n"]},"metadata":{},"sourceType":"module"}