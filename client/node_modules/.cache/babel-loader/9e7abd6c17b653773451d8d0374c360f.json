{"ast":null,"code":"import { isValidMultiaddr } from './utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\nexport function createRm(_ref) {\n  let {\n    repo\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"rm\"]}\n   */\n  async function rm(multiaddr) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`);\n    }\n\n    const config = await repo.config.getAll(options);\n    config.Bootstrap = (config.Bootstrap || []).filter(ma => ma.toString() !== multiaddr.toString());\n    await repo.config.replace(config);\n    return {\n      Peers: [multiaddr]\n    };\n  }\n\n  return withTimeoutOption(rm);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/bootstrap/rm.js"],"names":["isValidMultiaddr","withTimeoutOption","createRm","repo","rm","multiaddr","options","Error","config","getAll","Bootstrap","filter","ma","toString","replace","Peers"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,YAAjC;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,OAA6B;AAAA,MAAV;AAAEC,IAAAA;AAAF,GAAU;;AAClC;AACF;AACA;AACE,iBAAeC,EAAf,CAAmBC,SAAnB,EAA4C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC1C,QAAI,CAACN,gBAAgB,CAACK,SAAD,CAArB,EAAkC;AAChC,YAAM,IAAIE,KAAJ,CAAW,GAAEF,SAAU,2BAAvB,CAAN;AACD;;AAED,UAAMG,MAAM,GAAG,MAAML,IAAI,CAACK,MAAL,CAAYC,MAAZ,CAAmBH,OAAnB,CAArB;AACAE,IAAAA,MAAM,CAACE,SAAP,GAAmB,CAACF,MAAM,CAACE,SAAP,IAAoB,EAArB,EAAyBC,MAAzB,CAAgCC,EAAE,IAAIA,EAAE,CAACC,QAAH,OAAkBR,SAAS,CAACQ,QAAV,EAAxD,CAAnB;AAEA,UAAMV,IAAI,CAACK,MAAL,CAAYM,OAAZ,CAAoBN,MAApB,CAAN;AAEA,WAAO;AAAEO,MAAAA,KAAK,EAAE,CAACV,SAAD;AAAT,KAAP;AACD;;AAED,SAAOJ,iBAAiB,CAACG,EAAD,CAAxB;AACD","sourcesContent":["import { isValidMultiaddr } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createRm ({ repo }) {\n  /**\n   * @type {import('ipfs-core-types/src/bootstrap').API<{}>[\"rm\"]}\n   */\n  async function rm (multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(`${multiaddr} is not a valid Multiaddr`)\n    }\n\n    const config = await repo.config.getAll(options)\n    config.Bootstrap = (config.Bootstrap || []).filter(ma => ma.toString() !== multiaddr.toString())\n\n    await repo.config.replace(config)\n\n    return { Peers: [multiaddr] }\n  }\n\n  return withTimeoutOption(rm)\n}\n"]},"metadata":{},"sourceType":"module"}