{"ast":null,"code":"import batch from 'it-batch';\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n */\n\nexport default async function* parallelBatch(source) {\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  for await (const tasks of batch(source, size)) {\n    const things = tasks.map(async p => {\n      return await p().then(value => ({\n        ok: true,\n        value\n      }), err => ({\n        ok: false,\n        err\n      }));\n    });\n\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i];\n\n      if (result.ok) {\n        yield result.value;\n      } else {\n        throw result.err;\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AAYA;;;;;;AAKA,eAAe,gBAAiBC,aAAjB,CAAoCC,MAApC,EAA0H;AAAA,MAAhBC,IAAgB,uEAAD,CAAC;;AACvI,aAAW,MAAMC,KAAjB,IAA0BJ,KAAK,CAACE,MAAD,EAASC,IAAT,CAA/B,EAA+C;AAC7C,UAAME,MAAM,GAAyCD,KAAK,CAACE,GAAN,CACnD,MAAOC,CAAP,IAA8B;AAC5B,aAAO,MAAMA,CAAC,GAAGC,IAAJ,CAASC,KAAK,KAAK;AAAEC,UAAE,EAAE,IAAN;AAAYD;AAAZ,OAAL,CAAd,EAAyCE,GAAG,KAAK;AAAED,UAAE,EAAE,KAAN;AAAaC;AAAb,OAAL,CAA5C,CAAb;AACD,KAHkD,CAArD;;AAKA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAAM,CAACQ,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,YAAME,MAAM,GAAG,MAAMT,MAAM,CAACO,CAAD,CAA3B;;AAEA,UAAIE,MAAM,CAACJ,EAAX,EAAe;AACb,cAAMI,MAAM,CAACL,KAAb;AACD,OAFD,MAEO;AACL,cAAMK,MAAM,CAACH,GAAb;AACD;AACF;AACF;AACF","names":["batch","parallelBatch","source","size","tasks","things","map","p","then","value","ok","err","i","length","result"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\ipfs-unixfs-importer\\node_modules\\it-parallel-batch\\src\\index.ts"],"sourcesContent":["import batch from 'it-batch'\n\ninterface Success<T> {\n  ok: true\n  value: T\n}\n\ninterface Failure {\n  ok: false\n  err: Error\n}\n\n/**\n * Takes an (async) iterator that emits promise-returning functions,\n * invokes them in parallel and emits the results as they become available but\n * in the same order as the input\n */\nexport default async function * parallelBatch <T> (source: AsyncIterable<() => Promise<T>> | Iterable<() => Promise<T>>, size: number = 1): AsyncGenerator<T, void, undefined> {\n  for await (const tasks of batch(source, size)) {\n    const things: Array<Promise<Success<T> | Failure>> = tasks.map(\n      async (p: () => Promise<T>) => {\n        return await p().then(value => ({ ok: true, value }), err => ({ ok: false, err }))\n      })\n\n    for (let i = 0; i < things.length; i++) {\n      const result = await things[i]\n\n      if (result.ok) {\n        yield result.value\n      } else {\n        throw result.err\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}