{"ast":null,"code":"import mergeOptions from 'merge-options';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { murmur3128 } from '@multiformats/murmur3';\n/**\n * @param {Uint8Array} buf\n */\n\nasync function hamtHashFn(buf) {\n  return (await murmur3128.encode(buf) // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n  // implementation only uses the first 64, so we must do the same\n  // for parity..\n  ).slice(0, 8) // Invert buffer because that's how Go impl does it\n  .reverse();\n}\n/**\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n */\n\n/**\n * @type {ImporterOptions}\n */\n\n\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced',\n  // 'flat', 'trickle'\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  hasher: sha256,\n  leafType: 'file',\n  // 'raw'\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  // FIXME: This number is too big for JavaScript\n  // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n  polynomial: 17437180132763653,\n  // eslint-disable-line no-loss-of-precision\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  recursive: false,\n  hidden: false,\n  timeout: undefined,\n  hamtHashFn,\n  hamtHashCode: 0x22,\n  hamtBucketBits: 8\n};\n/**\n * @param {UserImporterOptions} options\n * @returns {ImporterOptions}\n */\n\nexport default (function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const defaults = mergeOptions.bind({\n    ignoreUndefined: true\n  });\n  return defaults(defaultOptions, options);\n});","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-unixfs-importer/src/options.js"],"names":["mergeOptions","sha256","murmur3128","hamtHashFn","buf","encode","slice","reverse","defaultOptions","chunker","strategy","rawLeaves","onlyHash","reduceSingleLeafToSelf","hasher","leafType","cidVersion","progress","shardSplitThreshold","fileImportConcurrency","blockWriteConcurrency","minChunkSize","maxChunkSize","avgChunkSize","window","polynomial","maxChildrenPerNode","layerRepeat","wrapWithDirectory","recursive","hidden","timeout","undefined","hamtHashCode","hamtBucketBits","options","defaults","bind","ignoreUndefined"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA;AACA;AACA;;AACA,eAAeC,UAAf,CAA2BC,GAA3B,EAAgC;AAC9B,SAAO,CAAC,MAAMF,UAAU,CAACG,MAAX,CAAkBD,GAAlB,CAAP,CACL;AACA;AACA;AAHK,IAIJE,KAJI,CAIE,CAJF,EAIK,CAJL,EAKL;AALK,GAMJC,OANI,EAAP;AAOD;AAED;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,OADY;AAErBC,EAAAA,QAAQ,EAAE,UAFW;AAEC;AACtBC,EAAAA,SAAS,EAAE,KAHU;AAIrBC,EAAAA,QAAQ,EAAE,KAJW;AAKrBC,EAAAA,sBAAsB,EAAE,IALH;AAMrBC,EAAAA,MAAM,EAAEb,MANa;AAOrBc,EAAAA,QAAQ,EAAE,MAPW;AAOH;AAClBC,EAAAA,UAAU,EAAE,CARS;AASrBC,EAAAA,QAAQ,EAAE,MAAM,MAAM,CAAE,CATH;AAUrBC,EAAAA,mBAAmB,EAAE,IAVA;AAWrBC,EAAAA,qBAAqB,EAAE,EAXF;AAYrBC,EAAAA,qBAAqB,EAAE,EAZF;AAarBC,EAAAA,YAAY,EAAE,MAbO;AAcrBC,EAAAA,YAAY,EAAE,MAdO;AAerBC,EAAAA,YAAY,EAAE,MAfO;AAgBrBC,EAAAA,MAAM,EAAE,EAhBa;AAiBrB;AACA;AACAC,EAAAA,UAAU,EAAE,iBAnBS;AAmBU;AAC/BC,EAAAA,kBAAkB,EAAE,GApBC;AAqBrBC,EAAAA,WAAW,EAAE,CArBQ;AAsBrBC,EAAAA,iBAAiB,EAAE,KAtBE;AAuBrBC,EAAAA,SAAS,EAAE,KAvBU;AAwBrBC,EAAAA,MAAM,EAAE,KAxBa;AAyBrBC,EAAAA,OAAO,EAAEC,SAzBY;AA0BrB7B,EAAAA,UA1BqB;AA2BrB8B,EAAAA,YAAY,EAAE,IA3BO;AA4BrBC,EAAAA,cAAc,EAAE;AA5BK,CAAvB;AA+BA;AACA;AACA;AACA;;AACA,gBAAe,YAAkB;AAAA,MAAjBC,OAAiB,uEAAP,EAAO;AAC/B,QAAMC,QAAQ,GAAGpC,YAAY,CAACqC,IAAb,CAAkB;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GAAlB,CAAjB;AACA,SAAOF,QAAQ,CAAC5B,cAAD,EAAiB2B,OAAjB,CAAf;AACD,CAHD","sourcesContent":["import mergeOptions from 'merge-options'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { murmur3128 } from '@multiformats/murmur3'\n\n/**\n * @param {Uint8Array} buf\n */\nasync function hamtHashFn (buf) {\n  return (await murmur3128.encode(buf))\n    // Murmur3 outputs 128 bit but, accidentally, IPFS Go's\n    // implementation only uses the first 64, so we must do the same\n    // for parity..\n    .slice(0, 8)\n    // Invert buffer because that's how Go impl does it\n    .reverse()\n}\n\n/**\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n */\n\n/**\n * @type {ImporterOptions}\n */\nconst defaultOptions = {\n  chunker: 'fixed',\n  strategy: 'balanced', // 'flat', 'trickle'\n  rawLeaves: false,\n  onlyHash: false,\n  reduceSingleLeafToSelf: true,\n  hasher: sha256,\n  leafType: 'file', // 'raw'\n  cidVersion: 0,\n  progress: () => () => {},\n  shardSplitThreshold: 1000,\n  fileImportConcurrency: 50,\n  blockWriteConcurrency: 10,\n  minChunkSize: 262144,\n  maxChunkSize: 262144,\n  avgChunkSize: 262144,\n  window: 16,\n  // FIXME: This number is too big for JavaScript\n  // https://github.com/ipfs/go-ipfs-chunker/blob/d0125832512163708c0804a3cda060e21acddae4/rabin.go#L11\n  polynomial: 17437180132763653, // eslint-disable-line no-loss-of-precision\n  maxChildrenPerNode: 174,\n  layerRepeat: 4,\n  wrapWithDirectory: false,\n  recursive: false,\n  hidden: false,\n  timeout: undefined,\n  hamtHashFn,\n  hamtHashCode: 0x22,\n  hamtBucketBits: 8\n}\n\n/**\n * @param {UserImporterOptions} options\n * @returns {ImporterOptions}\n */\nexport default (options = {}) => {\n  const defaults = mergeOptions.bind({ ignoreUndefined: true })\n  return defaults(defaultOptions, options)\n}\n"]},"metadata":{},"sourceType":"module"}