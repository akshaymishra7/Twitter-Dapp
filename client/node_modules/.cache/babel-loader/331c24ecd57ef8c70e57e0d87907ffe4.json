{"ast":null,"code":"import { normaliseInput } from 'ipfs-core-utils/pins/normalise-input';\nimport { resolvePath } from '../../utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { PinTypes } from 'ipfs-repo/pin-types';\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\n\nexport function createRmAll(_ref) {\n  let {\n    repo,\n    codecs\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"rmAll\"]}\n   */\n  async function* rmAll(source) {\n    let _options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    const release = await repo.gcLock.readLock();\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const {\n        path,\n        recursive\n      } of normaliseInput(source)) {\n        const {\n          cid\n        } = await resolvePath(repo, codecs, path);\n        const {\n          pinned,\n          reason\n        } = await repo.pins.isPinnedWithType(cid, PinTypes.all);\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`);\n        }\n\n        switch (reason) {\n          case PinTypes.recursive:\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`);\n            }\n\n            await repo.pins.unpin(cid);\n            yield cid;\n            break;\n\n          case PinTypes.direct:\n            await repo.pins.unpin(cid);\n            yield cid;\n            break;\n\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`);\n        }\n      }\n    } finally {\n      release();\n    }\n  }\n\n  return withTimeoutOption(rmAll);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/pin/rm-all.js"],"names":["normaliseInput","resolvePath","withTimeoutOption","PinTypes","createRmAll","repo","codecs","rmAll","source","_options","release","gcLock","readLock","path","recursive","cid","pinned","reason","pins","isPinnedWithType","all","Error","unpin","direct"],"mappings":"AAAA,SAASA,cAAT,QAA+B,sCAA/B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,QAAT,QAAyB,qBAAzB;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,OAAwC;AAAA,MAAlB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAkB;;AAC7C;AACF;AACA;AACE,kBAAiBC,KAAjB,CAAwBC,MAAxB,EAA+C;AAAA,QAAfC,QAAe,uEAAJ,EAAI;;AAC7C,UAAMC,OAAO,GAAG,MAAML,IAAI,CAACM,MAAL,CAAYC,QAAZ,EAAtB;;AAEA,QAAI;AACF;AACA,iBAAW,MAAM;AAAEC,QAAAA,IAAF;AAAQC,QAAAA;AAAR,OAAjB,IAAwCd,cAAc,CAACQ,MAAD,CAAtD,EAAgE;AAC9D,cAAM;AAAEO,UAAAA;AAAF,YAAU,MAAMd,WAAW,CAACI,IAAD,EAAOC,MAAP,EAAeO,IAAf,CAAjC;AACA,cAAM;AAAEG,UAAAA,MAAF;AAAUC,UAAAA;AAAV,YAAqB,MAAMZ,IAAI,CAACa,IAAL,CAAUC,gBAAV,CAA2BJ,GAA3B,EAAgCZ,QAAQ,CAACiB,GAAzC,CAAjC;;AAEA,YAAI,CAACJ,MAAL,EAAa;AACX,gBAAM,IAAIK,KAAJ,CAAW,GAAEN,GAAI,gBAAjB,CAAN;AACD;;AAED,gBAAQE,MAAR;AACE,eAAMd,QAAQ,CAACW,SAAf;AACE,gBAAI,CAACA,SAAL,EAAgB;AACd,oBAAM,IAAIO,KAAJ,CAAW,GAAEN,GAAI,wBAAjB,CAAN;AACD;;AAED,kBAAMV,IAAI,CAACa,IAAL,CAAUI,KAAV,CAAgBP,GAAhB,CAAN;AAEA,kBAAMA,GAAN;AAEA;;AACF,eAAMZ,QAAQ,CAACoB,MAAf;AACE,kBAAMlB,IAAI,CAACa,IAAL,CAAUI,KAAV,CAAgBP,GAAhB,CAAN;AAEA,kBAAMA,GAAN;AAEA;;AACF;AACE,kBAAM,IAAIM,KAAJ,CAAW,GAAEN,GAAI,+BAA8BE,MAAO,EAAtD,CAAN;AAlBJ;AAoBD;AACF,KA/BD,SA+BU;AACRP,MAAAA,OAAO;AACR;AACF;;AAED,SAAOR,iBAAiB,CAACK,KAAD,CAAxB;AACD","sourcesContent":["import { normaliseInput } from 'ipfs-core-utils/pins/normalise-input'\nimport { resolvePath } from '../../utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { PinTypes } from 'ipfs-repo/pin-types'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n */\nexport function createRmAll ({ repo, codecs }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"rmAll\"]}\n   */\n  async function * rmAll (source, _options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      // verify that each hash can be unpinned\n      for await (const { path, recursive } of normaliseInput(source)) {\n        const { cid } = await resolvePath(repo, codecs, path)\n        const { pinned, reason } = await repo.pins.isPinnedWithType(cid, PinTypes.all)\n\n        if (!pinned) {\n          throw new Error(`${cid} is not pinned`)\n        }\n\n        switch (reason) {\n          case (PinTypes.recursive):\n            if (!recursive) {\n              throw new Error(`${cid} is pinned recursively`)\n            }\n\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          case (PinTypes.direct):\n            await repo.pins.unpin(cid)\n\n            yield cid\n\n            break\n          default:\n            throw new Error(`${cid} is pinned indirectly under ${reason}`)\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(rmAll)\n}\n"]},"metadata":{},"sourceType":"module"}