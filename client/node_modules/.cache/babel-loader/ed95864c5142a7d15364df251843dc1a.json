{"ast":null,"code":"export function getIterator(obj) {\n  if (obj != null) {\n    if (typeof obj[Symbol.iterator] === 'function') {\n      return obj[Symbol.iterator]();\n    }\n\n    if (typeof obj[Symbol.asyncIterator] === 'function') {\n      return obj[Symbol.asyncIterator]();\n    }\n\n    if (typeof obj.next === 'function') {\n      return obj; // probably an iterator\n    }\n  }\n\n  throw new Error('argument is not an iterator or iterable');\n}","map":{"version":3,"mappings":"AASA,OAAM,SAAUA,WAAV,CAA2BC,GAA3B,EAAmC;AACvC,MAAIA,GAAG,IAAI,IAAX,EAAiB;AACf,QAAI,OAAOA,GAAG,CAACC,MAAM,CAACC,QAAR,CAAV,KAAgC,UAApC,EAAgD;AAC9C,aAAOF,GAAG,CAACC,MAAM,CAACC,QAAR,CAAH,EAAP;AACD;;AACD,QAAI,OAAOF,GAAG,CAACC,MAAM,CAACE,aAAR,CAAV,KAAqC,UAAzC,EAAqD;AACnD,aAAOH,GAAG,CAACC,MAAM,CAACE,aAAR,CAAH,EAAP;AACD;;AACD,QAAI,OAAOH,GAAG,CAACI,IAAX,KAAoB,UAAxB,EAAoC;AAClC,aAAOJ,GAAP,CADkC,CACvB;AACZ;AACF;;AACD,QAAM,IAAIK,KAAJ,CAAU,yCAAV,CAAN;AACD","names":["getIterator","obj","Symbol","iterator","asyncIterator","next","Error"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\get-iterator\\src\\index.ts"],"sourcesContent":["\n// If the passed object is an (async) iterable, then get the iterator\n// If it's probably an iterator already (i.e. has next function) return it\n// else throw\nexport function getIterator <T> (obj: AsyncIterable<T>): AsyncIterator<T>\nexport function getIterator <T> (obj: AsyncIterator<T>): AsyncIterator<T>\nexport function getIterator <T> (obj: Iterable<T>): Iterator<T>\nexport function getIterator <T> (obj: Iterator<T>): Iterator<T>\nexport function getIterator <T> (obj: any): AsyncIterator<T> | Iterator <T>\nexport function getIterator <T> (obj: any): AsyncIterator<T> | Iterator <T> {\n  if (obj != null) {\n    if (typeof obj[Symbol.iterator] === 'function') {\n      return obj[Symbol.iterator]()\n    }\n    if (typeof obj[Symbol.asyncIterator] === 'function') {\n      return obj[Symbol.asyncIterator]()\n    }\n    if (typeof obj.next === 'function') {\n      return obj // probably an iterator\n    }\n  }\n  throw new Error('argument is not an iterator or iterable')\n}\n"]},"metadata":{},"sourceType":"module"}