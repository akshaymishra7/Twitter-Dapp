{"ast":null,"code":"/**\n * Any object that implements this Symbol as a property should return a\n * PeerDiscovery instance as the property value, similar to how\n * `Symbol.Iterable` can be used to return an `Iterable` from an `Iterator`.\n *\n * @example\n *\n * ```js\n * import { peerDiscovery, PeerDiscovery } from '@libp2p/peer-discovery'\n *\n * class MyPeerDiscoverer implements PeerDiscovery {\n *   get [peerDiscovery] () {\n *     return this\n *   }\n *\n *   // ...other methods\n * }\n * ```\n */\nexport const peerDiscovery = Symbol.for('@libp2p/peer-discovery');\nexport const symbol = Symbol.for('@libp2p/peer-discovery');\nexport function isPeerDiscovery(other) {\n  return other != null && Boolean(other[symbol]);\n}","map":{"version":3,"mappings":"AAGA;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,MAAMA,aAAa,GAAGC,MAAM,CAACC,GAAP,CAAW,wBAAX,CAAtB;AAEP,OAAO,MAAMC,MAAM,GAAGF,MAAM,CAACC,GAAP,CAAW,wBAAX,CAAf;AAkBP,OAAM,SAAUE,eAAV,CAA2BC,KAA3B,EAAqC;AACzC,SAAOA,KAAK,IAAI,IAAT,IAAiBC,OAAO,CAACD,KAAK,CAACF,MAAD,CAAN,CAA/B;AACD","names":["peerDiscovery","Symbol","for","symbol","isPeerDiscovery","other","Boolean"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\interface-peer-discovery\\src\\index.ts"],"sourcesContent":["import type { PeerInfo } from '@libp2p/interface-peer-info'\nimport type { EventEmitter } from '@libp2p/interfaces/events'\n\n/**\n * Any object that implements this Symbol as a property should return a\n * PeerDiscovery instance as the property value, similar to how\n * `Symbol.Iterable` can be used to return an `Iterable` from an `Iterator`.\n *\n * @example\n *\n * ```js\n * import { peerDiscovery, PeerDiscovery } from '@libp2p/peer-discovery'\n *\n * class MyPeerDiscoverer implements PeerDiscovery {\n *   get [peerDiscovery] () {\n *     return this\n *   }\n *\n *   // ...other methods\n * }\n * ```\n */\nexport const peerDiscovery = Symbol.for('@libp2p/peer-discovery')\n\nexport const symbol = Symbol.for('@libp2p/peer-discovery')\n\nexport interface PeerDiscoveryEvents {\n  'peer': CustomEvent<PeerInfo>\n}\n\nexport interface PeerDiscovery extends EventEmitter<PeerDiscoveryEvents> {\n  /**\n   * Used to identify the peer discovery mechanism\n   */\n  [Symbol.toStringTag]: string\n\n  /**\n   * Used by the isPeerDiscovery function\n   */\n  [symbol]: true\n}\n\nexport function isPeerDiscovery (other: any): other is PeerDiscovery {\n  return other != null && Boolean(other[symbol])\n}\n"]},"metadata":{},"sourceType":"module"}