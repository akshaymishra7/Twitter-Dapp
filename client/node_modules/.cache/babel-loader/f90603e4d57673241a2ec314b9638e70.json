{"ast":null,"code":"import { walkPath } from 'ipfs-unixfs-exporter';\nimport { logger } from '@libp2p/logger';\nconst log = logger('ipfs:mfs:utils:to-trail');\n/**\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {object} MfsTrail\n * @property {string} name\n * @property {import('multiformats/cid').CID} cid\n * @property {number} [size]\n * @property {string} [type]\n *\n * TODO: export supported types from unixfs-exporter and use for `type` above\n */\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @returns {Promise<MfsTrail[]>}\n */\n\nexport async function toTrail(context, path) {\n  log(`Creating trail for path ${path}`);\n  const output = [];\n\n  for await (const fsEntry of walkPath(path, context.repo.blocks)) {\n    output.push({\n      name: fsEntry.name,\n      cid: fsEntry.cid,\n      size: fsEntry.size,\n      type: fsEntry.type\n    });\n  }\n\n  return output;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/files/utils/to-trail.js"],"names":["walkPath","logger","log","toTrail","context","path","output","fsEntry","repo","blocks","push","name","cid","size","type"],"mappings":"AAAA,SAASA,QAAT,QAAyB,sBAAzB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,MAAMC,GAAG,GAAGD,MAAM,CAAC,yBAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,eAAeE,OAAf,CAAwBC,OAAxB,EAAiCC,IAAjC,EAAuC;AAC5CH,EAAAA,GAAG,CAAE,2BAA0BG,IAAK,EAAjC,CAAH;AAEA,QAAMC,MAAM,GAAG,EAAf;;AAEA,aAAW,MAAMC,OAAjB,IAA4BP,QAAQ,CAACK,IAAD,EAAOD,OAAO,CAACI,IAAR,CAAaC,MAApB,CAApC,EAAiE;AAC/DH,IAAAA,MAAM,CAACI,IAAP,CAAY;AACVC,MAAAA,IAAI,EAAEJ,OAAO,CAACI,IADJ;AAEVC,MAAAA,GAAG,EAAEL,OAAO,CAACK,GAFH;AAGVC,MAAAA,IAAI,EAAEN,OAAO,CAACM,IAHJ;AAIVC,MAAAA,IAAI,EAAEP,OAAO,CAACO;AAJJ,KAAZ;AAMD;;AAED,SAAOR,MAAP;AACD","sourcesContent":["import { walkPath } from 'ipfs-unixfs-exporter'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:mfs:utils:to-trail')\n\n/**\n * @typedef {import('../').MfsContext} MfsContext\n * @typedef {object} MfsTrail\n * @property {string} name\n * @property {import('multiformats/cid').CID} cid\n * @property {number} [size]\n * @property {string} [type]\n *\n * TODO: export supported types from unixfs-exporter and use for `type` above\n */\n\n/**\n * @param {MfsContext} context\n * @param {string} path\n * @returns {Promise<MfsTrail[]>}\n */\nexport async function toTrail (context, path) {\n  log(`Creating trail for path ${path}`)\n\n  const output = []\n\n  for await (const fsEntry of walkPath(path, context.repo.blocks)) {\n    output.push({\n      name: fsEntry.name,\n      cid: fsEntry.cid,\n      size: fsEntry.size,\n      type: fsEntry.type\n    })\n  }\n\n  return output\n}\n"]},"metadata":{},"sourceType":"module"}