{"ast":null,"code":"'use strict';\n\nconst {\n  AbstractChainedBatch\n} = require('../abstract-chained-batch');\n\nconst ModuleError = require('module-error');\n\nconst kEncoded = Symbol('encoded'); // Functional default for chained batch, with support of deferred open\n\nclass DefaultChainedBatch extends AbstractChainedBatch {\n  constructor(db) {\n    super(db);\n    this[kEncoded] = [];\n  }\n\n  _put(key, value, options) {\n    this[kEncoded].push({ ...options,\n      type: 'put',\n      key,\n      value\n    });\n  }\n\n  _del(key, options) {\n    this[kEncoded].push({ ...options,\n      type: 'del',\n      key\n    });\n  }\n\n  _clear() {\n    this[kEncoded] = [];\n  } // Assumes this[kEncoded] cannot change after write()\n\n\n  _write(options, callback) {\n    if (this.db.status === 'opening') {\n      this.db.defer(() => this._write(options, callback));\n    } else if (this.db.status === 'open') {\n      if (this[kEncoded].length === 0) this.nextTick(callback);else this.db._batch(this[kEncoded], options, callback);\n    } else {\n      this.nextTick(callback, new ModuleError('Batch is not open: cannot call write() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      }));\n    }\n  }\n\n}\n\nexports.DefaultChainedBatch = DefaultChainedBatch;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/abstract-level/lib/default-chained-batch.js"],"names":["AbstractChainedBatch","require","ModuleError","kEncoded","Symbol","DefaultChainedBatch","constructor","db","_put","key","value","options","push","type","_del","_clear","_write","callback","status","defer","length","nextTick","_batch","code","exports"],"mappings":"AAAA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAA2BC,OAAO,CAAC,2BAAD,CAAxC;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,cAAD,CAA3B;;AACA,MAAME,QAAQ,GAAGC,MAAM,CAAC,SAAD,CAAvB,C,CAEA;;AACA,MAAMC,mBAAN,SAAkCL,oBAAlC,CAAuD;AACrDM,EAAAA,WAAW,CAAEC,EAAF,EAAM;AACf,UAAMA,EAAN;AACA,SAAKJ,QAAL,IAAiB,EAAjB;AACD;;AAEDK,EAAAA,IAAI,CAAEC,GAAF,EAAOC,KAAP,EAAcC,OAAd,EAAuB;AACzB,SAAKR,QAAL,EAAeS,IAAf,CAAoB,EAAE,GAAGD,OAAL;AAAcE,MAAAA,IAAI,EAAE,KAApB;AAA2BJ,MAAAA,GAA3B;AAAgCC,MAAAA;AAAhC,KAApB;AACD;;AAEDI,EAAAA,IAAI,CAAEL,GAAF,EAAOE,OAAP,EAAgB;AAClB,SAAKR,QAAL,EAAeS,IAAf,CAAoB,EAAE,GAAGD,OAAL;AAAcE,MAAAA,IAAI,EAAE,KAApB;AAA2BJ,MAAAA;AAA3B,KAApB;AACD;;AAEDM,EAAAA,MAAM,GAAI;AACR,SAAKZ,QAAL,IAAiB,EAAjB;AACD,GAhBoD,CAkBrD;;;AACAa,EAAAA,MAAM,CAAEL,OAAF,EAAWM,QAAX,EAAqB;AACzB,QAAI,KAAKV,EAAL,CAAQW,MAAR,KAAmB,SAAvB,EAAkC;AAChC,WAAKX,EAAL,CAAQY,KAAR,CAAc,MAAM,KAAKH,MAAL,CAAYL,OAAZ,EAAqBM,QAArB,CAApB;AACD,KAFD,MAEO,IAAI,KAAKV,EAAL,CAAQW,MAAR,KAAmB,MAAvB,EAA+B;AACpC,UAAI,KAAKf,QAAL,EAAeiB,MAAf,KAA0B,CAA9B,EAAiC,KAAKC,QAAL,CAAcJ,QAAd,EAAjC,KACK,KAAKV,EAAL,CAAQe,MAAR,CAAe,KAAKnB,QAAL,CAAf,EAA+BQ,OAA/B,EAAwCM,QAAxC;AACN,KAHM,MAGA;AACL,WAAKI,QAAL,CAAcJ,QAAd,EAAwB,IAAIf,WAAJ,CAAgB,iEAAhB,EAAmF;AACzGqB,QAAAA,IAAI,EAAE;AADmG,OAAnF,CAAxB;AAGD;AACF;;AA9BoD;;AAiCvDC,OAAO,CAACnB,mBAAR,GAA8BA,mBAA9B","sourcesContent":["'use strict'\n\nconst { AbstractChainedBatch } = require('../abstract-chained-batch')\nconst ModuleError = require('module-error')\nconst kEncoded = Symbol('encoded')\n\n// Functional default for chained batch, with support of deferred open\nclass DefaultChainedBatch extends AbstractChainedBatch {\n  constructor (db) {\n    super(db)\n    this[kEncoded] = []\n  }\n\n  _put (key, value, options) {\n    this[kEncoded].push({ ...options, type: 'put', key, value })\n  }\n\n  _del (key, options) {\n    this[kEncoded].push({ ...options, type: 'del', key })\n  }\n\n  _clear () {\n    this[kEncoded] = []\n  }\n\n  // Assumes this[kEncoded] cannot change after write()\n  _write (options, callback) {\n    if (this.db.status === 'opening') {\n      this.db.defer(() => this._write(options, callback))\n    } else if (this.db.status === 'open') {\n      if (this[kEncoded].length === 0) this.nextTick(callback)\n      else this.db._batch(this[kEncoded], options, callback)\n    } else {\n      this.nextTick(callback, new ModuleError('Batch is not open: cannot call write() after write() or close()', {\n        code: 'LEVEL_BATCH_NOT_OPEN'\n      }))\n    }\n  }\n}\n\nexports.DefaultChainedBatch = DefaultChainedBatch\n"]},"metadata":{},"sourceType":"script"}