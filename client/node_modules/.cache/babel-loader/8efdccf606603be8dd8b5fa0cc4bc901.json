{"ast":null,"code":"/**\n * @packageDocumentation\n *\n * Provides strategies ensure arrays are equivalent.\n *\n * @example\n *\n * ```typescript\n * import { arrayEquals } from '@libp2p/utils/array-equals'\n * import { multiaddr } from '@multformats/multiaddr'\n *\n * const ma1 = multiaddr('/ip4/127.0.0.1/tcp/9000'),\n * const ma2 = multiaddr('/ip4/82.41.53.1/tcp/9000')\n *\n * console.info(arrayEquals([ma1], [ma1])) // true\n * console.info(arrayEquals([ma1], [ma2])) // false\n * ```\n */\n\n/**\n * Verify if two arrays of non primitive types with the \"equals\" function are equal.\n * Compatible with multiaddr, peer-id and others.\n */\nexport function arrayEquals(a, b) {\n  const sort = (a, b) => a.toString().localeCompare(b.toString());\n\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  b.sort(sort);\n  return a.sort(sort).every((item, index) => b[index].equals(item));\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAmBA;;;;AAIA,OAAM,SAAUA,WAAV,CAAuBC,CAAvB,EAAiCC,CAAjC,EAAyC;AAC7C,QAAMC,IAAI,GAAG,CAACF,CAAD,EAASC,CAAT,KAA4BD,CAAC,CAACG,QAAF,GAAaC,aAAb,CAA2BH,CAAC,CAACE,QAAF,EAA3B,CAAzC;;AAEA,MAAIH,CAAC,CAACK,MAAF,KAAaJ,CAAC,CAACI,MAAnB,EAA2B;AACzB,WAAO,KAAP;AACD;;AAEDJ,GAAC,CAACC,IAAF,CAAOA,IAAP;AAEA,SAAOF,CAAC,CAACE,IAAF,CAAOA,IAAP,EAAaI,KAAb,CAAmB,CAACC,IAAD,EAAOC,KAAP,KAAiBP,CAAC,CAACO,KAAD,CAAD,CAASC,MAAT,CAAgBF,IAAhB,CAApC,CAAP;AACD","names":["arrayEquals","a","b","sort","toString","localeCompare","length","every","item","index","equals"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\utils\\src\\array-equals.ts"],"sourcesContent":["/**\n * @packageDocumentation\n *\n * Provides strategies ensure arrays are equivalent.\n *\n * @example\n *\n * ```typescript\n * import { arrayEquals } from '@libp2p/utils/array-equals'\n * import { multiaddr } from '@multformats/multiaddr'\n *\n * const ma1 = multiaddr('/ip4/127.0.0.1/tcp/9000'),\n * const ma2 = multiaddr('/ip4/82.41.53.1/tcp/9000')\n *\n * console.info(arrayEquals([ma1], [ma1])) // true\n * console.info(arrayEquals([ma1], [ma2])) // false\n * ```\n */\n\n/**\n * Verify if two arrays of non primitive types with the \"equals\" function are equal.\n * Compatible with multiaddr, peer-id and others.\n */\nexport function arrayEquals (a: any[], b: any[]): boolean {\n  const sort = (a: any, b: any): number => a.toString().localeCompare(b.toString())\n\n  if (a.length !== b.length) {\n    return false\n  }\n\n  b.sort(sort)\n\n  return a.sort(sort).every((item, index) => b[index].equals(item))\n}\n"]},"metadata":{},"sourceType":"module"}