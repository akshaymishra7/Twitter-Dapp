{"ast":null,"code":"import { EventEmitter } from '@libp2p/interfaces/events';\nimport errCode from 'err-code';\nexport class WebRTCHandshake extends EventEmitter {\n  constructor(options) {\n    super();\n    this.log = options.log;\n    this.peerConnection = options.peerConnection;\n    this.wrtc = options.wrtc;\n    this.status = 'idle';\n    this.peerConnection.addEventListener('negotiationneeded', () => {\n      this.log('peer connection negotiation needed');\n      this.handleRenegotiate({\n        type: 'renegotiate'\n      }).catch(err => {\n        this.log.error('could not renegotiate %o', err);\n      });\n    });\n  }\n\n  async handleSignal(signal) {\n    this.log('incoming signal \"%s\"', signal.type);\n\n    if (signal.type === 'offer') {\n      return await this.handleOffer(signal);\n    } else if (signal.type === 'answer') {\n      return await this.handleAnswer(signal);\n    } else if (signal.type === 'candidate') {\n      return await this.handleCandidate(signal);\n    } else if (signal.type === 'renegotiate') {\n      return await this.handleRenegotiate(signal);\n    } else if (signal.type === 'goodbye') {\n      return await this.handleGoodye(signal);\n    } else {\n      // @ts-expect-error all types are handled above\n      this.log(`Unknown signal type ${signal.type}`); // eslint-disable-line @typescript-eslint/restrict-template-expressions\n    }\n  }\n\n  async handleOffer(signal) {}\n\n  async handleAnswer(signal) {}\n\n  async handleRenegotiate(signal) {}\n\n  async handleGoodye(signal) {\n    this.peerConnection.close();\n  }\n\n  async handleCandidate(signal) {\n    const iceCandidate = new this.wrtc.RTCIceCandidate(signal.candidate);\n\n    try {\n      await this.peerConnection.addIceCandidate(iceCandidate);\n    } catch (err) {\n      if (iceCandidate.address == null || iceCandidate.address.endsWith('.local')) {\n        this.log('ignoring unsupported ICE candidate.');\n      } else {\n        throw errCode(err, 'ERR_ADD_ICE_CANDIDATE');\n      }\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,YAAT,QAA6B,2BAA7B;AACA,OAAOC,OAAP,MAAoB,UAApB;AAWA,OAAM,MAAOC,eAAP,SAA+BF,YAA/B,CAA6D;AAMjEG,cAAaC,OAAb,EAA4C;AAC1C;AAEA,SAAKC,GAAL,GAAWD,OAAO,CAACC,GAAnB;AACA,SAAKC,cAAL,GAAsBF,OAAO,CAACE,cAA9B;AACA,SAAKC,IAAL,GAAYH,OAAO,CAACG,IAApB;AACA,SAAKC,MAAL,GAAc,MAAd;AAEA,SAAKF,cAAL,CAAoBG,gBAApB,CAAqC,mBAArC,EAA0D,MAAK;AAC7D,WAAKJ,GAAL,CAAS,oCAAT;AAEA,WAAKK,iBAAL,CAAuB;AAAEC,YAAI,EAAE;AAAR,OAAvB,EAAgDC,KAAhD,CAAsDC,GAAG,IAAG;AAC1D,aAAKR,GAAL,CAASS,KAAT,CAAe,0BAAf,EAA2CD,GAA3C;AACD,OAFD;AAGD,KAND;AAOD;;AAEiB,QAAZE,YAAY,CAAEC,MAAF,EAAgB;AAChC,SAAKX,GAAL,CAAS,sBAAT,EAAiCW,MAAM,CAACL,IAAxC;;AAEA,QAAIK,MAAM,CAACL,IAAP,KAAgB,OAApB,EAA6B;AAC3B,aAAO,MAAM,KAAKM,WAAL,CAAiBD,MAAjB,CAAb;AACD,KAFD,MAEO,IAAIA,MAAM,CAACL,IAAP,KAAgB,QAApB,EAA8B;AACnC,aAAO,MAAM,KAAKO,YAAL,CAAkBF,MAAlB,CAAb;AACD,KAFM,MAEA,IAAIA,MAAM,CAACL,IAAP,KAAgB,WAApB,EAAiC;AACtC,aAAO,MAAM,KAAKQ,eAAL,CAAqBH,MAArB,CAAb;AACD,KAFM,MAEA,IAAIA,MAAM,CAACL,IAAP,KAAgB,aAApB,EAAmC;AACxC,aAAO,MAAM,KAAKD,iBAAL,CAAuBM,MAAvB,CAAb;AACD,KAFM,MAEA,IAAIA,MAAM,CAACL,IAAP,KAAgB,SAApB,EAA+B;AACpC,aAAO,MAAM,KAAKS,YAAL,CAAkBJ,MAAlB,CAAb;AACD,KAFM,MAEA;AACL;AACA,WAAKX,GAAL,CAAS,uBAAuBW,MAAM,CAACL,IAAI,EAA3C,EAFK,CAE0C;AAChD;AACF;;AAEgB,QAAXM,WAAW,CAAED,MAAF,EAAqB,CAAI;;AACxB,QAAZE,YAAY,CAAEF,MAAF,EAAsB,CAAI;;AACrB,QAAjBN,iBAAiB,CAAEM,MAAF,EAA2B,CAAI;;AACpC,QAAZI,YAAY,CAAEJ,MAAF,EAAuB;AACvC,SAAKV,cAAL,CAAoBe,KAApB;AACD;;AAEoB,QAAfF,eAAe,CAAEH,MAAF,EAAyB;AAC5C,UAAMM,YAAY,GAAG,IAAI,KAAKf,IAAL,CAAUgB,eAAd,CAA8BP,MAAM,CAACQ,SAArC,CAArB;;AAEA,QAAI;AACF,YAAM,KAAKlB,cAAL,CAAoBmB,eAApB,CAAoCH,YAApC,CAAN;AACD,KAFD,CAEE,OAAOT,GAAP,EAAY;AACZ,UAAIS,YAAY,CAACI,OAAb,IAAwB,IAAxB,IAAgCJ,YAAY,CAACI,OAAb,CAAqBC,QAArB,CAA8B,QAA9B,CAApC,EAA6E;AAC3E,aAAKtB,GAAL,CAAS,qCAAT;AACD,OAFD,MAEO;AACL,cAAMJ,OAAO,CAACY,GAAD,EAAM,uBAAN,CAAb;AACD;AACF;AACF;;AA7DgE","names":["EventEmitter","errCode","WebRTCHandshake","constructor","options","log","peerConnection","wrtc","status","addEventListener","handleRenegotiate","type","catch","err","error","handleSignal","signal","handleOffer","handleAnswer","handleCandidate","handleGoodye","close","iceCandidate","RTCIceCandidate","candidate","addIceCandidate","address","endsWith"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\webrtc-peer\\src\\handshake.ts"],"sourcesContent":["import { EventEmitter } from '@libp2p/interfaces/events'\nimport errCode from 'err-code'\nimport type { WebRTCPeerEvents, WRTC, Signal, OfferSignal, AnswerSignal, CandidateSignal, RenegotiateSignal, GoodbyeSignal } from './index.js'\nimport type { Logger } from '@libp2p/logger'\n\nexport interface WebRTCHandshakeOptions {\n  log: Logger\n  peerConnection: RTCPeerConnection\n  offerOptions?: RTCOfferOptions\n  wrtc: WRTC\n}\n\nexport class WebRTCHandshake extends EventEmitter<WebRTCPeerEvents> {\n  protected log: Logger\n  protected peerConnection: RTCPeerConnection\n  protected status: 'idle' | 'negotiating'\n  protected wrtc: WRTC\n\n  constructor (options: WebRTCHandshakeOptions) {\n    super()\n\n    this.log = options.log\n    this.peerConnection = options.peerConnection\n    this.wrtc = options.wrtc\n    this.status = 'idle'\n\n    this.peerConnection.addEventListener('negotiationneeded', () => {\n      this.log('peer connection negotiation needed')\n\n      this.handleRenegotiate({ type: 'renegotiate' }).catch(err => {\n        this.log.error('could not renegotiate %o', err)\n      })\n    })\n  }\n\n  async handleSignal (signal: Signal) {\n    this.log('incoming signal \"%s\"', signal.type)\n\n    if (signal.type === 'offer') {\n      return await this.handleOffer(signal)\n    } else if (signal.type === 'answer') {\n      return await this.handleAnswer(signal)\n    } else if (signal.type === 'candidate') {\n      return await this.handleCandidate(signal)\n    } else if (signal.type === 'renegotiate') {\n      return await this.handleRenegotiate(signal)\n    } else if (signal.type === 'goodbye') {\n      return await this.handleGoodye(signal)\n    } else {\n      // @ts-expect-error all types are handled above\n      this.log(`Unknown signal type ${signal.type}`) // eslint-disable-line @typescript-eslint/restrict-template-expressions\n    }\n  }\n\n  async handleOffer (signal: OfferSignal) {}\n  async handleAnswer (signal: AnswerSignal) {}\n  async handleRenegotiate (signal: RenegotiateSignal) {}\n  async handleGoodye (signal: GoodbyeSignal) {\n    this.peerConnection.close()\n  }\n\n  async handleCandidate (signal: CandidateSignal) {\n    const iceCandidate = new this.wrtc.RTCIceCandidate(signal.candidate)\n\n    try {\n      await this.peerConnection.addIceCandidate(iceCandidate)\n    } catch (err) {\n      if (iceCandidate.address == null || iceCandidate.address.endsWith('.local')) {\n        this.log('ignoring unsupported ICE candidate.')\n      } else {\n        throw errCode(err, 'ERR_ADD_ICE_CANDIDATE')\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}