{"ast":null,"code":"import { sha256 } from 'multiformats/hashes/sha2';\nimport { msgId } from '@libp2p/pubsub/utils';\n/**\n * Generate a message id, based on the `key` and `seqno`\n */\n\nexport function msgIdFnStrictSign(msg) {\n  if (msg.type !== 'signed') {\n    throw new Error('expected signed message type');\n  } // Should never happen\n\n\n  if (msg.sequenceNumber == null) throw Error('missing seqno field'); // TODO: Should use .from here or key?\n\n  return msgId(msg.from.toBytes(), msg.sequenceNumber);\n}\n/**\n * Generate a message id, based on message `data`\n */\n\nexport async function msgIdFnStrictNoSign(msg) {\n  return await sha256.encode(msg.data);\n}","map":{"version":3,"mappings":"AAAA,SAASA,MAAT,QAAuB,0BAAvB;AAEA,SAASC,KAAT,QAAsB,sBAAtB;AAEA;;;;AAGA,OAAM,SAAUC,iBAAV,CAA4BC,GAA5B,EAAwC;AAC5C,MAAIA,GAAG,CAACC,IAAJ,KAAa,QAAjB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CAAU,8BAAV,CAAN;AACD,GAH2C,CAI5C;;;AACA,MAAIF,GAAG,CAACG,cAAJ,IAAsB,IAA1B,EAAgC,MAAMD,KAAK,CAAC,qBAAD,CAAX,CALY,CAO5C;;AACA,SAAOJ,KAAK,CAACE,GAAG,CAACI,IAAJ,CAASC,OAAT,EAAD,EAAqBL,GAAG,CAACG,cAAzB,CAAZ;AACD;AAED;;;;AAGA,OAAO,eAAeG,mBAAf,CAAmCN,GAAnC,EAA+C;AACpD,SAAO,MAAMH,MAAM,CAACU,MAAP,CAAcP,GAAG,CAACQ,IAAlB,CAAb;AACD","names":["sha256","msgId","msgIdFnStrictSign","msg","type","Error","sequenceNumber","from","toBytes","msgIdFnStrictNoSign","encode","data"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@chainsafe\\libp2p-gossipsub\\src\\utils\\msgIdFn.ts"],"sourcesContent":["import { sha256 } from 'multiformats/hashes/sha2'\nimport type { Message } from '@libp2p/interface-pubsub'\nimport { msgId } from '@libp2p/pubsub/utils'\n\n/**\n * Generate a message id, based on the `key` and `seqno`\n */\nexport function msgIdFnStrictSign(msg: Message): Uint8Array {\n  if (msg.type !== 'signed') {\n    throw new Error('expected signed message type')\n  }\n  // Should never happen\n  if (msg.sequenceNumber == null) throw Error('missing seqno field')\n\n  // TODO: Should use .from here or key?\n  return msgId(msg.from.toBytes(), msg.sequenceNumber)\n}\n\n/**\n * Generate a message id, based on message `data`\n */\nexport async function msgIdFnStrictNoSign(msg: Message): Promise<Uint8Array> {\n  return await sha256.encode(msg.data)\n}\n"]},"metadata":{},"sourceType":"module"}