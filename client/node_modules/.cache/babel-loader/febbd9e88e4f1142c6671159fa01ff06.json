{"ast":null,"code":"import parallelBatch from 'it-parallel-batch';\nimport defaultOptions from './options.js';\nimport dagBuilderFn from './dag-builder/index.js';\nimport treeBuilderFn from './tree-builder.js';\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').ImportCandidate} ImportCandidate\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').Directory} Directory\n * @typedef {import('./types').File} File\n * @typedef {import('./types').ImportResult} ImportResult\n *\n * @typedef {import('./types').Chunker} Chunker\n * @typedef {import('./types').DAGBuilder} DAGBuilder\n * @typedef {import('./types').TreeBuilder} TreeBuilder\n * @typedef {import('./types').BufferImporter} BufferImporter\n * @typedef {import('./types').ChunkValidator} ChunkValidator\n * @typedef {import('./types').Reducer} Reducer\n * @typedef {import('./types').ProgressHandler} ProgressHandler\n */\n\n/**\n * @param {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate> | ImportCandidate} source\n * @param {Blockstore} blockstore\n * @param {UserImporterOptions} options\n * @returns {AsyncGenerator<ImportResult, void, unknown>}\n */\n\nexport async function* importer(source, blockstore) {\n  let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  const opts = defaultOptions(options);\n  let dagBuilder;\n\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder;\n  } else {\n    dagBuilder = dagBuilderFn;\n  }\n\n  let treeBuilder;\n\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder;\n  } else {\n    treeBuilder = treeBuilderFn;\n  }\n  /** @type {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate>} */\n\n\n  let candidates;\n\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    // @ts-ignore\n    candidates = source;\n  } else {\n    // @ts-ignore\n    candidates = [source];\n  }\n\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    };\n  }\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-unixfs-importer/src/index.js"],"names":["parallelBatch","defaultOptions","dagBuilderFn","treeBuilderFn","importer","source","blockstore","options","opts","dagBuilder","treeBuilder","candidates","Symbol","asyncIterator","iterator","entry","fileImportConcurrency","cid","path","unixfs","size"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,mBAA1B;AACA,OAAOC,cAAP,MAA2B,cAA3B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,aAAP,MAA0B,mBAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,gBAAiBC,QAAjB,CAA2BC,MAA3B,EAAmCC,UAAnC,EAA6D;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AAClE,QAAMC,IAAI,GAAGP,cAAc,CAACM,OAAD,CAA3B;AAEA,MAAIE,UAAJ;;AAEA,MAAI,OAAOF,OAAO,CAACE,UAAf,KAA8B,UAAlC,EAA8C;AAC5CA,IAAAA,UAAU,GAAGF,OAAO,CAACE,UAArB;AACD,GAFD,MAEO;AACLA,IAAAA,UAAU,GAAGP,YAAb;AACD;;AAED,MAAIQ,WAAJ;;AAEA,MAAI,OAAOH,OAAO,CAACG,WAAf,KAA+B,UAAnC,EAA+C;AAC7CA,IAAAA,WAAW,GAAGH,OAAO,CAACG,WAAtB;AACD,GAFD,MAEO;AACLA,IAAAA,WAAW,GAAGP,aAAd;AACD;AAED;;;AACA,MAAIQ,UAAJ;;AAEA,MAAIC,MAAM,CAACC,aAAP,IAAwBR,MAAxB,IAAkCO,MAAM,CAACE,QAAP,IAAmBT,MAAzD,EAAiE;AAC/D;AACAM,IAAAA,UAAU,GAAGN,MAAb;AACD,GAHD,MAGO;AACL;AACAM,IAAAA,UAAU,GAAG,CAACN,MAAD,CAAb;AACD;;AAED,aAAW,MAAMU,KAAjB,IAA0BL,WAAW,CAACV,aAAa,CAACS,UAAU,CAACE,UAAD,EAAaL,UAAb,EAAyBE,IAAzB,CAAX,EAA2CA,IAAI,CAACQ,qBAAhD,CAAd,EAAsFV,UAAtF,EAAkGE,IAAlG,CAArC,EAA8I;AAC5I,UAAM;AACJS,MAAAA,GAAG,EAAEF,KAAK,CAACE,GADP;AAEJC,MAAAA,IAAI,EAAEH,KAAK,CAACG,IAFR;AAGJC,MAAAA,MAAM,EAAEJ,KAAK,CAACI,MAHV;AAIJC,MAAAA,IAAI,EAAEL,KAAK,CAACK;AAJR,KAAN;AAMD;AACF","sourcesContent":["import parallelBatch from 'it-parallel-batch'\nimport defaultOptions from './options.js'\nimport dagBuilderFn from './dag-builder/index.js'\nimport treeBuilderFn from './tree-builder.js'\n\n/**\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('./types').ImportCandidate} ImportCandidate\n * @typedef {import('./types').UserImporterOptions} UserImporterOptions\n * @typedef {import('./types').ImporterOptions} ImporterOptions\n * @typedef {import('./types').Directory} Directory\n * @typedef {import('./types').File} File\n * @typedef {import('./types').ImportResult} ImportResult\n *\n * @typedef {import('./types').Chunker} Chunker\n * @typedef {import('./types').DAGBuilder} DAGBuilder\n * @typedef {import('./types').TreeBuilder} TreeBuilder\n * @typedef {import('./types').BufferImporter} BufferImporter\n * @typedef {import('./types').ChunkValidator} ChunkValidator\n * @typedef {import('./types').Reducer} Reducer\n * @typedef {import('./types').ProgressHandler} ProgressHandler\n */\n\n/**\n * @param {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate> | ImportCandidate} source\n * @param {Blockstore} blockstore\n * @param {UserImporterOptions} options\n * @returns {AsyncGenerator<ImportResult, void, unknown>}\n */\nexport async function * importer (source, blockstore, options = {}) {\n  const opts = defaultOptions(options)\n\n  let dagBuilder\n\n  if (typeof options.dagBuilder === 'function') {\n    dagBuilder = options.dagBuilder\n  } else {\n    dagBuilder = dagBuilderFn\n  }\n\n  let treeBuilder\n\n  if (typeof options.treeBuilder === 'function') {\n    treeBuilder = options.treeBuilder\n  } else {\n    treeBuilder = treeBuilderFn\n  }\n\n  /** @type {AsyncIterable<ImportCandidate> | Iterable<ImportCandidate>} */\n  let candidates\n\n  if (Symbol.asyncIterator in source || Symbol.iterator in source) {\n    // @ts-ignore\n    candidates = source\n  } else {\n    // @ts-ignore\n    candidates = [source]\n  }\n\n  for await (const entry of treeBuilder(parallelBatch(dagBuilder(candidates, blockstore, opts), opts.fileImportConcurrency), blockstore, opts)) {\n    yield {\n      cid: entry.cid,\n      path: entry.path,\n      unixfs: entry.unixfs,\n      size: entry.size\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}