{"ast":null,"code":"import { Key } from 'interface-datastore';\nimport { KeyTransformDatastore } from './keytransform.js';\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * Wraps a given datastore into a keytransform which\n * makes a given prefix transparent.\n *\n * For example, if the prefix is `new Key(/hello)` a call\n * to `store.put(new Key('/world'), mydata)` would store the data under\n * `/hello/world`.\n */\n\nexport class NamespaceDatastore extends KeyTransformDatastore {\n  /**\n   * @param {Datastore} child\n   * @param {Key} prefix\n   */\n  constructor(child, prefix) {\n    super(child, {\n      convert(key) {\n        return prefix.child(key);\n      },\n\n      invert(key) {\n        if (prefix.toString() === '/') {\n          return key;\n        }\n\n        if (!prefix.isAncestorOf(key)) {\n          throw new Error(`Expected prefix: (${prefix.toString()}) in key: ${key.toString()}`);\n        }\n\n        return new Key(key.toString().slice(prefix.toString().length), false);\n      }\n\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/datastore-core/src/namespace.js"],"names":["Key","KeyTransformDatastore","NamespaceDatastore","constructor","child","prefix","convert","key","invert","toString","isAncestorOf","Error","slice","length"],"mappings":"AAAA,SAASA,GAAT,QAAoB,qBAApB;AACA,SAASC,qBAAT,QAAsC,mBAAtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,MAAMC,kBAAN,SAAiCD,qBAAjC,CAAuD;AAC5D;AACF;AACA;AACA;AACEE,EAAAA,WAAW,CAAEC,KAAF,EAASC,MAAT,EAAiB;AAC1B,UAAMD,KAAN,EAAa;AACXE,MAAAA,OAAO,CAAEC,GAAF,EAAO;AACZ,eAAOF,MAAM,CAACD,KAAP,CAAaG,GAAb,CAAP;AACD,OAHU;;AAIXC,MAAAA,MAAM,CAAED,GAAF,EAAO;AACX,YAAIF,MAAM,CAACI,QAAP,OAAsB,GAA1B,EAA+B;AAC7B,iBAAOF,GAAP;AACD;;AAED,YAAI,CAACF,MAAM,CAACK,YAAP,CAAoBH,GAApB,CAAL,EAA+B;AAC7B,gBAAM,IAAII,KAAJ,CAAW,qBAAoBN,MAAM,CAACI,QAAP,EAAkB,aAAYF,GAAG,CAACE,QAAJ,EAAe,EAA5E,CAAN;AACD;;AAED,eAAO,IAAIT,GAAJ,CAAQO,GAAG,CAACE,QAAJ,GAAeG,KAAf,CAAqBP,MAAM,CAACI,QAAP,GAAkBI,MAAvC,CAAR,EAAwD,KAAxD,CAAP;AACD;;AAdU,KAAb;AAgBD;;AAtB2D","sourcesContent":["import { Key } from 'interface-datastore'\nimport { KeyTransformDatastore } from './keytransform.js'\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').KeyQuery} KeyQuery\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('./types').KeyTransform} KeyTransform\n */\n\n/**\n * Wraps a given datastore into a keytransform which\n * makes a given prefix transparent.\n *\n * For example, if the prefix is `new Key(/hello)` a call\n * to `store.put(new Key('/world'), mydata)` would store the data under\n * `/hello/world`.\n */\nexport class NamespaceDatastore extends KeyTransformDatastore {\n  /**\n   * @param {Datastore} child\n   * @param {Key} prefix\n   */\n  constructor (child, prefix) {\n    super(child, {\n      convert (key) {\n        return prefix.child(key)\n      },\n      invert (key) {\n        if (prefix.toString() === '/') {\n          return key\n        }\n\n        if (!prefix.isAncestorOf(key)) {\n          throw new Error(`Expected prefix: (${prefix.toString()}) in key: ${key.toString()}`)\n        }\n\n        return new Key(key.toString().slice(prefix.toString().length), false)\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}