{"ast":null,"code":"import { cleanCid } from './utils.js';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\nexport function createStat(_ref) {\n  let {\n    repo,\n    preload\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"stat\"]}\n   */\n  async function stat(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    cid = cleanCid(cid);\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    const block = await repo.blocks.get(cid);\n    return {\n      cid,\n      size: block.length\n    };\n  }\n\n  return withTimeoutOption(stat);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/block/stat.js"],"names":["cleanCid","withTimeoutOption","createStat","repo","preload","stat","cid","options","block","blocks","get","size","length"],"mappings":"AAAA,SAASA,QAAT,QAAyB,YAAzB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAASC,UAAT,OAAwC;AAAA,MAAnB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAmB;;AAC7C;AACF;AACA;AACE,iBAAeC,IAAf,CAAqBC,GAArB,EAAwC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACtCD,IAAAA,GAAG,GAAGN,QAAQ,CAACM,GAAD,CAAd;;AAEA,QAAIC,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACE,GAAD,CAAP;AACD;;AAED,UAAME,KAAK,GAAG,MAAML,IAAI,CAACM,MAAL,CAAYC,GAAZ,CAAgBJ,GAAhB,CAApB;AAEA,WAAO;AAAEA,MAAAA,GAAF;AAAOK,MAAAA,IAAI,EAAEH,KAAK,CAACI;AAAnB,KAAP;AACD;;AAED,SAAOX,iBAAiB,CAACI,IAAD,CAAxB;AACD","sourcesContent":["import { cleanCid } from './utils.js'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\nexport function createStat ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/block').API<{}>[\"stat\"]}\n   */\n  async function stat (cid, options = {}) {\n    cid = cleanCid(cid)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    const block = await repo.blocks.get(cid)\n\n    return { cid, size: block.length }\n  }\n\n  return withTimeoutOption(stat)\n}\n"]},"metadata":{},"sourceType":"module"}