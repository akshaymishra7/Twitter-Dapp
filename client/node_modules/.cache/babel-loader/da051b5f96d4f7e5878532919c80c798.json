{"ast":null,"code":"import debug from 'debug';\nimport { createUnsafe } from 'multiformats/block';\nconst log = debug('ipfs:repo:utils:walk-dag');\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\n\nexport async function* walkDag(cid, blockstore, loadCodec, options) {\n  try {\n    const bytes = await blockstore.get(cid, options);\n    const codec = await loadCodec(cid.code);\n    const block = createUnsafe({\n      bytes,\n      cid,\n      codec\n    });\n\n    for (const [, childCid] of block.links()) {\n      yield childCid;\n      yield* walkDag(childCid, blockstore, loadCodec, options);\n    }\n  } catch (\n  /** @type {any} */\n  err) {\n    log('Could not walk DAG for CID', cid.toString(), err);\n    throw err;\n  }\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-repo/src/utils/walk-dag.js"],"names":["debug","createUnsafe","log","walkDag","cid","blockstore","loadCodec","options","bytes","get","codec","code","block","childCid","links","err","toString"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AAEA,MAAMC,GAAG,GAAGF,KAAK,CAAC,0BAAD,CAAjB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,gBAAiBG,OAAjB,CAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,SAA3C,EAAsDC,OAAtD,EAA+D;AACpE,MAAI;AACF,UAAMC,KAAK,GAAG,MAAMH,UAAU,CAACI,GAAX,CAAeL,GAAf,EAAoBG,OAApB,CAApB;AACA,UAAMG,KAAK,GAAG,MAAMJ,SAAS,CAACF,GAAG,CAACO,IAAL,CAA7B;AACA,UAAMC,KAAK,GAAGX,YAAY,CAAC;AAAEO,MAAAA,KAAF;AAASJ,MAAAA,GAAT;AAAcM,MAAAA;AAAd,KAAD,CAA1B;;AAEA,SAAK,MAAM,GAAGG,QAAH,CAAX,IAA2BD,KAAK,CAACE,KAAN,EAA3B,EAA0C;AACxC,YAAMD,QAAN;AACA,aAAQV,OAAO,CAACU,QAAD,EAAWR,UAAX,EAAuBC,SAAvB,EAAkCC,OAAlC,CAAf;AACD;AACF,GATD,CASE;AAAO;AAAmBQ,EAAAA,GAA1B,EAA+B;AAC/Bb,IAAAA,GAAG,CAAC,4BAAD,EAA+BE,GAAG,CAACY,QAAJ,EAA/B,EAA+CD,GAA/C,CAAH;AAEA,UAAMA,GAAN;AACD;AACF","sourcesContent":["import debug from 'debug'\nimport { createUnsafe } from 'multiformats/block'\n\nconst log = debug('ipfs:repo:utils:walk-dag')\n\n/**\n * @typedef {import('multiformats/cid').CID} CID\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n * @typedef {import('../types').loadCodec} loadCodec\n * @typedef {import('../types').AbortOptions} AbortOptions\n */\n\n/**\n * @param {CID} cid\n * @param {Blockstore} blockstore\n * @param {loadCodec} loadCodec\n * @param {AbortOptions} [options]\n * @returns {AsyncGenerator<CID, void, undefined>}\n */\nexport async function * walkDag (cid, blockstore, loadCodec, options) {\n  try {\n    const bytes = await blockstore.get(cid, options)\n    const codec = await loadCodec(cid.code)\n    const block = createUnsafe({ bytes, cid, codec })\n\n    for (const [, childCid] of block.links()) {\n      yield childCid\n      yield * walkDag(childCid, blockstore, loadCodec, options)\n    }\n  } catch (/** @type {any} */ err) {\n    log('Could not walk DAG for CID', cid.toString(), err)\n\n    throw err\n  }\n}\n"]},"metadata":{},"sourceType":"module"}