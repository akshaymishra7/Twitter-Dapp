{"ast":null,"code":"import Queue from 'yocto-queue';\nexport default function pLimit(concurrency) {\n  if (!((Number.isInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency > 0)) {\n    throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n  }\n\n  const queue = new Queue();\n  let activeCount = 0;\n\n  const next = () => {\n    activeCount--;\n\n    if (queue.size > 0) {\n      queue.dequeue()();\n    }\n  };\n\n  const run = async (fn, resolve, args) => {\n    activeCount++;\n\n    const result = (async () => fn(...args))();\n\n    resolve(result);\n\n    try {\n      await result;\n    } catch {}\n\n    next();\n  };\n\n  const enqueue = (fn, resolve, args) => {\n    queue.enqueue(run.bind(undefined, fn, resolve, args));\n\n    (async () => {\n      // This function needs to wait until the next microtask before comparing\n      // `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n      // when the run function is dequeued and called. The comparison in the if-statement\n      // needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n      await Promise.resolve();\n\n      if (activeCount < concurrency && queue.size > 0) {\n        queue.dequeue()();\n      }\n    })();\n  };\n\n  const generator = function (fn) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n\n    return new Promise(resolve => {\n      enqueue(fn, resolve, args);\n    });\n  };\n\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: () => activeCount\n    },\n    pendingCount: {\n      get: () => queue.size\n    },\n    clearQueue: {\n      value: () => {\n        queue.clear();\n      }\n    }\n  });\n  return generator;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/p-limit/index.js"],"names":["Queue","pLimit","concurrency","Number","isInteger","POSITIVE_INFINITY","TypeError","queue","activeCount","next","size","dequeue","run","fn","resolve","args","result","enqueue","bind","undefined","Promise","generator","Object","defineProperties","get","pendingCount","clearQueue","value","clear"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,aAAlB;AAEA,eAAe,SAASC,MAAT,CAAgBC,WAAhB,EAA6B;AAC3C,MAAI,EAAE,CAACC,MAAM,CAACC,SAAP,CAAiBF,WAAjB,KAAiCA,WAAW,KAAKC,MAAM,CAACE,iBAAzD,KAA+EH,WAAW,GAAG,CAA/F,CAAJ,EAAuG;AACtG,UAAM,IAAII,SAAJ,CAAc,qDAAd,CAAN;AACA;;AAED,QAAMC,KAAK,GAAG,IAAIP,KAAJ,EAAd;AACA,MAAIQ,WAAW,GAAG,CAAlB;;AAEA,QAAMC,IAAI,GAAG,MAAM;AAClBD,IAAAA,WAAW;;AAEX,QAAID,KAAK,CAACG,IAAN,GAAa,CAAjB,EAAoB;AACnBH,MAAAA,KAAK,CAACI,OAAN;AACA;AACD,GAND;;AAQA,QAAMC,GAAG,GAAG,OAAOC,EAAP,EAAWC,OAAX,EAAoBC,IAApB,KAA6B;AACxCP,IAAAA,WAAW;;AAEX,UAAMQ,MAAM,GAAG,CAAC,YAAYH,EAAE,CAAC,GAAGE,IAAJ,CAAf,GAAf;;AAEAD,IAAAA,OAAO,CAACE,MAAD,CAAP;;AAEA,QAAI;AACH,YAAMA,MAAN;AACA,KAFD,CAEE,MAAM,CAAE;;AAEVP,IAAAA,IAAI;AACJ,GAZD;;AAcA,QAAMQ,OAAO,GAAG,CAACJ,EAAD,EAAKC,OAAL,EAAcC,IAAd,KAAuB;AACtCR,IAAAA,KAAK,CAACU,OAAN,CAAcL,GAAG,CAACM,IAAJ,CAASC,SAAT,EAAoBN,EAApB,EAAwBC,OAAxB,EAAiCC,IAAjC,CAAd;;AAEA,KAAC,YAAY;AACZ;AACA;AACA;AACA;AACA,YAAMK,OAAO,CAACN,OAAR,EAAN;;AAEA,UAAIN,WAAW,GAAGN,WAAd,IAA6BK,KAAK,CAACG,IAAN,GAAa,CAA9C,EAAiD;AAChDH,QAAAA,KAAK,CAACI,OAAN;AACA;AACD,KAVD;AAWA,GAdD;;AAgBA,QAAMU,SAAS,GAAG,UAACR,EAAD;AAAA,sCAAQE,IAAR;AAAQA,MAAAA,IAAR;AAAA;;AAAA,WAAiB,IAAIK,OAAJ,CAAYN,OAAO,IAAI;AACzDG,MAAAA,OAAO,CAACJ,EAAD,EAAKC,OAAL,EAAcC,IAAd,CAAP;AACA,KAFkC,CAAjB;AAAA,GAAlB;;AAIAO,EAAAA,MAAM,CAACC,gBAAP,CAAwBF,SAAxB,EAAmC;AAClCb,IAAAA,WAAW,EAAE;AACZgB,MAAAA,GAAG,EAAE,MAAMhB;AADC,KADqB;AAIlCiB,IAAAA,YAAY,EAAE;AACbD,MAAAA,GAAG,EAAE,MAAMjB,KAAK,CAACG;AADJ,KAJoB;AAOlCgB,IAAAA,UAAU,EAAE;AACXC,MAAAA,KAAK,EAAE,MAAM;AACZpB,QAAAA,KAAK,CAACqB,KAAN;AACA;AAHU;AAPsB,GAAnC;AAcA,SAAOP,SAAP;AACA","sourcesContent":["import Queue from 'yocto-queue';\n\nexport default function pLimit(concurrency) {\n\tif (!((Number.isInteger(concurrency) || concurrency === Number.POSITIVE_INFINITY) && concurrency > 0)) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = new Queue();\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.size > 0) {\n\t\t\tqueue.dequeue()();\n\t\t}\n\t};\n\n\tconst run = async (fn, resolve, args) => {\n\t\tactiveCount++;\n\n\t\tconst result = (async () => fn(...args))();\n\n\t\tresolve(result);\n\n\t\ttry {\n\t\t\tawait result;\n\t\t} catch {}\n\n\t\tnext();\n\t};\n\n\tconst enqueue = (fn, resolve, args) => {\n\t\tqueue.enqueue(run.bind(undefined, fn, resolve, args));\n\n\t\t(async () => {\n\t\t\t// This function needs to wait until the next microtask before comparing\n\t\t\t// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n\t\t\t// when the run function is dequeued and called. The comparison in the if-statement\n\t\t\t// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n\t\t\tawait Promise.resolve();\n\n\t\t\tif (activeCount < concurrency && queue.size > 0) {\n\t\t\t\tqueue.dequeue()();\n\t\t\t}\n\t\t})();\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => {\n\t\tenqueue(fn, resolve, args);\n\t});\n\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount,\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.size,\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue: () => {\n\t\t\t\tqueue.clear();\n\t\t\t},\n\t\t},\n\t});\n\n\treturn generator;\n}\n"]},"metadata":{},"sourceType":"module"}