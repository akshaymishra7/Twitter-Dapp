{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n/**\n * @typedef {import('ipfs-core-types/src/swarm').AddrsResult} AddrsResult\n */\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\n\nexport function createAddrs(_ref) {\n  let {\n    network\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"addrs\"]}\n   */\n  async function addrs() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // eslint-disable-line require-await\n\n    /** @type {AddrsResult[]} */\n    const peers = [];\n    const {\n      libp2p\n    } = await network.use(options);\n    await libp2p.peerStore.forEach(peer => {\n      peers.push({\n        id: peer.id,\n        addrs: peer.addresses.map(mi => mi.multiaddr)\n      });\n    });\n    return peers;\n  }\n\n  return withTimeoutOption(addrs);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/swarm/addrs.js"],"names":["withTimeoutOption","createAddrs","network","addrs","options","peers","libp2p","use","peerStore","forEach","peer","push","id","addresses","map","mi","multiaddr"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qCAAlC;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,WAAT,OAAmC;AAAA,MAAb;AAAEC,IAAAA;AAAF,GAAa;;AACxC;AACF;AACA;AACE,iBAAeC,KAAf,GAAoC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAAE;;AACpC;AACA,UAAMC,KAAK,GAAG,EAAd;AACA,UAAM;AAAEC,MAAAA;AAAF,QAAa,MAAMJ,OAAO,CAACK,GAAR,CAAYH,OAAZ,CAAzB;AAEA,UAAME,MAAM,CAACE,SAAP,CAAiBC,OAAjB,CAAyBC,IAAI,IAAI;AACrCL,MAAAA,KAAK,CAACM,IAAN,CAAW;AACTC,QAAAA,EAAE,EAAEF,IAAI,CAACE,EADA;AAETT,QAAAA,KAAK,EAAEO,IAAI,CAACG,SAAL,CAAeC,GAAf,CAAoBC,EAAD,IAAQA,EAAE,CAACC,SAA9B;AAFE,OAAX;AAID,KALK,CAAN;AAOA,WAAOX,KAAP;AACD;;AAED,SAAOL,iBAAiB,CAACG,KAAD,CAAxB;AACD","sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @typedef {import('ipfs-core-types/src/swarm').AddrsResult} AddrsResult\n */\n\n/**\n * @param {object} config\n * @param {import('../../types').NetworkService} config.network\n */\nexport function createAddrs ({ network }) {\n  /**\n   * @type {import('ipfs-core-types/src/swarm').API<{}>[\"addrs\"]}\n   */\n  async function addrs (options = {}) { // eslint-disable-line require-await\n    /** @type {AddrsResult[]} */\n    const peers = []\n    const { libp2p } = await network.use(options)\n\n    await libp2p.peerStore.forEach(peer => {\n      peers.push({\n        id: peer.id,\n        addrs: peer.addresses.map((mi) => mi.multiaddr)\n      })\n    })\n\n    return peers\n  }\n\n  return withTimeoutOption(addrs)\n}\n"]},"metadata":{},"sourceType":"module"}