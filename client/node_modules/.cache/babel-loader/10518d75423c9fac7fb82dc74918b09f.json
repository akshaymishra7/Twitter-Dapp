{"ast":null,"code":"import last from 'it-last';\nimport { CID } from 'multiformats/cid';\n/**\n * @param {object} config\n * @param {ReturnType<typeof import('./add-all').createAddAll>} config.addAll\n */\n\nexport function createAdd(_ref) {\n  let {\n    addAll\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"add\"]}\n   */\n  return function (path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let iter;\n    const cid = CID.asCID(path);\n\n    if (cid) {\n      iter = addAll([{\n        cid,\n        ...options\n      }], options);\n    } else {\n      iter = addAll([{\n        path: path.toString(),\n        ...options\n      }], options);\n    } // @ts-expect-error return value of last can be undefined\n\n\n    return last(iter);\n  };\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/pin/add.js"],"names":["last","CID","createAdd","addAll","path","options","iter","cid","asCID","toString"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,GAAT,QAAoB,kBAApB;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,OAAgC;AAAA,MAAZ;AAAEC,IAAAA;AAAF,GAAY;;AACrC;AACF;AACA;AACE,SAAO,UAACC,IAAD,EAAwB;AAAA,QAAjBC,OAAiB,uEAAP,EAAO;AAC7B,QAAIC,IAAJ;AAEA,UAAMC,GAAG,GAAGN,GAAG,CAACO,KAAJ,CAAUJ,IAAV,CAAZ;;AAEA,QAAIG,GAAJ,EAAS;AACPD,MAAAA,IAAI,GAAGH,MAAM,CAAC,CAAC;AACbI,QAAAA,GADa;AAEb,WAAGF;AAFU,OAAD,CAAD,EAGTA,OAHS,CAAb;AAID,KALD,MAKO;AACLC,MAAAA,IAAI,GAAGH,MAAM,CAAC,CAAC;AACbC,QAAAA,IAAI,EAAEA,IAAI,CAACK,QAAL,EADO;AAEb,WAAGJ;AAFU,OAAD,CAAD,EAGTA,OAHS,CAAb;AAID,KAf4B,CAiB7B;;;AACA,WAAOL,IAAI,CAACM,IAAD,CAAX;AACD,GAnBD;AAoBD","sourcesContent":["import last from 'it-last'\nimport { CID } from 'multiformats/cid'\n\n/**\n * @param {object} config\n * @param {ReturnType<typeof import('./add-all').createAddAll>} config.addAll\n */\nexport function createAdd ({ addAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/pin').API<{}>[\"add\"]}\n   */\n  return (path, options = {}) => {\n    let iter\n\n    const cid = CID.asCID(path)\n\n    if (cid) {\n      iter = addAll([{\n        cid,\n        ...options\n      }], options)\n    } else {\n      iter = addAll([{\n        path: path.toString(),\n        ...options\n      }], options)\n    }\n\n    // @ts-expect-error return value of last can be undefined\n    return last(iter)\n  }\n}\n"]},"metadata":{},"sourceType":"module"}