{"ast":null,"code":"import drain from 'it-drain';\nimport { notFoundError } from 'datastore-core/errors';\nimport { logger } from '@libp2p/logger';\nconst log = logger('ipfs:ipns:dht-datastore');\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nexport class DHTDatastore {\n  /**\n   *\n   * @param {import('@libp2p/interface-dht').DHT} dht\n   */\n  constructor(dht) {\n    this._dht = dht;\n  }\n  /**\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n\n\n  async put(key, value, options) {\n    try {\n      await drain(this._dht.put(key, value, options));\n    } catch (\n    /** @type {any} */\n    err) {\n      log.error(err);\n      throw err;\n    }\n  }\n  /**\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n\n\n  async get(key, options) {\n    for await (const event of this._dht.get(key, options)) {\n      if (event.name === 'VALUE') {\n        return event.value;\n      }\n    }\n\n    throw notFoundError();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/ipns/routing/dht-datastore.js"],"names":["drain","notFoundError","logger","log","DHTDatastore","constructor","dht","_dht","put","key","value","options","err","error","get","event","name"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,SAASC,aAAT,QAA8B,uBAA9B;AACA,SAASC,MAAT,QAAuB,gBAAvB;AAEA,MAAMC,GAAG,GAAGD,MAAM,CAAC,yBAAD,CAAlB;AAEA;AACA;AACA;;AAEA,OAAO,MAAME,YAAN,CAAmB;AACxB;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,GAAF,EAAO;AAChB,SAAKC,IAAL,GAAYD,GAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACW,QAAHE,GAAG,CAAEC,GAAF,EAAOC,KAAP,EAAcC,OAAd,EAAuB;AAC9B,QAAI;AACF,YAAMX,KAAK,CAAC,KAAKO,IAAL,CAAUC,GAAV,CAAcC,GAAd,EAAmBC,KAAnB,EAA0BC,OAA1B,CAAD,CAAX;AACD,KAFD,CAEE;AAAO;AAAmBC,IAAAA,GAA1B,EAA+B;AAC/BT,MAAAA,GAAG,CAACU,KAAJ,CAAUD,GAAV;AACA,YAAMA,GAAN;AACD;AACF;AAED;AACF;AACA;AACA;;;AACW,QAAHE,GAAG,CAAEL,GAAF,EAAOE,OAAP,EAAgB;AACvB,eAAW,MAAMI,KAAjB,IAA0B,KAAKR,IAAL,CAAUO,GAAV,CAAcL,GAAd,EAAmBE,OAAnB,CAA1B,EAAuD;AACrD,UAAII,KAAK,CAACC,IAAN,KAAe,OAAnB,EAA4B;AAC1B,eAAOD,KAAK,CAACL,KAAb;AACD;AACF;;AAED,UAAMT,aAAa,EAAnB;AACD;;AAnCuB","sourcesContent":["import drain from 'it-drain'\nimport { notFoundError } from 'datastore-core/errors'\nimport { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:ipns:dht-datastore')\n\n/**\n * @typedef {import('@libp2p/interfaces').AbortOptions} AbortOptions\n */\n\nexport class DHTDatastore {\n  /**\n   *\n   * @param {import('@libp2p/interface-dht').DHT} dht\n   */\n  constructor (dht) {\n    this._dht = dht\n  }\n\n  /**\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @param {AbortOptions} [options]\n   */\n  async put (key, value, options) {\n    try {\n      await drain(this._dht.put(key, value, options))\n    } catch (/** @type {any} */ err) {\n      log.error(err)\n      throw err\n    }\n  }\n\n  /**\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @param {AbortOptions} [options]\n   */\n  async get (key, options) {\n    for await (const event of this._dht.get(key, options)) {\n      if (event.name === 'VALUE') {\n        return event.value\n      }\n    }\n\n    throw notFoundError()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}