{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { logger } from '@libp2p/logger';\nimport { profiles } from './profiles.js';\nconst log = logger('ipfs:core:config');\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\n\nexport function createConfig(_ref) {\n  let {\n    repo\n  } = _ref;\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  };\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"getAll\"]}\n   */\n\n  async function getAll() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    // eslint-disable-line require-await\n    return repo.config.getAll(options);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"get\"]}\n   */\n\n\n  async function get(key, options) {\n    // eslint-disable-line require-await\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'));\n    }\n\n    return repo.config.get(key, options);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"set\"]}\n   */\n\n\n  async function set(key, value, options) {\n    // eslint-disable-line require-await\n    return repo.config.set(key, value, options);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"replace\"]}\n   */\n\n\n  async function replace(value, options) {\n    // eslint-disable-line require-await\n    return repo.config.replace(value, options);\n  }\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"apply\"]}\n   */\n\n\n  async function applyProfile(profileName) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      dryRun: false\n    };\n    const {\n      dryRun\n    } = options;\n    const profile = profiles[profileName];\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`);\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options);\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)); // clone\n\n      newCfg = profile.transform(newCfg);\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options);\n      } // Scrub private key from output\n      // @ts-expect-error `oldCfg.Identity` maybe undefined\n\n\n      delete oldCfg.Identity.PrivKey;\n      delete newCfg.Identity.PrivKey;\n      return {\n        original: oldCfg,\n        updated: newCfg\n      };\n    } catch (\n    /** @type {any} */\n    err) {\n      log(err);\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`);\n    }\n  }\n}\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"list\"]}\n */\n\nasync function listProfiles(_options) {\n  // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }));\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/config/index.js"],"names":["withTimeoutOption","logger","profiles","log","createConfig","repo","getAll","get","set","replace","apply","applyProfile","list","listProfiles","options","config","key","Promise","reject","Error","value","profileName","dryRun","profile","oldCfg","newCfg","JSON","parse","stringify","transform","Identity","PrivKey","original","updated","err","message","_options","Object","keys","map","name","description"],"mappings":"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","sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { logger } from '@libp2p/logger'\nimport { profiles } from './profiles.js'\n\nconst log = logger('ipfs:core:config')\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n */\nexport function createConfig ({ repo }) {\n  return {\n    getAll: withTimeoutOption(getAll),\n    get: withTimeoutOption(get),\n    set: withTimeoutOption(set),\n    replace: withTimeoutOption(replace),\n    profiles: {\n      apply: withTimeoutOption(applyProfile),\n      list: withTimeoutOption(listProfiles)\n    }\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"getAll\"]}\n   */\n  async function getAll (options = {}) { // eslint-disable-line require-await\n    return repo.config.getAll(options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"get\"]}\n   */\n  async function get (key, options) { // eslint-disable-line require-await\n    if (!key) {\n      return Promise.reject(new Error('key argument is required'))\n    }\n\n    return repo.config.get(key, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"set\"]}\n   */\n  async function set (key, value, options) { // eslint-disable-line require-await\n    return repo.config.set(key, value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config').API<{}>[\"replace\"]}\n   */\n  async function replace (value, options) { // eslint-disable-line require-await\n    return repo.config.replace(value, options)\n  }\n\n  /**\n   * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"apply\"]}\n   */\n  async function applyProfile (profileName, options = { dryRun: false }) {\n    const { dryRun } = options\n\n    const profile = profiles[profileName]\n\n    if (!profile) {\n      throw new Error(`No profile with name '${profileName}' exists`)\n    }\n\n    try {\n      const oldCfg = await repo.config.getAll(options)\n      let newCfg = JSON.parse(JSON.stringify(oldCfg)) // clone\n      newCfg = profile.transform(newCfg)\n\n      if (!dryRun) {\n        await repo.config.replace(newCfg, options)\n      }\n\n      // Scrub private key from output\n      // @ts-expect-error `oldCfg.Identity` maybe undefined\n      delete oldCfg.Identity.PrivKey\n      delete newCfg.Identity.PrivKey\n\n      return { original: oldCfg, updated: newCfg }\n    } catch (/** @type {any} */ err) {\n      log(err)\n\n      throw new Error(`Could not apply profile '${profileName}' to config: ${err.message}`)\n    }\n  }\n}\n\n/**\n * @type {import('ipfs-core-types/src/config/profiles').API<{}>[\"list\"]}\n */\nasync function listProfiles (_options) { // eslint-disable-line require-await\n  return Object.keys(profiles).map(name => ({\n    name,\n    description: profiles[name].description\n  }))\n}\n"]},"metadata":{},"sourceType":"module"}