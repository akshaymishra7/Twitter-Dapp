{"ast":null,"code":"import { from } from 'multiformats/hashes/hasher';\nimport { bytes } from 'multiformats'; // @ts-expect-error no types\n\nimport mur from 'murmurhash3js-revisited';\n/**\n * @param {number} number\n * @returns {Uint8Array}\n */\n\nfunction fromNumberTo32BitBuf(number) {\n  const bytes = new Array(4);\n\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff;\n    number = number >> 8;\n  }\n\n  return new Uint8Array(bytes);\n}\n\nexport const murmur332 = from({\n  name: 'murmur3-32',\n  code: 0x23,\n  encode: input => fromNumberTo32BitBuf(mur.x86.hash32(input))\n});\nexport const murmur3128 = from({\n  name: 'murmur3-128',\n  code: 0x22,\n  encode: input => bytes.fromHex(mur.x64.hash128(input))\n}); // A special-use 0x22 that truncates 64 bits, specifically for use in the UnixFS HAMT\n\nexport const murmur364 = from({\n  name: 'murmur3-x64-64',\n  code: 0x22,\n  encode: input => bytes.fromHex(mur.x64.hash128(input)).subarray(0, 8)\n});","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/@multiformats/murmur3/src/index.js"],"names":["from","bytes","mur","fromNumberTo32BitBuf","number","Array","i","Uint8Array","murmur332","name","code","encode","input","x86","hash32","murmur3128","fromHex","x64","hash128","murmur364","subarray"],"mappings":"AAAA,SAASA,IAAT,QAAqB,4BAArB;AACA,SAASC,KAAT,QAAsB,cAAtB,C,CACA;;AACA,OAAOC,GAAP,MAAgB,yBAAhB;AAEA;AACA;AACA;AACA;;AACA,SAASC,oBAAT,CAA+BC,MAA/B,EAAuC;AACrC,QAAMH,KAAK,GAAG,IAAII,KAAJ,CAAU,CAAV,CAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1BL,IAAAA,KAAK,CAACK,CAAD,CAAL,GAAWF,MAAM,GAAG,IAApB;AACAA,IAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;AACD;;AACD,SAAO,IAAIG,UAAJ,CAAeN,KAAf,CAAP;AACD;;AAED,OAAO,MAAMO,SAAS,GAAGR,IAAI,CAAC;AAC5BS,EAAAA,IAAI,EAAE,YADsB;AAE5BC,EAAAA,IAAI,EAAE,IAFsB;AAG5BC,EAAAA,MAAM,EAAGC,KAAD,IAAWT,oBAAoB,CAACD,GAAG,CAACW,GAAJ,CAAQC,MAAR,CAAeF,KAAf,CAAD;AAHX,CAAD,CAAtB;AAMP,OAAO,MAAMG,UAAU,GAAGf,IAAI,CAAC;AAC7BS,EAAAA,IAAI,EAAE,aADuB;AAE7BC,EAAAA,IAAI,EAAE,IAFuB;AAG7BC,EAAAA,MAAM,EAAGC,KAAD,IAAWX,KAAK,CAACe,OAAN,CAAcd,GAAG,CAACe,GAAJ,CAAQC,OAAR,CAAgBN,KAAhB,CAAd;AAHU,CAAD,CAAvB,C,CAMP;;AACA,OAAO,MAAMO,SAAS,GAAGnB,IAAI,CAAC;AAC5BS,EAAAA,IAAI,EAAE,gBADsB;AAE5BC,EAAAA,IAAI,EAAE,IAFsB;AAG5BC,EAAAA,MAAM,EAAGC,KAAD,IAAWX,KAAK,CAACe,OAAN,CAAcd,GAAG,CAACe,GAAJ,CAAQC,OAAR,CAAgBN,KAAhB,CAAd,EAAsCQ,QAAtC,CAA+C,CAA/C,EAAkD,CAAlD;AAHS,CAAD,CAAtB","sourcesContent":["import { from } from 'multiformats/hashes/hasher'\nimport { bytes } from 'multiformats'\n// @ts-expect-error no types\nimport mur from 'murmurhash3js-revisited'\n\n/**\n * @param {number} number\n * @returns {Uint8Array}\n */\nfunction fromNumberTo32BitBuf (number) {\n  const bytes = new Array(4)\n  for (let i = 0; i < 4; i++) {\n    bytes[i] = number & 0xff\n    number = number >> 8\n  }\n  return new Uint8Array(bytes)\n}\n\nexport const murmur332 = from({\n  name: 'murmur3-32',\n  code: 0x23,\n  encode: (input) => fromNumberTo32BitBuf(mur.x86.hash32(input))\n})\n\nexport const murmur3128 = from({\n  name: 'murmur3-128',\n  code: 0x22,\n  encode: (input) => bytes.fromHex(mur.x64.hash128(input))\n})\n\n// A special-use 0x22 that truncates 64 bits, specifically for use in the UnixFS HAMT\nexport const murmur364 = from({\n  name: 'murmur3-x64-64',\n  code: 0x22,\n  encode: (input) => bytes.fromHex(mur.x64.hash128(input)).subarray(0, 8)\n})\n"]},"metadata":{},"sourceType":"module"}