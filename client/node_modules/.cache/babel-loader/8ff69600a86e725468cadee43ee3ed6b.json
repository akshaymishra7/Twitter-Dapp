{"ast":null,"code":"import { generateKeyPair, marshalPrivateKey, unmarshalPrivateKey, marshalPublicKey, unmarshalPublicKey } from '@libp2p/crypto/keys';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { peerIdFromKeys, peerIdFromBytes } from '@libp2p/peer-id';\nimport { PeerIdProto } from './proto.js';\nexport const createEd25519PeerId = async () => {\n  const key = await generateKeyPair('Ed25519');\n  const id = await createFromPrivKey(key);\n\n  if (id.type === 'Ed25519') {\n    return id;\n  }\n\n  throw new Error(`Generated unexpected PeerId type \"${id.type}\"`);\n};\nexport const createSecp256k1PeerId = async () => {\n  const key = await generateKeyPair('secp256k1');\n  const id = await createFromPrivKey(key);\n\n  if (id.type === 'secp256k1') {\n    return id;\n  }\n\n  throw new Error(`Generated unexpected PeerId type \"${id.type}\"`);\n};\nexport const createRSAPeerId = async opts => {\n  const key = await generateKeyPair('RSA', opts?.bits ?? 2048);\n  const id = await createFromPrivKey(key);\n\n  if (id.type === 'RSA') {\n    return id;\n  }\n\n  throw new Error(`Generated unexpected PeerId type \"${id.type}\"`);\n};\nexport async function createFromPubKey(publicKey) {\n  return await peerIdFromKeys(marshalPublicKey(publicKey));\n}\nexport async function createFromPrivKey(privateKey) {\n  return await peerIdFromKeys(marshalPublicKey(privateKey.public), marshalPrivateKey(privateKey));\n}\nexport function exportToProtobuf(peerId, excludePrivateKey) {\n  return PeerIdProto.encode({\n    id: peerId.multihash.bytes,\n    pubKey: peerId.publicKey,\n    privKey: excludePrivateKey === true || peerId.privateKey == null ? undefined : peerId.privateKey\n  });\n}\nexport async function createFromProtobuf(buf) {\n  const {\n    id,\n    privKey,\n    pubKey\n  } = PeerIdProto.decode(buf);\n  return await createFromParts(id ?? new Uint8Array(0), privKey, pubKey);\n}\nexport async function createFromJSON(obj) {\n  return await createFromParts(uint8ArrayFromString(obj.id, 'base58btc'), obj.privKey != null ? uint8ArrayFromString(obj.privKey, 'base64pad') : undefined, obj.pubKey != null ? uint8ArrayFromString(obj.pubKey, 'base64pad') : undefined);\n}\n\nasync function createFromParts(multihash, privKey, pubKey) {\n  if (privKey != null) {\n    const key = await unmarshalPrivateKey(privKey);\n    return await createFromPrivKey(key);\n  } else if (pubKey != null) {\n    const key = unmarshalPublicKey(pubKey);\n    return await createFromPubKey(key);\n  }\n\n  return peerIdFromBytes(multihash);\n}","map":{"version":3,"mappings":"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","names":["generateKeyPair","marshalPrivateKey","unmarshalPrivateKey","marshalPublicKey","unmarshalPublicKey","fromString","uint8ArrayFromString","peerIdFromKeys","peerIdFromBytes","PeerIdProto","createEd25519PeerId","key","id","createFromPrivKey","type","Error","createSecp256k1PeerId","createRSAPeerId","opts","bits","createFromPubKey","publicKey","privateKey","public","exportToProtobuf","peerId","excludePrivateKey","encode","multihash","bytes","pubKey","privKey","undefined","createFromProtobuf","buf","decode","createFromParts","Uint8Array","createFromJSON","obj"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\peer-id-factory\\src\\index.ts"],"sourcesContent":["import { generateKeyPair, marshalPrivateKey, unmarshalPrivateKey, marshalPublicKey, unmarshalPublicKey } from '@libp2p/crypto/keys'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { peerIdFromKeys, peerIdFromBytes } from '@libp2p/peer-id'\nimport { PeerIdProto } from './proto.js'\nimport type { PublicKey, PrivateKey } from '@libp2p/interface-keys'\nimport type { RSAPeerId, Ed25519PeerId, Secp256k1PeerId, PeerId } from '@libp2p/interface-peer-id'\n\nexport const createEd25519PeerId = async (): Promise<Ed25519PeerId> => {\n  const key = await generateKeyPair('Ed25519')\n  const id = await createFromPrivKey(key)\n\n  if (id.type === 'Ed25519') {\n    return id\n  }\n\n  throw new Error(`Generated unexpected PeerId type \"${id.type}\"`)\n}\n\nexport const createSecp256k1PeerId = async (): Promise<Secp256k1PeerId> => {\n  const key = await generateKeyPair('secp256k1')\n  const id = await createFromPrivKey(key)\n\n  if (id.type === 'secp256k1') {\n    return id\n  }\n\n  throw new Error(`Generated unexpected PeerId type \"${id.type}\"`)\n}\n\nexport const createRSAPeerId = async (opts?: { bits: number }): Promise<RSAPeerId> => {\n  const key = await generateKeyPair('RSA', opts?.bits ?? 2048)\n  const id = await createFromPrivKey(key)\n\n  if (id.type === 'RSA') {\n    return id\n  }\n\n  throw new Error(`Generated unexpected PeerId type \"${id.type}\"`)\n}\n\nexport async function createFromPubKey (publicKey: PublicKey): Promise<PeerId> {\n  return await peerIdFromKeys(marshalPublicKey(publicKey))\n}\n\nexport async function createFromPrivKey (privateKey: PrivateKey): Promise<PeerId> {\n  return await peerIdFromKeys(marshalPublicKey(privateKey.public), marshalPrivateKey(privateKey))\n}\n\nexport function exportToProtobuf (peerId: RSAPeerId | Ed25519PeerId | Secp256k1PeerId, excludePrivateKey?: boolean): Uint8Array {\n  return PeerIdProto.encode({\n    id: peerId.multihash.bytes,\n    pubKey: peerId.publicKey,\n    privKey: excludePrivateKey === true || peerId.privateKey == null ? undefined : peerId.privateKey\n  })\n}\n\nexport async function createFromProtobuf (buf: Uint8Array): Promise<PeerId> {\n  const {\n    id,\n    privKey,\n    pubKey\n  } = PeerIdProto.decode(buf)\n\n  return await createFromParts(\n    id ?? new Uint8Array(0),\n    privKey,\n    pubKey\n  )\n}\n\nexport async function createFromJSON (obj: { id: string, privKey?: string, pubKey?: string }): Promise<PeerId> {\n  return await createFromParts(\n    uint8ArrayFromString(obj.id, 'base58btc'),\n    obj.privKey != null ? uint8ArrayFromString(obj.privKey, 'base64pad') : undefined,\n    obj.pubKey != null ? uint8ArrayFromString(obj.pubKey, 'base64pad') : undefined\n  )\n}\n\nasync function createFromParts (multihash: Uint8Array, privKey?: Uint8Array, pubKey?: Uint8Array): Promise<PeerId> {\n  if (privKey != null) {\n    const key = await unmarshalPrivateKey(privKey)\n\n    return await createFromPrivKey(key)\n  } else if (pubKey != null) {\n    const key = unmarshalPublicKey(pubKey)\n\n    return await createFromPubKey(key)\n  }\n\n  return peerIdFromBytes(multihash)\n}\n"]},"metadata":{},"sourceType":"module"}