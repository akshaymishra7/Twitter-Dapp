{"ast":null,"code":"import { logger } from '@libp2p/logger';\nconst log = logger('ipfs:mfs-preload');\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\n\nexport function createMfsPreloader(_ref) {\n  let {\n    preload,\n    files,\n    options = {}\n  } = _ref;\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n\n    const noop = async () => {};\n\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n\n  let rootCid = '';\n  /** @type {any} */\n\n  let timeoutId;\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/');\n      const nextRootCid = stats.cid.toString();\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`);\n        await preload(stats.cid);\n        rootCid = nextRootCid;\n      }\n    } catch (\n    /** @type {any} */\n    err) {\n      log.error('failed to preload MFS root', err);\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    }\n  };\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start() {\n      const stats = await files.stat('/');\n      rootCid = stats.cid.toString();\n      log(`monitoring MFS root ${stats.cid}`);\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    },\n\n    /**\n     * @returns {void}\n     */\n    stop() {\n      clearTimeout(timeoutId);\n    }\n\n  };\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/mfs-preload.js"],"names":["logger","log","createMfsPreloader","preload","files","options","interval","enabled","noop","start","stop","rootCid","timeoutId","preloadMfs","stats","stat","nextRootCid","cid","toString","err","error","setTimeout","clearTimeout"],"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB;AAEA,MAAMC,GAAG,GAAGD,MAAM,CAAC,kBAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASE,kBAAT,OAA+D;AAAA,MAAlC;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,OAAO,GAAG;AAA5B,GAAkC;AACpEA,EAAAA,OAAO,CAACC,QAAR,GAAmBD,OAAO,CAACC,QAAR,IAAoB,KAAK,IAA5C;;AAEA,MAAI,CAACD,OAAO,CAACE,OAAb,EAAsB;AACpBN,IAAAA,GAAG,CAAC,sBAAD,CAAH;;AACA,UAAMO,IAAI,GAAG,YAAY,CAAE,CAA3B;;AACA,WAAO;AAAEC,MAAAA,KAAK,EAAED,IAAT;AAAeE,MAAAA,IAAI,EAAEF;AAArB,KAAP;AACD;;AAED,MAAIG,OAAO,GAAG,EAAd;AACA;;AACA,MAAIC,SAAJ;;AAEA,QAAMC,UAAU,GAAG,YAAY;AAC7B,QAAI;AACF,YAAMC,KAAK,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,GAAX,CAApB;AACA,YAAMC,WAAW,GAAGF,KAAK,CAACG,GAAN,CAAUC,QAAV,EAApB;;AAEA,UAAIP,OAAO,KAAKK,WAAhB,EAA6B;AAC3Bf,QAAAA,GAAG,CAAE,+BAA8BU,OAAQ,OAAMG,KAAK,CAACG,GAAI,EAAxD,CAAH;AACA,cAAMd,OAAO,CAACW,KAAK,CAACG,GAAP,CAAb;AACAN,QAAAA,OAAO,GAAGK,WAAV;AACD;AACF,KATD,CASE;AAAO;AAAmBG,IAAAA,GAA1B,EAA+B;AAC/BlB,MAAAA,GAAG,CAACmB,KAAJ,CAAU,4BAAV,EAAwCD,GAAxC;AACD,KAXD,SAWU;AACRP,MAAAA,SAAS,GAAGS,UAAU,CAACR,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;AACD;AACF,GAfD;;AAiBA,SAAO;AACL;AACJ;AACA;AACI,UAAMG,KAAN,GAAe;AACb,YAAMK,KAAK,GAAG,MAAMV,KAAK,CAACW,IAAN,CAAW,GAAX,CAApB;AACAJ,MAAAA,OAAO,GAAGG,KAAK,CAACG,GAAN,CAAUC,QAAV,EAAV;AACAjB,MAAAA,GAAG,CAAE,uBAAsBa,KAAK,CAACG,GAAI,EAAlC,CAAH;AACAL,MAAAA,SAAS,GAAGS,UAAU,CAACR,UAAD,EAAaR,OAAO,CAACC,QAArB,CAAtB;AACD,KATI;;AAUL;AACJ;AACA;AACII,IAAAA,IAAI,GAAI;AACNY,MAAAA,YAAY,CAACV,SAAD,CAAZ;AACD;;AAfI,GAAP;AAiBD","sourcesContent":["import { logger } from '@libp2p/logger'\n\nconst log = logger('ipfs:mfs-preload')\n\n/**\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./types').PreloadOptions} PreloadOptions\n */\n\n/**\n * @param {object} config\n * @param {import('./types').Preload} config.preload\n * @param {import('ipfs-core-types/src/files').API} config.files\n * @param {Options} [config.options]\n */\nexport function createMfsPreloader ({ preload, files, options = {} }) {\n  options.interval = options.interval || 30 * 1000\n\n  if (!options.enabled) {\n    log('MFS preload disabled')\n    const noop = async () => {}\n    return { start: noop, stop: noop }\n  }\n\n  let rootCid = ''\n  /** @type {any} */\n  let timeoutId\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/')\n      const nextRootCid = stats.cid.toString()\n\n      if (rootCid !== nextRootCid) {\n        log(`preloading updated MFS root ${rootCid} -> ${stats.cid}`)\n        await preload(stats.cid)\n        rootCid = nextRootCid\n      }\n    } catch (/** @type {any} */ err) {\n      log.error('failed to preload MFS root', err)\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    }\n  }\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start () {\n      const stats = await files.stat('/')\n      rootCid = stats.cid.toString()\n      log(`monitoring MFS root ${stats.cid}`)\n      timeoutId = setTimeout(preloadMfs, options.interval)\n    },\n    /**\n     * @returns {void}\n     */\n    stop () {\n      clearTimeout(timeoutId)\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}