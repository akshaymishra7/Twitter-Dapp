{"ast":null,"code":"import { bufferToRecordKey } from '../../utils.js';\nimport { CodeError } from '@libp2p/interfaces/errors';\nimport { verifyRecord } from '@libp2p/record/validators';\nimport { logger } from '@libp2p/logger';\nexport class PutValueHandler {\n  constructor(components, init) {\n    const {\n      validators\n    } = init;\n    this.components = components;\n    this.log = logger('libp2p:kad-dht:rpc:handlers:put-value');\n    this.validators = validators;\n  }\n\n  async handle(peerId, msg) {\n    const key = msg.key;\n    this.log('%p asked us to store value for key %b', peerId, key);\n    const record = msg.record;\n\n    if (record == null) {\n      const errMsg = `Empty record from: ${peerId.toString()}`;\n      this.log.error(errMsg);\n      throw new CodeError(errMsg, 'ERR_EMPTY_RECORD');\n    }\n\n    try {\n      await verifyRecord(this.validators, record);\n      record.timeReceived = new Date();\n      const recordKey = bufferToRecordKey(record.key);\n      await this.components.datastore.put(recordKey, record.serialize().subarray());\n      this.log('put record for %b into datastore under key %k', key, recordKey);\n    } catch (err) {\n      this.log('did not put record for key %b into datastore %o', key, err);\n    }\n\n    return msg;\n  }\n\n}","map":{"version":3,"mappings":"AAAA,SAASA,iBAAT,QAAkC,gBAAlC;AACA,SAASC,SAAT,QAA0B,2BAA1B;AACA,SAASC,YAAT,QAA6B,2BAA7B;AACA,SAAiBC,MAAjB,QAA+B,gBAA/B;AAeA,OAAM,MAAOC,eAAP,CAAsB;AAK1BC,cAAaC,UAAb,EAAoDC,IAApD,EAA6E;AAC3E,UAAM;AAAEC;AAAF,QAAiBD,IAAvB;AAEA,SAAKD,UAAL,GAAkBA,UAAlB;AACA,SAAKG,GAAL,GAAWN,MAAM,CAAC,uCAAD,CAAjB;AACA,SAAKK,UAAL,GAAkBA,UAAlB;AACD;;AAEW,QAANE,MAAM,CAAEC,MAAF,EAAkBC,GAAlB,EAA8B;AACxC,UAAMC,GAAG,GAAGD,GAAG,CAACC,GAAhB;AACA,SAAKJ,GAAL,CAAS,uCAAT,EAAkDE,MAAlD,EAA0DE,GAA1D;AAEA,UAAMC,MAAM,GAAGF,GAAG,CAACE,MAAnB;;AAEA,QAAIA,MAAM,IAAI,IAAd,EAAoB;AAClB,YAAMC,MAAM,GAAG,sBAAsBJ,MAAM,CAACK,QAAP,EAAiB,EAAtD;AAEA,WAAKP,GAAL,CAASQ,KAAT,CAAeF,MAAf;AACA,YAAM,IAAId,SAAJ,CAAcc,MAAd,EAAsB,kBAAtB,CAAN;AACD;;AAED,QAAI;AACF,YAAMb,YAAY,CAAC,KAAKM,UAAN,EAAkBM,MAAlB,CAAlB;AAEAA,YAAM,CAACI,YAAP,GAAsB,IAAIC,IAAJ,EAAtB;AACA,YAAMC,SAAS,GAAGpB,iBAAiB,CAACc,MAAM,CAACD,GAAR,CAAnC;AACA,YAAM,KAAKP,UAAL,CAAgBe,SAAhB,CAA0BC,GAA1B,CAA8BF,SAA9B,EAAyCN,MAAM,CAACS,SAAP,GAAmBC,QAAnB,EAAzC,CAAN;AACA,WAAKf,GAAL,CAAS,+CAAT,EAA0DI,GAA1D,EAA+DO,SAA/D;AACD,KAPD,CAOE,OAAOK,GAAP,EAAiB;AACjB,WAAKhB,GAAL,CAAS,iDAAT,EAA4DI,GAA5D,EAAiEY,GAAjE;AACD;;AAED,WAAOb,GAAP;AACD;;AAtCyB","names":["bufferToRecordKey","CodeError","verifyRecord","logger","PutValueHandler","constructor","components","init","validators","log","handle","peerId","msg","key","record","errMsg","toString","error","timeReceived","Date","recordKey","datastore","put","serialize","subarray","err"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\kad-dht\\src\\rpc\\handlers\\put-value.ts"],"sourcesContent":["import { bufferToRecordKey } from '../../utils.js'\nimport { CodeError } from '@libp2p/interfaces/errors'\nimport { verifyRecord } from '@libp2p/record/validators'\nimport { Logger, logger } from '@libp2p/logger'\nimport type { DHTMessageHandler } from '../index.js'\nimport type { Validators } from '@libp2p/interface-dht'\nimport type { PeerId } from '@libp2p/interface-peer-id'\nimport type { Message } from '../../message/index.js'\nimport type { Datastore } from 'interface-datastore'\n\nexport interface PutValueHandlerInit {\n  validators: Validators\n}\n\nexport interface PutValueHandlerComponents {\n  datastore: Datastore\n}\n\nexport class PutValueHandler implements DHTMessageHandler {\n  private readonly log: Logger\n  private readonly components: PutValueHandlerComponents\n  private readonly validators: Validators\n\n  constructor (components: PutValueHandlerComponents, init: PutValueHandlerInit) {\n    const { validators } = init\n\n    this.components = components\n    this.log = logger('libp2p:kad-dht:rpc:handlers:put-value')\n    this.validators = validators\n  }\n\n  async handle (peerId: PeerId, msg: Message): Promise<Message> {\n    const key = msg.key\n    this.log('%p asked us to store value for key %b', peerId, key)\n\n    const record = msg.record\n\n    if (record == null) {\n      const errMsg = `Empty record from: ${peerId.toString()}`\n\n      this.log.error(errMsg)\n      throw new CodeError(errMsg, 'ERR_EMPTY_RECORD')\n    }\n\n    try {\n      await verifyRecord(this.validators, record)\n\n      record.timeReceived = new Date()\n      const recordKey = bufferToRecordKey(record.key)\n      await this.components.datastore.put(recordKey, record.serialize().subarray())\n      this.log('put record for %b into datastore under key %k', key, recordKey)\n    } catch (err: any) {\n      this.log('did not put record for key %b into datastore %o', key, err)\n    }\n\n    return msg\n  }\n}\n"]},"metadata":{},"sourceType":"module"}