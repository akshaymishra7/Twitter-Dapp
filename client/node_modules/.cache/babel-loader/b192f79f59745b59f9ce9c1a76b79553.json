{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Akshay Mishra\\\\OneDrive\\\\Desktop\\\\twitter-clone-dapp\\\\client\\\\src\\\\TweetBox.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./TweetBox.css\";\nimport Avatar from 'avataaars';\nimport { generateRandomAvatarOptions } from './avatar';\nimport { Button } from \"@material-ui/core\";\nimport axios from 'axios';\nimport { TwitterContractAddress } from './config.js';\nimport { ethers } from 'ethers';\nimport Twitter from './utils/TwitterContract.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TweetBox() {\n  _s();\n\n  const [tweetMessage, setTweetMessage] = useState(\"\");\n  const [tweetImage, setTweetImage] = useState(\"\");\n  const [avatarOptions, setAvatarOptions] = useState(\"\");\n  const [fileImg, setFileImg] = useState(null);\n\n  const sendFileToIPFS = async e => {\n    if (fileImg) {\n      try {\n        const formData = new FormData();\n        formData.append(\"file\", fileImg);\n        const resFile = await axios({\n          method: \"post\",\n          url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\n          data: formData,\n          headers: {\n            'pinata_api_key': \"032fadb5685011c464e639\",\n            'pinata_secret_api_key': \"84be0ad6271d186aebcc2698933ce06953bd5b7b59233284eb439b2c95fbb46f4a\",\n            \"Content-Type\": \"multipart/form-data\"\n          }\n        });\n        const ImgHash = `ipfs://${resFile.data.IpfsHash}`;\n        console.log(ImgHash); //Take a look at your Pinata Pinned section, you will see a new file added to you list.   \n      } catch (error) {\n        console.log(\"Error sending File to IPFS: \");\n        console.log(error);\n      }\n    }\n  };\n\n  const addTweet = async () => {\n    let tweet = {\n      'tweetText': tweetMessage,\n      'isDeleted': false\n    };\n\n    try {\n      const {\n        ethereum\n      } = window;\n\n      if (ethereum) {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const TwitterContract = new ethers.Contract(TwitterContractAddress, Twitter.abi, signer);\n        let twitterTx = await TwitterContract.addTweet(tweet.tweetText, tweet.isDeleted);\n        console.log(twitterTx);\n      } else {\n        console.log(\"Ethereum object doesn't exist!\");\n      }\n    } catch (error) {\n      console.log(\"Error submitting new Tweet\", error);\n    }\n  };\n\n  const sendTweet = e => {\n    e.preventDefault();\n    addTweet();\n    setTweetMessage(\"\");\n    setTweetImage(\"\");\n  }; // Similar to componentDidMount and componentDidUpdate:\n\n\n  useEffect(() => {\n    let avatar = generateRandomAvatarOptions();\n    setAvatarOptions(avatar);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"tweetBox\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tweetBox__input\",\n        children: [/*#__PURE__*/_jsxDEV(Avatar, {\n          style: {\n            width: '100px',\n            height: '100px'\n          },\n          avatarStyle: \"Circle\",\n          ...avatarOptions\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          onChange: e => setTweetMessage(e.target.value),\n          value: tweetMessage,\n          placeholder: \"What's happening?\",\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        value: tweetImage,\n        onChange: e => setTweetImage(e.target.value),\n        className: \"tweetBox__imageInput\",\n        placeholder: \"Optional: Enter image URL\",\n        type: \"text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        onClick: sendTweet,\n        type: \"submit\",\n        className: \"tweetBox__tweetButton\",\n        children: \"Tweet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: sendFileToIPFS,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: e => setFileImg(e.target.files[0]),\n        required: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \"Mint NFT\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TweetBox, \"MvY1iHHxIKmkS8gDfY5kc8nN/d0=\");\n\n_c = TweetBox;\nexport default TweetBox;\n\nvar _c;\n\n$RefreshReg$(_c, \"TweetBox\");","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/client/src/TweetBox.jsx"],"names":["React","useState","useEffect","Avatar","generateRandomAvatarOptions","Button","axios","TwitterContractAddress","ethers","Twitter","TweetBox","tweetMessage","setTweetMessage","tweetImage","setTweetImage","avatarOptions","setAvatarOptions","fileImg","setFileImg","sendFileToIPFS","e","formData","FormData","append","resFile","method","url","data","headers","ImgHash","IpfsHash","console","log","error","addTweet","tweet","ethereum","window","provider","providers","Web3Provider","signer","getSigner","TwitterContract","Contract","abi","twitterTx","tweetText","isDeleted","sendTweet","preventDefault","avatar","width","height","target","value","files"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA2BC,SAA3B,QAA4C,OAA5C;AACA,OAAO,gBAAP;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,SAASC,2BAAT,QAA4C,UAA5C;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,sBAAT,QAAuC,aAAvC;AACA,SAAQC,MAAR,QAAqB,QAArB;AACA,OAAOC,OAAP,MAAoB,8BAApB;;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAClB,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACY,UAAD,EAAaC,aAAb,IAA8Bb,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD;AACA,QAAM,CAACgB,OAAD,EAAUC,UAAV,IAAwBjB,QAAQ,CAAC,IAAD,CAAtC;;AAEA,QAAMkB,cAAc,GAAG,MAAOC,CAAP,IAAa;AAElC,QAAIH,OAAJ,EAAa;AACT,UAAI;AAEA,cAAMI,QAAQ,GAAG,IAAIC,QAAJ,EAAjB;AACAD,QAAAA,QAAQ,CAACE,MAAT,CAAgB,MAAhB,EAAwBN,OAAxB;AAEA,cAAMO,OAAO,GAAG,MAAMlB,KAAK,CAAC;AACxBmB,UAAAA,MAAM,EAAE,MADgB;AAExBC,UAAAA,GAAG,EAAE,gDAFmB;AAGxBC,UAAAA,IAAI,EAAEN,QAHkB;AAIxBO,UAAAA,OAAO,EAAE;AACL,8BAAkB,wBADb;AAEL,qCAAyB,oEAFpB;AAGL,4BAAgB;AAHX;AAJe,SAAD,CAA3B;AAWA,cAAMC,OAAO,GAAI,UAASL,OAAO,CAACG,IAAR,CAAaG,QAAS,EAAhD;AACHC,QAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAjBG,CAkBZ;AAIS,OAtBD,CAsBE,OAAOI,KAAP,EAAc;AACZF,QAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAD,QAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ;AACH;AACJ;AACJ,GA9BC;;AAgCA,QAAMC,QAAQ,GAAG,YAAY;AAC3B,QAAIC,KAAK,GAAG;AACV,mBAAaxB,YADH;AAEV,mBAAa;AAFH,KAAZ;;AAKA,QAAI;AACF,YAAM;AAACyB,QAAAA;AAAD,UAAaC,MAAnB;;AAEA,UAAGD,QAAH,EAAa;AACX,cAAME,QAAQ,GAAG,IAAI9B,MAAM,CAAC+B,SAAP,CAAiBC,YAArB,CAAkCJ,QAAlC,CAAjB;AACA,cAAMK,MAAM,GAAGH,QAAQ,CAACI,SAAT,EAAf;AACA,cAAMC,eAAe,GAAG,IAAInC,MAAM,CAACoC,QAAX,CACtBrC,sBADsB,EAEtBE,OAAO,CAACoC,GAFc,EAGtBJ,MAHsB,CAAxB;AAMA,YAAIK,SAAS,GAAG,MAAMH,eAAe,CAACT,QAAhB,CAAyBC,KAAK,CAACY,SAA/B,EAA0CZ,KAAK,CAACa,SAAhD,CAAtB;AAEAjB,QAAAA,OAAO,CAACC,GAAR,CAAYc,SAAZ;AACD,OAZD,MAYO;AACLf,QAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ;AACD;AACF,KAlBD,CAkBE,OAAMC,KAAN,EAAa;AACbF,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EAA0CC,KAA1C;AACD;AACF,GA3BD;;AA6BA,QAAMgB,SAAS,GAAI7B,CAAD,IAAO;AACvBA,IAAAA,CAAC,CAAC8B,cAAF;AAEAhB,IAAAA,QAAQ;AAERtB,IAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAPD,CAnEkB,CA4ElB;;;AACAZ,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiD,MAAM,GAAG/C,2BAA2B,EAAxC;AACAY,IAAAA,gBAAgB,CAACmC,MAAD,CAAhB;AACD,GAHQ,EAGN,EAHM,CAAT;AAKA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAA,gCACE,QAAC,MAAD;AACE,UAAA,KAAK,EAAE;AAAEC,YAAAA,KAAK,EAAE,OAAT;AAAkBC,YAAAA,MAAM,EAAE;AAA1B,WADT;AAEE,UAAA,WAAW,EAAC,QAFd;AAAA,aAGMtC;AAHN;AAAA;AAAA;AAAA;AAAA,gBADF,eAME;AACE,UAAA,QAAQ,EAAGK,CAAD,IAAOR,eAAe,CAACQ,CAAC,CAACkC,MAAF,CAASC,KAAV,CADlC;AAEE,UAAA,KAAK,EAAE5C,YAFT;AAGE,UAAA,WAAW,EAAC,mBAHd;AAIE,UAAA,IAAI,EAAC;AAJP;AAAA;AAAA;AAAA;AAAA,gBANF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAcE;AACE,QAAA,KAAK,EAAEE,UADT;AAEE,QAAA,QAAQ,EAAGO,CAAD,IAAON,aAAa,CAACM,CAAC,CAACkC,MAAF,CAASC,KAAV,CAFhC;AAGE,QAAA,SAAS,EAAC,sBAHZ;AAIE,QAAA,WAAW,EAAC,2BAJd;AAKE,QAAA,IAAI,EAAC;AALP;AAAA;AAAA;AAAA;AAAA,cAdF,eAsBE,QAAC,MAAD;AACE,QAAA,OAAO,EAAEN,SADX;AAEE,QAAA,IAAI,EAAC,QAFP;AAGE,QAAA,SAAS,EAAC,uBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eA+BE;AAAM,MAAA,QAAQ,EAAE9B,cAAhB;AAAA,8BACN;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,QAAQ,EAAGC,CAAD,IAAMF,UAAU,CAACE,CAAC,CAACkC,MAAF,CAASE,KAAT,CAAe,CAAf,CAAD,CAA7C;AAAkE,QAAA,QAAQ;AAA1E;AAAA;AAAA;AAAA;AAAA,cADM,eAEN;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFM;AAAA;AAAA;AAAA;AAAA;AAAA,YA/BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsCD;;GAxHQ9C,Q;;KAAAA,Q;AA0HT,eAAeA,QAAf","sourcesContent":["import React, { useState , useEffect } from \"react\";\r\nimport \"./TweetBox.css\";\r\nimport Avatar from 'avataaars';\r\nimport { generateRandomAvatarOptions } from './avatar';\r\nimport { Button } from \"@material-ui/core\";\r\nimport axios from 'axios';\r\nimport { TwitterContractAddress } from './config.js';\r\nimport {ethers} from 'ethers';\r\nimport Twitter from './utils/TwitterContract.json'\r\n\r\nfunction TweetBox() {\r\n  const [tweetMessage, setTweetMessage] = useState(\"\");\r\n  const [tweetImage, setTweetImage] = useState(\"\");\r\n  const [avatarOptions, setAvatarOptions] = useState(\"\");\r\n  const [fileImg, setFileImg] = useState(null);\r\n  \r\n  const sendFileToIPFS = async (e) => {\r\n\r\n    if (fileImg) {\r\n        try {\r\n\r\n            const formData = new FormData();\r\n            formData.append(\"file\", fileImg);\r\n\r\n            const resFile = await axios({\r\n                method: \"post\",\r\n                url: \"https://api.pinata.cloud/pinning/pinFileToIPFS\",\r\n                data: formData,\r\n                headers: {\r\n                    'pinata_api_key': \"032fadb5685011c464e639\",\r\n                    'pinata_secret_api_key': \"84be0ad6271d186aebcc2698933ce06953bd5b7b59233284eb439b2c95fbb46f4a\",\r\n                    \"Content-Type\": \"multipart/form-data\"\r\n                },\r\n            });\r\n\r\n            const ImgHash = `ipfs://${resFile.data.IpfsHash}`;\r\n         console.log(ImgHash); \r\n//Take a look at your Pinata Pinned section, you will see a new file added to you list.   \r\n\r\n\r\n\r\n        } catch (error) {\r\n            console.log(\"Error sending File to IPFS: \")\r\n            console.log(error)\r\n        }\r\n    }\r\n}\r\n\r\n  const addTweet = async () => {\r\n    let tweet = {\r\n      'tweetText': tweetMessage,\r\n      'isDeleted': false\r\n    };\r\n\r\n    try {\r\n      const {ethereum} = window\r\n\r\n      if(ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const TwitterContract = new ethers.Contract(\r\n          TwitterContractAddress,\r\n          Twitter.abi,\r\n          signer\r\n        )\r\n\r\n        let twitterTx = await TwitterContract.addTweet(tweet.tweetText, tweet.isDeleted);\r\n\r\n        console.log(twitterTx);\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist!\");\r\n      }\r\n    } catch(error) {\r\n      console.log(\"Error submitting new Tweet\", error);\r\n    }\r\n  }\r\n\r\n  const sendTweet = (e) => {\r\n    e.preventDefault();\r\n\r\n    addTweet();\r\n\r\n    setTweetMessage(\"\");\r\n    setTweetImage(\"\");\r\n  };\r\n\r\n  // Similar to componentDidMount and componentDidUpdate:\r\n  useEffect(() => {\r\n    let avatar = generateRandomAvatarOptions();\r\n    setAvatarOptions(avatar);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"tweetBox\">\r\n      <form>\r\n        <div className=\"tweetBox__input\">\r\n          <Avatar\r\n            style={{ width: '100px', height: '100px' }}\r\n            avatarStyle='Circle'\r\n            {...avatarOptions }\r\n          />\r\n          <input\r\n            onChange={(e) => setTweetMessage(e.target.value)}\r\n            value={tweetMessage}\r\n            placeholder=\"What's happening?\"\r\n            type=\"text\"\r\n          />\r\n        </div>\r\n        <input\r\n          value={tweetImage}\r\n          onChange={(e) => setTweetImage(e.target.value)}\r\n          className=\"tweetBox__imageInput\"\r\n          placeholder=\"Optional: Enter image URL\"\r\n          type=\"text\"\r\n        />\r\n\r\n        <Button\r\n          onClick={sendTweet}\r\n          type=\"submit\"\r\n          className=\"tweetBox__tweetButton\"\r\n        >\r\n          Tweet\r\n        </Button>\r\n      </form>\r\n      <form onSubmit={sendFileToIPFS}>\r\n<input type=\"file\" onChange={(e) =>setFileImg(e.target.files[0])} required />\r\n<button type='submit' >Mint NFT</button>            \r\n</form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TweetBox;\r\n"]},"metadata":{},"sourceType":"module"}