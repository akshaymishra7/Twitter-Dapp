{"ast":null,"code":"import { logger } from '@libp2p/logger';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { loadMfsRoot } from '../files/utils/with-mfs-root.js';\nconst log = logger('ipfs:repo:gc');\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\n\nexport function createGc(_ref) {\n  let {\n    repo,\n    hashers\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"gc\"]}\n   */\n  async function* gc() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const start = Date.now();\n    let mfsRootCid;\n\n    try {\n      mfsRootCid = await loadMfsRoot({\n        repo,\n        hashers\n      }, options); // temporarily pin mfs root\n\n      await repo.pins.pinRecursively(mfsRootCid);\n      yield* repo.gc();\n    } finally {\n      // gc complete, unpin mfs root\n      if (mfsRootCid) {\n        await repo.pins.unpin(mfsRootCid);\n      }\n    }\n\n    log(`Complete (${Date.now() - start}ms)`);\n  }\n\n  return withTimeoutOption(gc);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/repo/gc.js"],"names":["logger","withTimeoutOption","loadMfsRoot","log","createGc","repo","hashers","gc","options","start","Date","now","mfsRootCid","pins","pinRecursively","unpin"],"mappings":"AAAA,SAASA,MAAT,QAAuB,gBAAvB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AACA,SAASC,WAAT,QAA4B,iCAA5B;AAEA,MAAMC,GAAG,GAAGH,MAAM,CAAC,cAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,QAAT,OAAsC;AAAA,MAAnB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAmB;;AAC3C;AACF;AACA;AACE,kBAAiBC,EAAjB,GAAmC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACjC,UAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,EAAd;AACA,QAAIC,UAAJ;;AAEA,QAAI;AACFA,MAAAA,UAAU,GAAG,MAAMV,WAAW,CAAC;AAC7BG,QAAAA,IAD6B;AAE7BC,QAAAA;AAF6B,OAAD,EAG3BE,OAH2B,CAA9B,CADE,CAMF;;AACA,YAAMH,IAAI,CAACQ,IAAL,CAAUC,cAAV,CAAyBF,UAAzB,CAAN;AAEA,aAAQP,IAAI,CAACE,EAAL,EAAR;AACD,KAVD,SAUU;AACR;AACA,UAAIK,UAAJ,EAAgB;AACd,cAAMP,IAAI,CAACQ,IAAL,CAAUE,KAAV,CAAgBH,UAAhB,CAAN;AACD;AACF;;AAEDT,IAAAA,GAAG,CAAE,aAAYO,IAAI,CAACC,GAAL,KAAaF,KAAM,KAAjC,CAAH;AACD;;AAED,SAAOR,iBAAiB,CAACM,EAAD,CAAxB;AACD","sourcesContent":["import { logger } from '@libp2p/logger'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { loadMfsRoot } from '../files/utils/with-mfs-root.js'\n\nconst log = logger('ipfs:repo:gc')\n\n/**\n * @typedef {import('ipfs-core-types/src/pin').API} PinAPI\n * @typedef {import('ipfs-core-types/src/refs').API} RefsAPI\n * @typedef {import('ipfs-repo').IPFSRepo} IPFSRepo\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('ipfs-core-utils/multihashes').Multihashes} Multihashes\n */\n\n/**\n * Perform mark and sweep garbage collection\n *\n * @param {object} config\n * @param {IPFSRepo} config.repo\n * @param {Multihashes} config.hashers\n */\nexport function createGc ({ repo, hashers }) {\n  /**\n   * @type {import('ipfs-core-types/src/repo').API<{}>[\"gc\"]}\n   */\n  async function * gc (options = {}) {\n    const start = Date.now()\n    let mfsRootCid\n\n    try {\n      mfsRootCid = await loadMfsRoot({\n        repo,\n        hashers\n      }, options)\n\n      // temporarily pin mfs root\n      await repo.pins.pinRecursively(mfsRootCid)\n\n      yield * repo.gc()\n    } finally {\n      // gc complete, unpin mfs root\n      if (mfsRootCid) {\n        await repo.pins.unpin(mfsRootCid)\n      }\n    }\n\n    log(`Complete (${Date.now() - start}ms)`)\n  }\n\n  return withTimeoutOption(gc)\n}\n"]},"metadata":{},"sourceType":"module"}