{"ast":null,"code":"import mergeOpts from 'merge-options';\nimport { isTest } from 'ipfs-utils/src/env.js';\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport * as dagPB from '@ipld/dag-pb';\nimport * as dagCBOR from '@ipld/dag-cbor';\nimport * as dagJSON from '@ipld/dag-json';\nimport * as dagJOSE from 'dag-jose';\nimport { identity } from 'multiformats/hashes/identity';\nimport { bases, hashes, codecs } from 'multiformats/basics';\nimport { initAssets } from 'ipfs-core-config/init-assets';\nimport { AlreadyInitializedError } from '../errors.js';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { TimeoutController } from 'timeout-abort-controller';\nimport { createStart } from './start.js';\nimport { createStop } from './stop.js';\nimport { createDns } from './dns.js';\nimport { createIsOnline } from './is-online.js';\nimport { createResolve } from './resolve.js';\nimport { PinAPI } from './pin/index.js';\nimport { IPNSAPI } from './ipns.js';\nimport { NameAPI } from './name/index.js';\nimport { createRefs } from './refs/index.js';\nimport { createLocal } from './refs/local.js';\nimport { BitswapAPI } from './bitswap/index.js';\nimport { BootstrapAPI } from './bootstrap/index.js';\nimport { BlockAPI } from './block/index.js';\nimport { RootAPI } from './root.js';\nimport { createVersion } from './version.js';\nimport { createId } from './id.js';\nimport { createConfig } from './config/index.js';\nimport { DagAPI } from './dag/index.js';\nimport { createPreloader } from '../preload.js';\nimport { createMfsPreloader } from '../mfs-preload.js';\nimport { createFiles } from './files/index.js';\nimport { KeyAPI } from './key/index.js';\nimport { ObjectAPI } from './object/index.js';\nimport { RepoAPI } from './repo/index.js';\nimport { StatsAPI } from './stats/index.js';\nimport { Storage } from './storage.js';\nimport { Network } from './network.js';\nimport { Service } from '../utils/service.js';\nimport { SwarmAPI } from './swarm/index.js';\nimport { createPing } from './ping.js';\nimport { createDht } from './dht.js';\nimport { createPubsub } from './pubsub.js';\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs';\nimport { Multihashes } from 'ipfs-core-utils/multihashes';\nimport { Multibases } from 'ipfs-core-utils/multibases';\nconst mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\nconst log = logger('ipfs');\nconst IPNS_INIT_KEYSPACE_TIMEOUT = 30000;\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\nclass IPFS {\n  /**\n   * @param {object} config\n   * @param {Print} config.print\n   * @param {Storage} config.storage\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {Options} config.options\n   */\n  constructor(_ref) {\n    let {\n      print,\n      storage,\n      codecs,\n      options\n    } = _ref;\n    const {\n      peerId,\n      repo,\n      keychain\n    } = storage;\n    const network = Service.create(Network);\n    const preload = createPreloader(options.preload);\n    const dns = createDns();\n    const isOnline = createIsOnline({\n      network\n    }); // @ts-expect-error This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n\n    const ipns = new IPNSAPI(options);\n    /** @type {MultihashHasher[]} */\n\n    const multihashHashers = Object.values(hashes);\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher));\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    });\n    /** @type {MultibaseCodec[]} */\n\n    const multibaseCodecs = Object.values(bases);\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base));\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    });\n    const pin = new PinAPI({\n      repo,\n      codecs\n    });\n    const block = new BlockAPI({\n      codecs,\n      hashers: this.hashers,\n      preload,\n      repo\n    });\n    const name = new NameAPI({\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    });\n    const resolve = createResolve({\n      repo,\n      codecs,\n      bases: this.bases,\n      name\n    });\n    const dag = new DagAPI({\n      repo,\n      codecs,\n      hashers: this.hashers,\n      preload\n    });\n    const refs = Object.assign(createRefs({\n      repo,\n      codecs,\n      resolve,\n      preload\n    }), {\n      local: createLocal({\n        repo: storage.repo\n      })\n    });\n    const {\n      add,\n      addAll,\n      cat,\n      get,\n      ls\n    } = new RootAPI({\n      preload,\n      repo,\n      options: options.EXPERIMENTAL,\n      hashers: this.hashers\n    });\n    const files = createFiles({\n      repo,\n      preload,\n      hashers: this.hashers,\n      options\n    });\n    const mfsPreload = createMfsPreloader({\n      files,\n      preload,\n      options: options.preload\n    });\n    this.preload = preload;\n    this.name = name;\n    this.ipns = ipns;\n    this.pin = pin;\n    this.resolve = resolve;\n    this.block = block;\n    this.refs = refs;\n    this.start = createStart({\n      network,\n      peerId,\n      repo,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      hashers: this.hashers,\n      options\n    });\n    this.stop = createStop({\n      network,\n      preload,\n      mfsPreload,\n      ipns,\n      repo\n    });\n    this.dht = createDht({\n      network,\n      repo,\n      peerId\n    });\n    this.pubsub = createPubsub({\n      network,\n      config: options.config\n    });\n    this.dns = dns;\n    this.isOnline = isOnline;\n    this.id = createId({\n      network,\n      peerId\n    });\n    this.version = createVersion({\n      repo\n    });\n    this.bitswap = new BitswapAPI({\n      network\n    });\n    this.bootstrap = new BootstrapAPI({\n      repo\n    });\n    this.config = createConfig({\n      repo\n    });\n    this.ping = createPing({\n      network\n    });\n    this.add = add;\n    this.addAll = addAll;\n    this.cat = cat;\n    this.get = get;\n    this.ls = ls;\n    this.dag = dag;\n    this.files = files;\n    this.key = new KeyAPI({\n      keychain\n    });\n    this.object = new ObjectAPI({\n      preload,\n      codecs,\n      repo\n    });\n    this.repo = new RepoAPI({\n      repo,\n      hashers: this.hashers\n    });\n    this.stats = new StatsAPI({\n      repo,\n      network\n    });\n    this.swarm = new SwarmAPI({\n      network\n    }); // For the backwards compatibility\n\n    Object.defineProperty(this, 'libp2p', {\n      get() {\n        const net = network.try();\n        return net ? net.libp2p : undefined;\n      }\n\n    }); // unimplemented methods\n\n    const notImplemented = () => Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'));\n\n    const notImplementedIter = async function* () {\n      throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED');\n    }; // eslint-disable-line require-yield\n\n\n    this.commands = notImplemented;\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    };\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    };\n    this.mount = notImplemented;\n    this.codecs = codecs;\n  }\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n\n\n  async init() {\n    // eslint-disable-line require-await\n    throw new AlreadyInitializedError();\n  }\n\n}\n/**\n * @param {IPFS} ipfs\n */\n\n\nconst addEmptyDir = async ipfs => {\n  const buf = dagPB.encode({\n    Data: new UnixFS({\n      type: 'directory'\n    }).marshal(),\n    Links: []\n  });\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  });\n  await ipfs.pin.add(cid);\n  return cid;\n};\n/**\n * @returns {Options}\n */\n\n\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest,\n    // preload by default, unless in test env\n    addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https', '/dns4/node2.preload.ipfs.io/https', '/dns4/node3.preload.ipfs.io/https']\n  }\n});\n/**\n * @param {Options} options\n */\n\n\nexport async function create() {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  options = mergeOptions(getDefaultOptions(), options);\n  const initOptions = options.init || {};\n  /**\n   * @type {BlockCodec}\n   */\n\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: id => id,\n    decode: id => id\n  };\n  /** @type {BlockCodec[]} */\n\n  const blockCodecs = Object.values(codecs);\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat(options.ipld && options.ipld.codecs || []).forEach(codec => blockCodecs.push(codec));\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  }); // eslint-disable-next-line no-console\n\n  const print = options.silent ? log : console.log;\n  log('creating repo');\n  const storage = await Storage.start(print, multicodecs, options);\n  log('getting repo config');\n  const config = await storage.repo.config.getAll();\n  const ipfs = new IPFS({\n    storage,\n    print,\n    codecs: multicodecs,\n    options: { ...options,\n      config\n    }\n  });\n  log('starting preload');\n  await ipfs.preload.start();\n  log('starting storage');\n  ipfs.ipns.startOffline(storage);\n\n  if (storage.isNew && !initOptions.emptyRepo) {\n    // add empty unixfs dir object (go-ipfs assumes this exists)\n    const cid = await addEmptyDir(ipfs);\n    log('adding default assets');\n    await initAssets({\n      addAll: ipfs.addAll,\n      print\n    });\n    log('initializing IPNS keyspace');\n\n    if (storage.peerId.publicKey == null) {\n      throw errCode(new Error('Public key missing'), 'ERR_MISSING_PUBLIC_KEY');\n    }\n\n    const timeoutController = new TimeoutController(IPNS_INIT_KEYSPACE_TIMEOUT);\n\n    try {\n      await ipfs.ipns.initializeKeyspace(storage.peerId, uint8ArrayFromString(`/ipfs/${cid}`), {\n        signal: timeoutController.signal\n      });\n    } finally {\n      timeoutController.clear();\n    }\n  }\n\n  if (options.start !== false) {\n    log('starting node');\n    await ipfs.start();\n  }\n\n  return ipfs;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/index.js"],"names":["mergeOpts","isTest","logger","errCode","UnixFS","dagPB","dagCBOR","dagJSON","dagJOSE","identity","bases","hashes","codecs","initAssets","AlreadyInitializedError","fromString","uint8ArrayFromString","TimeoutController","createStart","createStop","createDns","createIsOnline","createResolve","PinAPI","IPNSAPI","NameAPI","createRefs","createLocal","BitswapAPI","BootstrapAPI","BlockAPI","RootAPI","createVersion","createId","createConfig","DagAPI","createPreloader","createMfsPreloader","createFiles","KeyAPI","ObjectAPI","RepoAPI","StatsAPI","Storage","Network","Service","SwarmAPI","createPing","createDht","createPubsub","Multicodecs","Multihashes","Multibases","mergeOptions","bind","ignoreUndefined","log","IPNS_INIT_KEYSPACE_TIMEOUT","IPFS","constructor","print","storage","options","peerId","repo","keychain","network","create","preload","dns","isOnline","ipns","multihashHashers","Object","values","ipld","hashers","forEach","hasher","push","loadHasher","multibaseCodecs","base","loadBase","pin","block","name","resolve","dag","refs","assign","local","add","addAll","cat","get","ls","EXPERIMENTAL","files","mfsPreload","start","stop","dht","pubsub","config","id","version","bitswap","bootstrap","ping","key","object","stats","swarm","defineProperty","net","try","libp2p","undefined","notImplemented","Promise","reject","Error","notImplementedIter","commands","diag","cmds","sys","level","tail","mount","init","addEmptyDir","ipfs","buf","encode","Data","type","marshal","Links","cid","put","mhtype","format","getDefaultOptions","enabled","addresses","initOptions","code","decode","blockCodecs","concat","codec","multicodecs","loadCodec","silent","console","getAll","startOffline","isNew","emptyRepo","publicKey","timeoutController","initializeKeyspace","signal","clear"],"mappings":"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","sourcesContent":["import mergeOpts from 'merge-options'\nimport { isTest } from 'ipfs-utils/src/env.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport * as dagPB from '@ipld/dag-pb'\nimport * as dagCBOR from '@ipld/dag-cbor'\nimport * as dagJSON from '@ipld/dag-json'\nimport * as dagJOSE from 'dag-jose'\nimport { identity } from 'multiformats/hashes/identity'\nimport { bases, hashes, codecs } from 'multiformats/basics'\nimport { initAssets } from 'ipfs-core-config/init-assets'\nimport { AlreadyInitializedError } from '../errors.js'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { TimeoutController } from 'timeout-abort-controller'\nimport { createStart } from './start.js'\n\nimport { createStop } from './stop.js'\nimport { createDns } from './dns.js'\nimport { createIsOnline } from './is-online.js'\nimport { createResolve } from './resolve.js'\nimport { PinAPI } from './pin/index.js'\nimport { IPNSAPI } from './ipns.js'\nimport { NameAPI } from './name/index.js'\nimport { createRefs } from './refs/index.js'\nimport { createLocal } from './refs/local.js'\nimport { BitswapAPI } from './bitswap/index.js'\nimport { BootstrapAPI } from './bootstrap/index.js'\nimport { BlockAPI } from './block/index.js'\nimport { RootAPI } from './root.js'\nimport { createVersion } from './version.js'\nimport { createId } from './id.js'\nimport { createConfig } from './config/index.js'\nimport { DagAPI } from './dag/index.js'\nimport { createPreloader } from '../preload.js'\nimport { createMfsPreloader } from '../mfs-preload.js'\nimport { createFiles } from './files/index.js'\nimport { KeyAPI } from './key/index.js'\nimport { ObjectAPI } from './object/index.js'\nimport { RepoAPI } from './repo/index.js'\nimport { StatsAPI } from './stats/index.js'\nimport { Storage } from './storage.js'\nimport { Network } from './network.js'\nimport { Service } from '../utils/service.js'\nimport { SwarmAPI } from './swarm/index.js'\nimport { createPing } from './ping.js'\nimport { createDht } from './dht.js'\nimport { createPubsub } from './pubsub.js'\nimport { Multicodecs } from 'ipfs-core-utils/multicodecs'\nimport { Multihashes } from 'ipfs-core-utils/multihashes'\nimport { Multibases } from 'ipfs-core-utils/multibases'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs')\n\nconst IPNS_INIT_KEYSPACE_TIMEOUT = 30000\n\n/**\n * @typedef {import('../types').Options} Options\n * @typedef {import('../types').Print} Print\n * @typedef {import('./storage')} StorageAPI\n * @typedef {import('multiformats/codecs/interface').BlockCodec<any, any>} BlockCodec\n * @typedef {import('multiformats/hashes/interface').MultihashHasher} MultihashHasher\n * @typedef {import('multiformats/bases/interface').MultibaseCodec<any>} MultibaseCodec\n */\n\nclass IPFS {\n  /**\n   * @param {object} config\n   * @param {Print} config.print\n   * @param {Storage} config.storage\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {Options} config.options\n   */\n  constructor ({ print, storage, codecs, options }) {\n    const { peerId, repo, keychain } = storage\n    const network = Service.create(Network)\n\n    const preload = createPreloader(options.preload)\n\n    const dns = createDns()\n    const isOnline = createIsOnline({ network })\n    // @ts-expect-error This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n    const ipns = new IPNSAPI(options)\n\n    /** @type {MultihashHasher[]} */\n    const multihashHashers = Object.values(hashes);\n\n    (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(hasher => multihashHashers.push(hasher))\n\n    this.hashers = new Multihashes({\n      hashers: multihashHashers,\n      loadHasher: options.ipld && options.ipld.loadHasher\n    })\n\n    /** @type {MultibaseCodec[]} */\n    const multibaseCodecs = Object.values(bases);\n\n    (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(base => multibaseCodecs.push(base))\n\n    this.bases = new Multibases({\n      bases: multibaseCodecs,\n      loadBase: options.ipld && options.ipld.loadBase\n    })\n\n    const pin = new PinAPI({ repo, codecs })\n    const block = new BlockAPI({ codecs, hashers: this.hashers, preload, repo })\n\n    const name = new NameAPI({\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    })\n\n    const resolve = createResolve({ repo, codecs, bases: this.bases, name })\n\n    const dag = new DagAPI({ repo, codecs, hashers: this.hashers, preload })\n    const refs = Object.assign(createRefs({ repo, codecs, resolve, preload }), {\n      local: createLocal({ repo: storage.repo })\n    })\n    const { add, addAll, cat, get, ls } = new RootAPI({\n      preload,\n      repo,\n      options: options.EXPERIMENTAL,\n      hashers: this.hashers\n    })\n\n    const files = createFiles({\n      repo,\n      preload,\n      hashers: this.hashers,\n      options\n    })\n\n    const mfsPreload = createMfsPreloader({\n      files,\n      preload,\n      options: options.preload\n    })\n\n    this.preload = preload\n    this.name = name\n    this.ipns = ipns\n    this.pin = pin\n    this.resolve = resolve\n    this.block = block\n    this.refs = refs\n\n    this.start = createStart({\n      network,\n      peerId,\n      repo,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      hashers: this.hashers,\n      options\n    })\n\n    this.stop = createStop({\n      network,\n      preload,\n      mfsPreload,\n      ipns,\n      repo\n    })\n\n    this.dht = createDht({ network, repo, peerId })\n    this.pubsub = createPubsub({ network, config: options.config })\n    this.dns = dns\n    this.isOnline = isOnline\n    this.id = createId({ network, peerId })\n    this.version = createVersion({ repo })\n    this.bitswap = new BitswapAPI({ network })\n    this.bootstrap = new BootstrapAPI({ repo })\n    this.config = createConfig({ repo })\n    this.ping = createPing({ network })\n\n    this.add = add\n    this.addAll = addAll\n    this.cat = cat\n    this.get = get\n    this.ls = ls\n\n    this.dag = dag\n    this.files = files\n    this.key = new KeyAPI({ keychain })\n    this.object = new ObjectAPI({ preload, codecs, repo })\n    this.repo = new RepoAPI({ repo, hashers: this.hashers })\n    this.stats = new StatsAPI({ repo, network })\n    this.swarm = new SwarmAPI({ network })\n\n    // For the backwards compatibility\n    Object.defineProperty(this, 'libp2p', {\n      get () {\n        const net = network.try()\n        return net ? net.libp2p : undefined\n      }\n    })\n\n    // unimplemented methods\n    const notImplemented = () => Promise.reject(errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED'))\n    const notImplementedIter = async function * () { throw errCode(new Error('Not implemented'), 'ERR_NOT_IMPLEMENTED') } // eslint-disable-line require-yield\n    this.commands = notImplemented\n    this.diag = {\n      cmds: notImplemented,\n      net: notImplemented,\n      sys: notImplemented\n    }\n    this.log = {\n      level: notImplemented,\n      ls: notImplemented,\n      tail: notImplementedIter\n    }\n    this.mount = notImplemented\n\n    this.codecs = codecs\n  }\n\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n  async init () { // eslint-disable-line require-await\n    throw new AlreadyInitializedError()\n  }\n}\n\n/**\n * @param {IPFS} ipfs\n */\nconst addEmptyDir = async (ipfs) => {\n  const buf = dagPB.encode({\n    Data: new UnixFS({ type: 'directory' }).marshal(),\n    Links: []\n  })\n\n  const cid = await ipfs.block.put(buf, {\n    mhtype: 'sha2-256',\n    format: 'dag-pb'\n  })\n\n  await ipfs.pin.add(cid)\n\n  return cid\n}\n\n/**\n * @returns {Options}\n */\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest, // preload by default, unless in test env\n    addresses: [\n      '/dns4/node0.preload.ipfs.io/https',\n      '/dns4/node1.preload.ipfs.io/https',\n      '/dns4/node2.preload.ipfs.io/https',\n      '/dns4/node3.preload.ipfs.io/https'\n    ]\n  }\n})\n\n/**\n * @param {Options} options\n */\nexport async function create (options = {}) {\n  options = mergeOptions(getDefaultOptions(), options)\n  const initOptions = options.init || {}\n\n  /**\n   * @type {BlockCodec}\n   */\n  const id = {\n    name: identity.name,\n    code: identity.code,\n    encode: (id) => id,\n    decode: (id) => id\n  }\n\n  /** @type {BlockCodec[]} */\n  const blockCodecs = Object.values(codecs);\n\n  [dagPB, dagCBOR, dagJSON, dagJOSE, id].concat((options.ipld && options.ipld.codecs) || []).forEach(codec => blockCodecs.push(codec))\n\n  const multicodecs = new Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  })\n\n  // eslint-disable-next-line no-console\n  const print = options.silent ? log : console.log\n\n  log('creating repo')\n  const storage = await Storage.start(print, multicodecs, options)\n\n  log('getting repo config')\n  const config = await storage.repo.config.getAll()\n\n  const ipfs = new IPFS({\n    storage,\n    print,\n    codecs: multicodecs,\n    options: { ...options, config }\n  })\n\n  log('starting preload')\n  await ipfs.preload.start()\n\n  log('starting storage')\n  ipfs.ipns.startOffline(storage)\n\n  if (storage.isNew && !initOptions.emptyRepo) {\n    // add empty unixfs dir object (go-ipfs assumes this exists)\n    const cid = await addEmptyDir(ipfs)\n\n    log('adding default assets')\n    await initAssets({ addAll: ipfs.addAll, print })\n\n    log('initializing IPNS keyspace')\n\n    if (storage.peerId.publicKey == null) {\n      throw errCode(new Error('Public key missing'), 'ERR_MISSING_PUBLIC_KEY')\n    }\n\n    const timeoutController = new TimeoutController(IPNS_INIT_KEYSPACE_TIMEOUT)\n    try {\n      await ipfs.ipns.initializeKeyspace(storage.peerId, uint8ArrayFromString(`/ipfs/${cid}`), {\n        signal: timeoutController.signal\n      })\n    } finally {\n      timeoutController.clear()\n    }\n  }\n\n  if (options.start !== false) {\n    log('starting node')\n    await ipfs.start()\n  }\n\n  return ipfs\n}\n"]},"metadata":{},"sourceType":"module"}