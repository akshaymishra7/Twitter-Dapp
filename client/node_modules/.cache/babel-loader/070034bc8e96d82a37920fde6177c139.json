{"ast":null,"code":"import { WantListEntry as Entry } from './entry.js';\nimport { base58btc } from 'multiformats/bases/base58';\nimport { Message } from '../message/message.js';\nimport { trackedMap } from '@libp2p/tracked-map';\nconst WantType = {\n  Block: Message.Wantlist.WantType.Block,\n  Have: Message.Wantlist.WantType.Have\n};\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\n\nconst sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a);\n    const bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n};\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\n\nexport class Wantlist {\n  /**\n   * @param {import('../stats').Stats} [stats]\n   * @param {import('@libp2p/interface-libp2p').Libp2p} [libp2p]\n   */\n  constructor(stats, libp2p) {\n    /** @type {Map<string, Entry>} */\n    this.set = libp2p ? trackedMap({\n      name: 'ipfs_bitswap_wantlist',\n      metrics: libp2p.metrics\n    }) : new Map();\n    this._stats = stats;\n  }\n\n  get length() {\n    return this.set.size;\n  }\n  /**\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   */\n\n\n  add(cid, priority, wantType) {\n    const cidStr = cid.toString(base58btc);\n    const entry = this.set.get(cidStr);\n\n    if (entry) {\n      entry.inc();\n      entry.priority = priority; // We can only overwrite want-have with want-block\n\n      if (entry.wantType === WantType.Have && wantType === WantType.Block) {\n        entry.wantType = wantType;\n      }\n    } else {\n      this.set.set(cidStr, new Entry(cid, priority, wantType));\n\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', 1);\n      }\n    }\n  }\n  /**\n   * @param {CID} cid\n   */\n\n\n  remove(cid) {\n    const cidStr = cid.toString(base58btc);\n    const entry = this.set.get(cidStr);\n\n    if (!entry) {\n      return;\n    }\n\n    entry.dec(); // only delete when no refs are held\n\n    if (entry.hasRefs()) {\n      return;\n    }\n\n    this.set.delete(cidStr);\n\n    if (this._stats) {\n      this._stats.push(null, 'wantListSize', -1);\n    }\n  }\n  /**\n   * @param {string} cidStr\n   */\n\n\n  removeForce(cidStr) {\n    if (this.set.has(cidStr)) {\n      this.set.delete(cidStr);\n    }\n  }\n  /**\n   * @param {(entry:Entry, key:string) => void} fn\n   */\n\n\n  forEach(fn) {\n    return this.set.forEach(fn);\n  }\n\n  entries() {\n    return this.set.entries();\n  }\n\n  sortedEntries() {\n    // TODO: Figure out if this is an actual bug.\n    // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'\n    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())));\n  }\n  /**\n   * @param {CID} cid\n   */\n\n\n  contains(cid) {\n    const cidStr = cid.toString(base58btc);\n    return this.set.has(cidStr);\n  }\n  /**\n   * @param {CID} cid\n   */\n\n\n  get(cid) {\n    const cidStr = cid.toString(base58btc);\n    return this.set.get(cidStr);\n  }\n\n}\nWantlist.Entry = Entry;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-bitswap/src/wantlist/index.js"],"names":["WantListEntry","Entry","base58btc","Message","trackedMap","WantType","Block","Wantlist","Have","sortBy","fn","list","Array","prototype","slice","call","sort","a","b","aa","bb","constructor","stats","libp2p","set","name","metrics","Map","_stats","length","size","add","cid","priority","wantType","cidStr","toString","entry","get","inc","push","remove","dec","hasRefs","delete","removeForce","has","forEach","entries","sortedEntries","o","key","from","contains"],"mappings":"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","sourcesContent":["\nimport { WantListEntry as Entry } from './entry.js'\nimport { base58btc } from 'multiformats/bases/base58'\nimport { Message } from '../message/message.js'\nimport { trackedMap } from '@libp2p/tracked-map'\n\nconst WantType = {\n  Block: Message.Wantlist.WantType.Block,\n  Have: Message.Wantlist.WantType.Have\n}\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nconst sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a)\n    const bb = fn(b)\n    return aa < bb ? -1 : aa > bb ? 1 : 0\n  })\n}\n\n/**\n * @typedef {import('multiformats').CID} CID\n */\n\nexport class Wantlist {\n  /**\n   * @param {import('../stats').Stats} [stats]\n   * @param {import('@libp2p/interface-libp2p').Libp2p} [libp2p]\n   */\n  constructor (stats, libp2p) {\n    /** @type {Map<string, Entry>} */\n    this.set = libp2p\n      ? trackedMap({\n        name: 'ipfs_bitswap_wantlist',\n        metrics: libp2p.metrics\n      })\n      : new Map()\n    this._stats = stats\n  }\n\n  get length () {\n    return this.set.size\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {number} priority\n   * @param {import('../message/message').Message.Wantlist.WantType} wantType\n   */\n  add (cid, priority, wantType) {\n    const cidStr = cid.toString(base58btc)\n    const entry = this.set.get(cidStr)\n\n    if (entry) {\n      entry.inc()\n      entry.priority = priority\n\n      // We can only overwrite want-have with want-block\n      if (entry.wantType === WantType.Have && wantType === WantType.Block) {\n        entry.wantType = wantType\n      }\n    } else {\n      this.set.set(cidStr, new Entry(cid, priority, wantType))\n      if (this._stats) {\n        this._stats.push(null, 'wantListSize', 1)\n      }\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  remove (cid) {\n    const cidStr = cid.toString(base58btc)\n    const entry = this.set.get(cidStr)\n\n    if (!entry) {\n      return\n    }\n\n    entry.dec()\n\n    // only delete when no refs are held\n    if (entry.hasRefs()) {\n      return\n    }\n\n    this.set.delete(cidStr)\n    if (this._stats) {\n      this._stats.push(null, 'wantListSize', -1)\n    }\n  }\n\n  /**\n   * @param {string} cidStr\n   */\n  removeForce (cidStr) {\n    if (this.set.has(cidStr)) {\n      this.set.delete(cidStr)\n    }\n  }\n\n  /**\n   * @param {(entry:Entry, key:string) => void} fn\n   */\n  forEach (fn) {\n    return this.set.forEach(fn)\n  }\n\n  entries () {\n    return this.set.entries()\n  }\n\n  sortedEntries () {\n    // TODO: Figure out if this is an actual bug.\n    // @ts-expect-error - Property 'key' does not exist on type 'WantListEntry'\n    return new Map(sortBy(o => o[1].key, Array.from(this.set.entries())))\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  contains (cid) {\n    const cidStr = cid.toString(base58btc)\n    return this.set.has(cidStr)\n  }\n\n  /**\n   * @param {CID} cid\n   */\n  get (cid) {\n    const cidStr = cid.toString(base58btc)\n    return this.set.get(cidStr)\n  }\n}\n\nWantlist.Entry = Entry\n"]},"metadata":{},"sourceType":"module"}