{"ast":null,"code":"export { decodeMessage } from './decode.js';\nexport { encodeMessage } from './encode.js';\nexport { enumeration } from './codecs/enum.js';\nexport { message } from './codecs/message.js';\nexport { reader, writer } from './utils.js';","map":{"version":3,"mappings":"AAUA,SACEA,aADF,QAEO,aAFP;AAIA,SACEC,aADF,QAEO,aAFP;AAIA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,qBAAxB;AACA,SAASC,MAAT,EAAiBC,MAAjB,QAA+B,YAA/B","names":["decodeMessage","encodeMessage","enumeration","message","reader","writer"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\node_modules\\protons-runtime\\src\\index.ts"],"sourcesContent":["import type { Codec } from './codec.js'\n\nexport interface FieldDef {\n  name: string\n  codec: Codec<any>\n  optional?: true\n  repeats?: true\n  packed?: true\n}\n\nexport {\n  decodeMessage\n} from './decode.js'\n\nexport {\n  encodeMessage\n} from './encode.js'\n\nexport { enumeration } from './codecs/enum.js'\nexport { message } from './codecs/message.js'\nexport { reader, writer } from './utils.js'\nexport type { Codec, EncodeOptions } from './codec.js'\n\nexport interface Writer {\n  /**\n   * Current length\n   */\n  len: number\n\n  /**\n   * Writes an unsigned 32 bit value as a varint\n   */\n  uint32: (value: number) => Writer\n\n  /**\n   * Writes a signed 32 bit value as a varint`\n   */\n  int32: (value: number) => Writer\n\n  /**\n   * Writes a 32 bit value as a varint, zig-zag encoded\n   */\n  sint32: (value: number) => Writer\n\n  /**\n   * Writes an unsigned 64 bit value as a varint\n   */\n  uint64: (value: bigint) => Writer\n\n  /**\n   * Writes a signed 64 bit value as a varint\n   */\n  int64: (value: bigint) => Writer\n\n  /**\n   * Writes a signed 64 bit value as a varint, zig-zag encoded\n   */\n  sint64: (value: bigint) => Writer\n\n  /**\n   * Writes a boolish value as a varint\n   */\n  bool: (value: boolean) => Writer\n\n  /**\n   * Writes an unsigned 32 bit value as fixed 32 bits\n   */\n  fixed32: (value: number) => Writer\n\n  /**\n   * Writes a signed 32 bit value as fixed 32 bits\n   */\n  sfixed32: (value: number) => Writer\n\n  /**\n   * Writes an unsigned 64 bit value as fixed 64 bits\n   */\n  fixed64: (value: bigint) => Writer\n\n  /**\n   * Writes a signed 64 bit value as fixed 64 bits\n   */\n  sfixed64: (value: bigint) => Writer\n\n  /**\n   * Writes a float (32 bit)\n   */\n  float: (value: number) => Writer\n\n  /**\n   * Writes a double (64 bit float)\n   */\n  double: (value: number) => Writer\n\n  /**\n   * Writes a sequence of bytes\n   */\n  bytes: (value: Uint8Array) => Writer\n\n  /**\n   * Writes a string\n   */\n  string: (value: string) => Writer\n\n  /**\n   * Forks this writer's state by pushing it to a stack.\n   * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n   */\n  fork: () => Writer\n\n  /**\n   * Resets this instance to the last state.\n   */\n  reset: () => Writer\n\n  /**\n   * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n   */\n  ldelim: () => Writer\n\n  /**\n   * Finishes the write operation\n   */\n  finish: () => Uint8Array\n}\n\nexport interface Reader {\n  /**\n   * Read buffer\n   */\n  buf: Uint8Array\n\n  /**\n   * Read buffer position\n   */\n  pos: number\n\n  /**\n   * Read buffer length\n   */\n  len: number\n\n  /**\n   * Reads a varint as an unsigned 32 bit value\n   */\n  uint32: () => number\n\n  /**\n   * Reads a varint as a signed 32 bit value\n   */\n  int32: () => number\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 32 bit value\n   */\n  sint32: () => number\n\n  /**\n   * Reads a varint as a boolean\n   */\n  bool: () => boolean\n\n  /**\n   * Reads fixed 32 bits as an unsigned 32 bit integer\n   */\n  fixed32: () => number\n\n  /**\n   * Reads fixed 32 bits as a signed 32 bit integer\n   */\n  sfixed32: () => number\n\n  /**\n   * Reads a float (32 bit) as a number\n   */\n  float: () => number\n\n  /**\n   * Reads a double (64 bit float) as a number\n   */\n  double: () => number\n\n  /**\n   * Reads a sequence of bytes preceded by its length as a varint\n   */\n  bytes: () => Uint8Array\n\n  /**\n   * Reads a string preceded by its byte length as a varint\n   */\n  string: () => string\n\n  /**\n   * Skips the specified number of bytes if specified, otherwise skips a varints`\n   */\n  skip: (length?: number) => void\n\n  /**\n   * Skips the next element of the specified wire type\n   */\n  skipType: (wireType: number) => void\n\n  /**\n   * Reads a varint as a signed 64 bit value\n   */\n  int64: () => bigint\n\n  /**\n   * Reads a varint as an unsigned 64 bit value\n   */\n  uint64: () => bigint\n\n  /**\n   * Reads a zig-zag encoded varint as a signed 64 bit value\n   */\n  sint64: () => bigint\n\n  /**\n   * Reads fixed 64 bits\n   */\n  fixed64: () => bigint\n\n  /**\n   * Reads zig-zag encoded fixed 64 bits\n   */\n  sfixed64: () => bigint\n}\n"]},"metadata":{},"sourceType":"module"}