{"ast":null,"code":"import last from 'it-last';\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single';\n/**\n * @param {object} context\n * @param {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]} context.addAll\n */\n\nexport function createAdd(_ref) {\n  let {\n    addAll\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"add\"]}\n   */\n  async function add(entry) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // @ts-expect-error TODO: https://github.com/ipfs/js-ipfs/issues/3290\n    const result = await last(addAll(normaliseInput(entry), options)); // Note this should never happen as `addAll` should yield at least one item\n    // but to satisfy type checker we perfom this check and for good measure\n    // throw an error in case it does happen.\n\n    if (result == null) {\n      throw Error('Failed to add a file, if you see this please report a bug');\n    }\n\n    return result;\n  }\n\n  return add;\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/add.js"],"names":["last","normaliseInput","createAdd","addAll","add","entry","options","result","Error"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;AACA,SAASC,cAAT,QAA+B,8CAA/B;AAEA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,OAAgC;AAAA,MAAZ;AAAEC,IAAAA;AAAF,GAAY;;AACrC;AACF;AACA;AACE,iBAAeC,GAAf,CAAoBC,KAApB,EAAyC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACvC;AACA,UAAMC,MAAM,GAAG,MAAMP,IAAI,CAACG,MAAM,CAACF,cAAc,CAACI,KAAD,CAAf,EAAwBC,OAAxB,CAAP,CAAzB,CAFuC,CAGvC;AACA;AACA;;AACA,QAAIC,MAAM,IAAI,IAAd,EAAoB;AAClB,YAAMC,KAAK,CAAC,2DAAD,CAAX;AACD;;AAED,WAAOD,MAAP;AACD;;AAED,SAAOH,GAAP;AACD","sourcesContent":["import last from 'it-last'\nimport { normaliseInput } from 'ipfs-core-utils/files/normalise-input-single'\n\n/**\n * @param {object} context\n * @param {import('ipfs-core-types/src/root').API<{}>[\"addAll\"]} context.addAll\n */\nexport function createAdd ({ addAll }) {\n  /**\n   * @type {import('ipfs-core-types/src/root').API<{}>[\"add\"]}\n   */\n  async function add (entry, options = {}) {\n    // @ts-expect-error TODO: https://github.com/ipfs/js-ipfs/issues/3290\n    const result = await last(addAll(normaliseInput(entry), options))\n    // Note this should never happen as `addAll` should yield at least one item\n    // but to satisfy type checker we perfom this check and for good measure\n    // throw an error in case it does happen.\n    if (result == null) {\n      throw Error('Failed to add a file, if you see this please report a bug')\n    }\n\n    return result\n  }\n\n  return add\n}\n"]},"metadata":{},"sourceType":"module"}