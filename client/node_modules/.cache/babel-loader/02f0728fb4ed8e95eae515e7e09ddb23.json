{"ast":null,"code":"/* eslint-disable import/export */\n\n/* eslint-disable complexity */\n\n/* eslint-disable @typescript-eslint/no-namespace */\n\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n\n/* eslint-disable @typescript-eslint/no-empty-interface */\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime';\nexport var PeerIdProto;\n\n(function (PeerIdProto) {\n  let _codec;\n\n  PeerIdProto.codec = () => {\n    if (_codec == null) {\n      _codec = message(function (obj, w) {\n        let opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        if (opts.lengthDelimited !== false) {\n          w.fork();\n        }\n\n        if (obj.id != null) {\n          w.uint32(10);\n          w.bytes(obj.id);\n        }\n\n        if (obj.pubKey != null) {\n          w.uint32(18);\n          w.bytes(obj.pubKey);\n        }\n\n        if (obj.privKey != null) {\n          w.uint32(26);\n          w.bytes(obj.privKey);\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim();\n        }\n      }, (reader, length) => {\n        const obj = {};\n        const end = length == null ? reader.len : reader.pos + length;\n\n        while (reader.pos < end) {\n          const tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              obj.id = reader.bytes();\n              break;\n\n            case 2:\n              obj.pubKey = reader.bytes();\n              break;\n\n            case 3:\n              obj.privKey = reader.bytes();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return obj;\n      });\n    }\n\n    return _codec;\n  };\n\n  PeerIdProto.encode = obj => {\n    return encodeMessage(obj, PeerIdProto.codec());\n  };\n\n  PeerIdProto.decode = buf => {\n    return decodeMessage(buf, PeerIdProto.codec());\n  };\n})(PeerIdProto || (PeerIdProto = {}));","map":{"version":3,"mappings":"AAAA;;AACA;;AACA;;AACA;;AACA;AAEA,SAASA,aAAT,EAAwBC,aAAxB,EAAuCC,OAAvC,QAAsD,iBAAtD;AAUA,OAAM,IAAWC,WAAX;;AAAN,WAAiBA,WAAjB,EAA4B;AAC1B,MAAIC,MAAJ;;AAEaD,sBAAQ,MAAyB;AAC5C,QAAIC,MAAM,IAAI,IAAd,EAAoB;AAClBA,YAAM,GAAGF,OAAO,CAAc,UAACG,GAAD,EAAMC,CAAN,EAAsB;AAAA,YAAbC,IAAa,uEAAN,EAAM;;AAClD,YAAIA,IAAI,CAACC,eAAL,KAAyB,KAA7B,EAAoC;AAClCF,WAAC,CAACG,IAAF;AACD;;AAED,YAAIJ,GAAG,CAACK,EAAJ,IAAU,IAAd,EAAoB;AAClBJ,WAAC,CAACK,MAAF,CAAS,EAAT;AACAL,WAAC,CAACM,KAAF,CAAQP,GAAG,CAACK,EAAZ;AACD;;AAED,YAAIL,GAAG,CAACQ,MAAJ,IAAc,IAAlB,EAAwB;AACtBP,WAAC,CAACK,MAAF,CAAS,EAAT;AACAL,WAAC,CAACM,KAAF,CAAQP,GAAG,CAACQ,MAAZ;AACD;;AAED,YAAIR,GAAG,CAACS,OAAJ,IAAe,IAAnB,EAAyB;AACvBR,WAAC,CAACK,MAAF,CAAS,EAAT;AACAL,WAAC,CAACM,KAAF,CAAQP,GAAG,CAACS,OAAZ;AACD;;AAED,YAAIP,IAAI,CAACC,eAAL,KAAyB,KAA7B,EAAoC;AAClCF,WAAC,CAACS,MAAF;AACD;AACF,OAvBe,EAuBb,CAACC,MAAD,EAASC,MAAT,KAAmB;AACpB,cAAMZ,GAAG,GAAQ,EAAjB;AAEA,cAAMa,GAAG,GAAGD,MAAM,IAAI,IAAV,GAAiBD,MAAM,CAACG,GAAxB,GAA8BH,MAAM,CAACI,GAAP,GAAaH,MAAvD;;AAEA,eAAOD,MAAM,CAACI,GAAP,GAAaF,GAApB,EAAyB;AACvB,gBAAMG,GAAG,GAAGL,MAAM,CAACL,MAAP,EAAZ;;AAEA,kBAAQU,GAAG,KAAK,CAAhB;AACE,iBAAK,CAAL;AACEhB,iBAAG,CAACK,EAAJ,GAASM,MAAM,CAACJ,KAAP,EAAT;AACA;;AACF,iBAAK,CAAL;AACEP,iBAAG,CAACQ,MAAJ,GAAaG,MAAM,CAACJ,KAAP,EAAb;AACA;;AACF,iBAAK,CAAL;AACEP,iBAAG,CAACS,OAAJ,GAAcE,MAAM,CAACJ,KAAP,EAAd;AACA;;AACF;AACEI,oBAAM,CAACM,QAAP,CAAgBD,GAAG,GAAG,CAAtB;AACA;AAZJ;AAcD;;AAED,eAAOhB,GAAP;AACD,OAhDe,CAAhB;AAiDD;;AAED,WAAOD,MAAP;AACD,GAtDY;;AAwDAD,uBAAUE,GAAD,IAA0C;AAC9D,WAAOL,aAAa,CAACK,GAAD,EAAMF,WAAW,CAACoB,KAAZ,EAAN,CAApB;AACD,GAFY;;AAIApB,uBAAUqB,GAAD,IAAkD;AACtE,WAAOvB,aAAa,CAACuB,GAAD,EAAMrB,WAAW,CAACoB,KAAZ,EAAN,CAApB;AACD,GAFY;AAGd,CAlED,EAAiBpB,WAAW,KAAXA,WAAW,MAA5B","names":["encodeMessage","decodeMessage","message","PeerIdProto","_codec","obj","w","opts","lengthDelimited","fork","id","uint32","bytes","pubKey","privKey","ldelim","reader","length","end","len","pos","tag","skipType","codec","buf"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\peer-id-factory\\src\\proto.ts"],"sourcesContent":["/* eslint-disable import/export */\n/* eslint-disable complexity */\n/* eslint-disable @typescript-eslint/no-namespace */\n/* eslint-disable @typescript-eslint/no-unnecessary-boolean-literal-compare */\n/* eslint-disable @typescript-eslint/no-empty-interface */\n\nimport { encodeMessage, decodeMessage, message } from 'protons-runtime'\nimport type { Codec } from 'protons-runtime'\nimport type { Uint8ArrayList } from 'uint8arraylist'\n\nexport interface PeerIdProto {\n  id?: Uint8Array\n  pubKey?: Uint8Array\n  privKey?: Uint8Array\n}\n\nexport namespace PeerIdProto {\n  let _codec: Codec<PeerIdProto>\n\n  export const codec = (): Codec<PeerIdProto> => {\n    if (_codec == null) {\n      _codec = message<PeerIdProto>((obj, w, opts = {}) => {\n        if (opts.lengthDelimited !== false) {\n          w.fork()\n        }\n\n        if (obj.id != null) {\n          w.uint32(10)\n          w.bytes(obj.id)\n        }\n\n        if (obj.pubKey != null) {\n          w.uint32(18)\n          w.bytes(obj.pubKey)\n        }\n\n        if (obj.privKey != null) {\n          w.uint32(26)\n          w.bytes(obj.privKey)\n        }\n\n        if (opts.lengthDelimited !== false) {\n          w.ldelim()\n        }\n      }, (reader, length) => {\n        const obj: any = {}\n\n        const end = length == null ? reader.len : reader.pos + length\n\n        while (reader.pos < end) {\n          const tag = reader.uint32()\n\n          switch (tag >>> 3) {\n            case 1:\n              obj.id = reader.bytes()\n              break\n            case 2:\n              obj.pubKey = reader.bytes()\n              break\n            case 3:\n              obj.privKey = reader.bytes()\n              break\n            default:\n              reader.skipType(tag & 7)\n              break\n          }\n        }\n\n        return obj\n      })\n    }\n\n    return _codec\n  }\n\n  export const encode = (obj: Partial<PeerIdProto>): Uint8Array => {\n    return encodeMessage(obj, PeerIdProto.codec())\n  }\n\n  export const decode = (buf: Uint8Array | Uint8ArrayList): PeerIdProto => {\n    return decodeMessage(buf, PeerIdProto.codec())\n  }\n}\n"]},"metadata":{},"sourceType":"module"}