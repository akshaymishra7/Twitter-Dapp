{"ast":null,"code":"const Record = require('./Record');\n\nconst RateLimiterRes = require('../../RateLimiterRes');\n\nmodule.exports = class MemoryStorage {\n  constructor() {\n    /**\n     * @type {Object.<string, Record>}\n     * @private\n     */\n    this._storage = {};\n  }\n\n  incrby(key, value, durationSec) {\n    if (this._storage[key]) {\n      const msBeforeExpires = this._storage[key].expiresAt ? this._storage[key].expiresAt.getTime() - new Date().getTime() : -1;\n\n      if (msBeforeExpires !== 0) {\n        // Change value\n        this._storage[key].value = this._storage[key].value + value;\n        return new RateLimiterRes(0, msBeforeExpires, this._storage[key].value, false);\n      }\n\n      return this.set(key, value, durationSec);\n    }\n\n    return this.set(key, value, durationSec);\n  }\n\n  set(key, value, durationSec) {\n    const durationMs = durationSec * 1000;\n\n    if (this._storage[key] && this._storage[key].timeoutId) {\n      clearTimeout(this._storage[key].timeoutId);\n    }\n\n    this._storage[key] = new Record(value, durationMs > 0 ? new Date(Date.now() + durationMs) : null);\n\n    if (durationMs > 0) {\n      this._storage[key].timeoutId = setTimeout(() => {\n        delete this._storage[key];\n      }, durationMs);\n\n      if (this._storage[key].timeoutId.unref) {\n        this._storage[key].timeoutId.unref();\n      }\n    }\n\n    return new RateLimiterRes(0, durationMs === 0 ? -1 : durationMs, this._storage[key].value, true);\n  }\n  /**\n   *\n   * @param key\n   * @returns {*}\n   */\n\n\n  get(key) {\n    if (this._storage[key]) {\n      const msBeforeExpires = this._storage[key].expiresAt ? this._storage[key].expiresAt.getTime() - new Date().getTime() : -1;\n      return new RateLimiterRes(0, msBeforeExpires, this._storage[key].value, false);\n    }\n\n    return null;\n  }\n  /**\n   *\n   * @param key\n   * @returns {boolean}\n   */\n\n\n  delete(key) {\n    if (this._storage[key]) {\n      if (this._storage[key].timeoutId) {\n        clearTimeout(this._storage[key].timeoutId);\n      }\n\n      delete this._storage[key];\n      return true;\n    }\n\n    return false;\n  }\n\n};","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/rate-limiter-flexible/lib/component/MemoryStorage/MemoryStorage.js"],"names":["Record","require","RateLimiterRes","module","exports","MemoryStorage","constructor","_storage","incrby","key","value","durationSec","msBeforeExpires","expiresAt","getTime","Date","set","durationMs","timeoutId","clearTimeout","now","setTimeout","unref","get","delete"],"mappings":"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","sourcesContent":["const Record = require('./Record');\nconst RateLimiterRes = require('../../RateLimiterRes');\n\nmodule.exports = class MemoryStorage {\n  constructor() {\n    /**\n     * @type {Object.<string, Record>}\n     * @private\n     */\n    this._storage = {};\n  }\n\n  incrby(key, value, durationSec) {\n    if (this._storage[key]) {\n      const msBeforeExpires = this._storage[key].expiresAt\n        ? this._storage[key].expiresAt.getTime() - new Date().getTime()\n        : -1;\n      if (msBeforeExpires !== 0) {\n        // Change value\n        this._storage[key].value = this._storage[key].value + value;\n\n        return new RateLimiterRes(0, msBeforeExpires, this._storage[key].value, false);\n      }\n\n      return this.set(key, value, durationSec);\n    }\n    return this.set(key, value, durationSec);\n  }\n\n  set(key, value, durationSec) {\n    const durationMs = durationSec * 1000;\n\n    if (this._storage[key] && this._storage[key].timeoutId) {\n      clearTimeout(this._storage[key].timeoutId);\n    }\n\n    this._storage[key] = new Record(\n      value,\n      durationMs > 0 ? new Date(Date.now() + durationMs) : null\n    );\n    if (durationMs > 0) {\n      this._storage[key].timeoutId = setTimeout(() => {\n        delete this._storage[key];\n      }, durationMs);\n      if (this._storage[key].timeoutId.unref) {\n        this._storage[key].timeoutId.unref();\n      }\n    }\n\n    return new RateLimiterRes(0, durationMs === 0 ? -1 : durationMs, this._storage[key].value, true);\n  }\n\n  /**\n   *\n   * @param key\n   * @returns {*}\n   */\n  get(key) {\n    if (this._storage[key]) {\n      const msBeforeExpires = this._storage[key].expiresAt\n        ? this._storage[key].expiresAt.getTime() - new Date().getTime()\n        : -1;\n      return new RateLimiterRes(0, msBeforeExpires, this._storage[key].value, false);\n    }\n    return null;\n  }\n\n  /**\n   *\n   * @param key\n   * @returns {boolean}\n   */\n  delete(key) {\n    if (this._storage[key]) {\n      if (this._storage[key].timeoutId) {\n        clearTimeout(this._storage[key].timeoutId);\n      }\n      delete this._storage[key];\n      return true;\n    }\n    return false;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}