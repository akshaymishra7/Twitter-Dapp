{"ast":null,"code":"import drain from 'it-drain';\nimport { pushable } from 'it-pushable';\nimport { Key } from 'interface-datastore/key';\nimport { CID } from 'multiformats/cid';\nimport * as raw from 'multiformats/codecs/raw';\nimport * as Digest from 'multiformats/hashes/digest';\nimport { base32, base32pad } from 'multiformats/bases/base32';\nimport { base58btc } from 'multiformats/bases/base58';\nimport errcode from 'err-code';\nimport { BaseBlockstore } from 'blockstore-core/base';\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\n\nfunction cidToKey(cid) {\n  const c = CID.asCID(cid);\n\n  if (!c) {\n    throw errcode(new Error('Not a valid cid'), 'ERR_INVALID_CID');\n  }\n\n  return new Key('/' + base32.encode(c.multihash.bytes).slice(1).toUpperCase(), false);\n}\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n * @returns {CID}\n */\n\n\nfunction keyToCid(key) {\n  // Block key is of the form <base32 encoded string>\n  return CID.createV1(raw.code, Digest.decode(base32.decode('b' + key.toString().slice(1).toLowerCase())));\n}\n/**\n * Tries to decode a prefix as the first part of a CID and then\n * strip off the version and codec bytes to just leave part of\n * the multihash.\n *\n * Only really works if the prefix length aligns with the byte\n * boundaries of the encoding.\n *\n * @param {string} prefix\n * @returns {string}\n */\n\n\nfunction convertPrefix(prefix) {\n  const firstChar = prefix.substring(0, 1);\n\n  if (firstChar === '/') {\n    return convertPrefix(prefix.substring(1));\n  }\n  /** @type {(input: string) => Uint8Array } */\n\n\n  let decoder;\n\n  if (firstChar.toLowerCase() === 'b') {\n    // v1 cid prefix, remove version and codec bytes\n    decoder = input => base32.decode(input.toLowerCase()).subarray(2);\n  } else if (firstChar.toLowerCase() === 'c') {\n    // v1 cid prefix, remove version and codec bytes\n    decoder = input => base32pad.decode(input.toLowerCase()).subarray(2);\n  } else if (firstChar === 'z') {\n    // v1 cid\n    decoder = input => base58btc.decode(input).subarray(2);\n  } else if (firstChar === 'Q') {\n    // v0 cid prefix\n    decoder = input => base58btc.decode('z' + input);\n  } else {\n    decoder = input => base32.decode('b' + input.toLowerCase()).subarray(2);\n  }\n\n  let bytes; // find the longest prefix that we can safely decode\n\n  for (let i = 1; i < prefix.length; i++) {\n    try {\n      bytes = decoder(prefix.substring(0, i));\n    } catch (\n    /** @type {any} */\n    err) {\n      if (err.message !== 'Unexpected end of data') {\n        throw err;\n      }\n    }\n  }\n\n  let str = '/C';\n\n  if (bytes) {\n    // slice one character from the end of the string to ensure we don't end up\n    // with a padded value which could have a non-matching string at the end\n    str = `/${base32.encode(bytes).slice(1, -1).toUpperCase() || 'C'}`;\n  }\n\n  return str;\n}\n/**\n * @param {import('interface-blockstore').Query} query\n * @returns {import('interface-datastore').Query}\n */\n\n\nfunction convertQuery(query) {\n  return { ...query,\n    prefix: query.prefix ? convertPrefix(query.prefix) : undefined,\n    filters: query.filters ? query.filters.map(filter => pair => {\n      return filter({\n        key: keyToCid(pair.key),\n        value: pair.value\n      });\n    }) : undefined,\n    orders: query.orders ? query.orders.map(order => (a, b) => {\n      return order({\n        key: keyToCid(a.key),\n        value: a.value\n      }, {\n        key: keyToCid(b.key),\n        value: b.value\n      });\n    }) : undefined\n  };\n}\n/**\n * @param {import('interface-blockstore').KeyQuery} query\n * @returns {import('interface-datastore').KeyQuery}\n */\n\n\nfunction convertKeyQuery(query) {\n  return { ...query,\n    prefix: query.prefix ? convertPrefix(query.prefix) : undefined,\n    filters: query.filters ? query.filters.map(filter => key => {\n      return filter(keyToCid(key));\n    }) : undefined,\n    orders: query.orders ? query.orders.map(order => (a, b) => {\n      return order(keyToCid(a), keyToCid(b));\n    }) : undefined\n  };\n}\n/**\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Options} Options\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @implements {Blockstore}\n */\n\n\nexport class BlockstoreDatastoreAdapter extends BaseBlockstore {\n  /**\n   * @param {Datastore} datastore\n   */\n  constructor(datastore) {\n    super();\n    this.child = datastore;\n  }\n\n  open() {\n    return this.child.open();\n  }\n\n  close() {\n    return this.child.close();\n  }\n  /**\n   * @param {Query} query\n   * @param {Options} [options]\n   */\n\n\n  async *query(query, options) {\n    for await (const {\n      key,\n      value\n    } of this.child.query(convertQuery(query), options)) {\n      yield {\n        key: keyToCid(key),\n        value\n      };\n    }\n  }\n  /**\n   * @param {KeyQuery} query\n   * @param {Options} [options]\n   */\n\n\n  async *queryKeys(query, options) {\n    for await (const key of this.child.queryKeys(convertKeyQuery(query), options)) {\n      yield keyToCid(key);\n    }\n  }\n  /**\n   * @param {CID} cid\n   * @param {Options} [options]\n   * @returns\n   */\n\n\n  async get(cid, options) {\n    return this.child.get(cidToKey(cid), options);\n  }\n  /**\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {Options} [options]\n   */\n\n\n  async *getMany(cids, options) {\n    for await (const cid of cids) {\n      yield this.get(cid, options);\n    }\n  }\n  /**\n   * @param {CID} cid\n   * @param {Uint8Array} value\n   * @param {Options} [options]\n   */\n\n\n  async put(cid, value, options) {\n    await this.child.put(cidToKey(cid), value, options);\n  }\n  /**\n   * @param {AsyncIterable<Pair> | Iterable<Pair>} blocks\n   * @param {Options} [options]\n   */\n\n\n  async *putMany(blocks, options) {\n    // eslint-disable-line require-await\n    // we cannot simply chain to `store.putMany` because we convert a CID into\n    // a key based on the multihash only, so we lose the version & codec and\n    // cannot give the user back the CID they used to create the block, so yield\n    // to `store.putMany` but return the actual block the user passed in.\n    //\n    // nb. we want to use `store.putMany` here so bitswap can control batching\n    // up block HAVEs to send to the network - if we use multiple `store.put`s\n    // it will not be able to guess we are about to `store.put` more blocks\n    const output = pushable({\n      objectMode: true\n    }); // process.nextTick runs on the microtask queue, setImmediate runs on the next\n    // event loop iteration so is slower. Use process.nextTick if it is available.\n\n    const runner = globalThis.process && globalThis.process.nextTick ? globalThis.process.nextTick : globalThis.setImmediate || globalThis.setTimeout;\n    runner(async () => {\n      try {\n        const store = this.child;\n        await drain(this.child.putMany(async function* () {\n          for await (const block of blocks) {\n            const key = cidToKey(block.key);\n            const exists = await store.has(key, options);\n\n            if (!exists) {\n              yield {\n                key,\n                value: block.value\n              };\n            } // there is an assumption here that after the yield has completed\n            // the underlying datastore has finished writing the block\n\n\n            output.push(block);\n          }\n        }()));\n        output.end();\n      } catch (\n      /** @type {any} */\n      err) {\n        output.end(err);\n      }\n    });\n    yield* output;\n  }\n  /**\n   * @param {CID} cid\n   * @param {Options} [options]\n   */\n\n\n  has(cid, options) {\n    return this.child.has(cidToKey(cid), options);\n  }\n  /**\n   * @param {CID} cid\n   * @param {Options} [options]\n   */\n\n\n  delete(cid, options) {\n    return this.child.delete(cidToKey(cid), options);\n  }\n  /**\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {Options} [options]\n   */\n\n\n  deleteMany(cids, options) {\n    const out = pushable({\n      objectMode: true\n    });\n    drain(this.child.deleteMany(async function* () {\n      for await (const cid of cids) {\n        yield cidToKey(cid);\n        out.push(cid);\n      }\n\n      out.end();\n    }(), options)).catch(err => {\n      out.end(err);\n    });\n    return out;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/blockstore-datastore-adapter/src/index.js"],"names":["drain","pushable","Key","CID","raw","Digest","base32","base32pad","base58btc","errcode","BaseBlockstore","cidToKey","cid","c","asCID","Error","encode","multihash","bytes","slice","toUpperCase","keyToCid","key","createV1","code","decode","toString","toLowerCase","convertPrefix","prefix","firstChar","substring","decoder","input","subarray","i","length","err","message","str","convertQuery","query","undefined","filters","map","filter","pair","value","orders","order","a","b","convertKeyQuery","BlockstoreDatastoreAdapter","constructor","datastore","child","open","close","options","queryKeys","get","getMany","cids","put","putMany","blocks","output","objectMode","runner","globalThis","process","nextTick","setImmediate","setTimeout","store","block","exists","has","push","end","delete","deleteMany","out","catch"],"mappings":"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","sourcesContent":["import drain from 'it-drain'\nimport { pushable } from 'it-pushable'\nimport { Key } from 'interface-datastore/key'\nimport { CID } from 'multiformats/cid'\nimport * as raw from 'multiformats/codecs/raw'\nimport * as Digest from 'multiformats/hashes/digest'\nimport { base32, base32pad } from 'multiformats/bases/base32'\nimport { base58btc } from 'multiformats/bases/base58'\nimport errcode from 'err-code'\nimport { BaseBlockstore } from 'blockstore-core/base'\n\n/**\n * Transform a cid to the appropriate datastore key.\n *\n * @param {CID} cid\n * @returns {Key}\n */\nfunction cidToKey (cid) {\n  const c = CID.asCID(cid)\n\n  if (!c) {\n    throw errcode(new Error('Not a valid cid'), 'ERR_INVALID_CID')\n  }\n\n  return new Key('/' + base32.encode(c.multihash.bytes).slice(1).toUpperCase(), false)\n}\n\n/**\n * Transform a datastore Key instance to a CID\n * As Key is a multihash of the CID, it is reconstructed using IPLD's RAW codec.\n * Hence it is highly probable that stored CID will differ from a CID retrieved from blockstore.\n *\n * @param {Key} key\n * @returns {CID}\n */\nfunction keyToCid (key) {\n  // Block key is of the form <base32 encoded string>\n  return CID.createV1(raw.code, Digest.decode(base32.decode('b' + key.toString().slice(1).toLowerCase())))\n}\n\n/**\n * Tries to decode a prefix as the first part of a CID and then\n * strip off the version and codec bytes to just leave part of\n * the multihash.\n *\n * Only really works if the prefix length aligns with the byte\n * boundaries of the encoding.\n *\n * @param {string} prefix\n * @returns {string}\n */\nfunction convertPrefix (prefix) {\n  const firstChar = prefix.substring(0, 1)\n\n  if (firstChar === '/') {\n    return convertPrefix(prefix.substring(1))\n  }\n\n  /** @type {(input: string) => Uint8Array } */\n  let decoder\n\n  if (firstChar.toLowerCase() === 'b') {\n    // v1 cid prefix, remove version and codec bytes\n    decoder = (input) => base32.decode(input.toLowerCase()).subarray(2)\n  } else if (firstChar.toLowerCase() === 'c') {\n    // v1 cid prefix, remove version and codec bytes\n    decoder = (input) => base32pad.decode(input.toLowerCase()).subarray(2)\n  } else if (firstChar === 'z') {\n    // v1 cid\n    decoder = (input) => base58btc.decode(input).subarray(2)\n  } else if (firstChar === 'Q') {\n    // v0 cid prefix\n    decoder = (input) => base58btc.decode('z' + input)\n  } else {\n    decoder = (input) => base32.decode('b' + input.toLowerCase()).subarray(2)\n  }\n\n  let bytes\n\n  // find the longest prefix that we can safely decode\n  for (let i = 1; i < prefix.length; i++) {\n    try {\n      bytes = decoder(prefix.substring(0, i))\n    } catch (/** @type {any} */ err) {\n      if (err.message !== 'Unexpected end of data') {\n        throw err\n      }\n    }\n  }\n\n  let str = '/C'\n\n  if (bytes) {\n    // slice one character from the end of the string to ensure we don't end up\n    // with a padded value which could have a non-matching string at the end\n    str = `/${base32.encode(bytes).slice(1, -1).toUpperCase() || 'C'}`\n  }\n\n  return str\n}\n\n/**\n * @param {import('interface-blockstore').Query} query\n * @returns {import('interface-datastore').Query}\n */\nfunction convertQuery (query) {\n  return {\n    ...query,\n    prefix: query.prefix ? convertPrefix(query.prefix) : undefined,\n    filters: query.filters\n      ? query.filters.map(\n        filter => (pair) => {\n          return filter({ key: keyToCid(pair.key), value: pair.value })\n        }\n      )\n      : undefined,\n    orders: query.orders\n      ? query.orders.map(\n        order => (a, b) => {\n          return order({ key: keyToCid(a.key), value: a.value }, { key: keyToCid(b.key), value: b.value })\n        }\n      )\n      : undefined\n  }\n}\n\n/**\n * @param {import('interface-blockstore').KeyQuery} query\n * @returns {import('interface-datastore').KeyQuery}\n */\nfunction convertKeyQuery (query) {\n  return {\n    ...query,\n    prefix: query.prefix ? convertPrefix(query.prefix) : undefined,\n    filters: query.filters\n      ? query.filters.map(\n        filter => (key) => {\n          return filter(keyToCid(key))\n        }\n      )\n      : undefined,\n    orders: query.orders\n      ? query.orders.map(\n        order => (a, b) => {\n          return order(keyToCid(a), keyToCid(b))\n        }\n      )\n      : undefined\n  }\n}\n\n/**\n * @typedef {import('interface-blockstore').Query} Query\n * @typedef {import('interface-blockstore').KeyQuery} KeyQuery\n * @typedef {import('interface-blockstore').Pair} Pair\n * @typedef {import('interface-blockstore').Options} Options\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-blockstore').Blockstore} Blockstore\n */\n\n/**\n * @implements {Blockstore}\n */\nexport class BlockstoreDatastoreAdapter extends BaseBlockstore {\n  /**\n   * @param {Datastore} datastore\n   */\n  constructor (datastore) {\n    super()\n\n    this.child = datastore\n  }\n\n  open () {\n    return this.child.open()\n  }\n\n  close () {\n    return this.child.close()\n  }\n\n  /**\n   * @param {Query} query\n   * @param {Options} [options]\n   */\n  async * query (query, options) {\n    for await (const { key, value } of this.child.query(convertQuery(query), options)) {\n      yield { key: keyToCid(key), value }\n    }\n  }\n\n  /**\n   * @param {KeyQuery} query\n   * @param {Options} [options]\n   */\n  async * queryKeys (query, options) {\n    for await (const key of this.child.queryKeys(convertKeyQuery(query), options)) {\n      yield keyToCid(key)\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {Options} [options]\n   * @returns\n   */\n  async get (cid, options) {\n    return this.child.get(cidToKey(cid), options)\n  }\n\n  /**\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {Options} [options]\n   */\n  async * getMany (cids, options) {\n    for await (const cid of cids) {\n      yield this.get(cid, options)\n    }\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {Uint8Array} value\n   * @param {Options} [options]\n   */\n  async put (cid, value, options) {\n    await this.child.put(cidToKey(cid), value, options)\n  }\n\n  /**\n   * @param {AsyncIterable<Pair> | Iterable<Pair>} blocks\n   * @param {Options} [options]\n   */\n  async * putMany (blocks, options) { // eslint-disable-line require-await\n    // we cannot simply chain to `store.putMany` because we convert a CID into\n    // a key based on the multihash only, so we lose the version & codec and\n    // cannot give the user back the CID they used to create the block, so yield\n    // to `store.putMany` but return the actual block the user passed in.\n    //\n    // nb. we want to use `store.putMany` here so bitswap can control batching\n    // up block HAVEs to send to the network - if we use multiple `store.put`s\n    // it will not be able to guess we are about to `store.put` more blocks\n    const output = pushable({\n      objectMode: true\n    })\n\n    // process.nextTick runs on the microtask queue, setImmediate runs on the next\n    // event loop iteration so is slower. Use process.nextTick if it is available.\n    const runner = globalThis.process && globalThis.process.nextTick ? globalThis.process.nextTick : (globalThis.setImmediate || globalThis.setTimeout)\n\n    runner(async () => {\n      try {\n        const store = this.child\n\n        await drain(this.child.putMany(async function * () {\n          for await (const block of blocks) {\n            const key = cidToKey(block.key)\n            const exists = await store.has(key, options)\n\n            if (!exists) {\n              yield { key, value: block.value }\n            }\n\n            // there is an assumption here that after the yield has completed\n            // the underlying datastore has finished writing the block\n            output.push(block)\n          }\n        }()))\n\n        output.end()\n      } catch (/** @type {any} */ err) {\n        output.end(err)\n      }\n    })\n\n    yield * output\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {Options} [options]\n   */\n  has (cid, options) {\n    return this.child.has(cidToKey(cid), options)\n  }\n\n  /**\n   * @param {CID} cid\n   * @param {Options} [options]\n   */\n  delete (cid, options) {\n    return this.child.delete(cidToKey(cid), options)\n  }\n\n  /**\n   * @param {AsyncIterable<CID> | Iterable<CID>} cids\n   * @param {Options} [options]\n   */\n  deleteMany (cids, options) {\n    const out = pushable({\n      objectMode: true\n    })\n\n    drain(this.child.deleteMany((async function * () {\n      for await (const cid of cids) {\n        yield cidToKey(cid)\n\n        out.push(cid)\n      }\n\n      out.end()\n    }()), options)).catch(err => {\n      out.end(err)\n    })\n\n    return out\n  }\n}\n"]},"metadata":{},"sourceType":"module"}