{"ast":null,"code":"class TrackedMap extends Map {\n  constructor(init) {\n    super();\n    const {\n      name,\n      metrics\n    } = init;\n    this.metric = metrics.registerMetric(name);\n    this.updateComponentMetric();\n  }\n\n  set(key, value) {\n    super.set(key, value);\n    this.updateComponentMetric();\n    return this;\n  }\n\n  delete(key) {\n    const deleted = super.delete(key);\n    this.updateComponentMetric();\n    return deleted;\n  }\n\n  clear() {\n    super.clear();\n    this.updateComponentMetric();\n  }\n\n  updateComponentMetric() {\n    this.metric.update(this.size);\n  }\n\n}\n\nexport function trackedMap(config) {\n  const {\n    name,\n    metrics\n  } = config;\n  let map;\n\n  if (metrics != null) {\n    map = new TrackedMap({\n      name,\n      metrics\n    });\n  } else {\n    map = new Map();\n  }\n\n  return map;\n}","map":{"version":3,"mappings":"AAOA,MAAMA,UAAN,SAA+BC,GAA/B,CAAwC;AAGtCC,cAAaC,IAAb,EAAiC;AAC/B;AAEA,UAAM;AAAEC,UAAF;AAAQC;AAAR,QAAoBF,IAA1B;AAEA,SAAKG,MAAL,GAAcD,OAAO,CAACE,cAAR,CAAuBH,IAAvB,CAAd;AACA,SAAKI,qBAAL;AACD;;AAEDC,KAAG,CAAEC,GAAF,EAAUC,KAAV,EAAkB;AACnB,UAAMF,GAAN,CAAUC,GAAV,EAAeC,KAAf;AACA,SAAKH,qBAAL;AACA,WAAO,IAAP;AACD;;AAEDI,QAAM,CAAEF,GAAF,EAAQ;AACZ,UAAMG,OAAO,GAAG,MAAMD,MAAN,CAAaF,GAAb,CAAhB;AACA,SAAKF,qBAAL;AACA,WAAOK,OAAP;AACD;;AAEDC,OAAK;AACH,UAAMA,KAAN;AACA,SAAKN,qBAAL;AACD;;AAEOA,uBAAqB;AAC3B,SAAKF,MAAL,CAAYS,MAAZ,CAAmB,KAAKC,IAAxB;AACD;;AA/BqC;;AA8CxC,OAAM,SAAUC,UAAV,CAA6BC,MAA7B,EAAyD;AAC7D,QAAM;AAAEd,QAAF;AAAQC;AAAR,MAAoBa,MAA1B;AACA,MAAIC,GAAJ;;AAEA,MAAId,OAAO,IAAI,IAAf,EAAqB;AACnBc,OAAG,GAAG,IAAInB,UAAJ,CAAqB;AAAEI,UAAF;AAAQC;AAAR,KAArB,CAAN;AACD,GAFD,MAEO;AACLc,OAAG,GAAG,IAAIlB,GAAJ,EAAN;AACD;;AAED,SAAOkB,GAAP;AACD","names":["TrackedMap","Map","constructor","init","name","metrics","metric","registerMetric","updateComponentMetric","set","key","value","delete","deleted","clear","update","size","trackedMap","config","map"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\tracked-map\\src\\index.ts"],"sourcesContent":["import type { Metric, Metrics } from '@libp2p/interface-metrics'\n\nexport interface TrackedMapInit {\n  name: string\n  metrics: Metrics\n}\n\nclass TrackedMap<K, V> extends Map<K, V> {\n  private readonly metric: Metric\n\n  constructor (init: TrackedMapInit) {\n    super()\n\n    const { name, metrics } = init\n\n    this.metric = metrics.registerMetric(name)\n    this.updateComponentMetric()\n  }\n\n  set (key: K, value: V) {\n    super.set(key, value)\n    this.updateComponentMetric()\n    return this\n  }\n\n  delete (key: K) {\n    const deleted = super.delete(key)\n    this.updateComponentMetric()\n    return deleted\n  }\n\n  clear () {\n    super.clear()\n    this.updateComponentMetric()\n  }\n\n  private updateComponentMetric () {\n    this.metric.update(this.size)\n  }\n}\n\nexport interface CreateTrackedMapInit {\n  /**\n   * The metric name to use\n   */\n  name: string\n\n  /**\n   * A metrics implementation\n   */\n  metrics?: Metrics\n}\n\nexport function trackedMap <K, V> (config: CreateTrackedMapInit): Map<K, V> {\n  const { name, metrics } = config\n  let map: Map<K, V>\n\n  if (metrics != null) {\n    map = new TrackedMap<K, V>({ name, metrics })\n  } else {\n    map = new Map<K, V>()\n  }\n\n  return map\n}\n"]},"metadata":{},"sourceType":"module"}