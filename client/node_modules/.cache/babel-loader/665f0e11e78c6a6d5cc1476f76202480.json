{"ast":null,"code":"import { isValidPublicKey } from '../utils.js';\nimport { AbstractHandshake } from './abstract-handshake.js';\nexport class XX extends AbstractHandshake {\n  initializeInitiator(prologue, s, rs, psk) {\n    const name = 'Noise_XX_25519_ChaChaPoly_SHA256';\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    const re = new Uint8Array(32);\n    return {\n      ss,\n      s,\n      rs,\n      psk,\n      re\n    };\n  }\n\n  initializeResponder(prologue, s, rs, psk) {\n    const name = 'Noise_XX_25519_ChaChaPoly_SHA256';\n    const ss = this.initializeSymmetric(name);\n    this.mixHash(ss, prologue);\n    const re = new Uint8Array(32);\n    return {\n      ss,\n      s,\n      rs,\n      psk,\n      re\n    };\n  }\n\n  writeMessageA(hs, payload, e) {\n    const ns = new Uint8Array(0);\n\n    if (e !== undefined) {\n      hs.e = e;\n    } else {\n      hs.e = this.crypto.generateX25519KeyPair();\n    }\n\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n    return {\n      ne,\n      ns,\n      ciphertext\n    };\n  }\n\n  writeMessageB(hs, payload) {\n    hs.e = this.crypto.generateX25519KeyPair();\n    const ne = hs.e.publicKey;\n    this.mixHash(hs.ss, ne);\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    const spk = hs.s.publicKey;\n    const ns = this.encryptAndHash(hs.ss, spk);\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n    return {\n      ne,\n      ns,\n      ciphertext\n    };\n  }\n\n  writeMessageC(hs, payload) {\n    const spk = hs.s.publicKey;\n    const ns = this.encryptAndHash(hs.ss, spk);\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re));\n    const ciphertext = this.encryptAndHash(hs.ss, payload);\n    const ne = this.createEmptyKey();\n    const messageBuffer = {\n      ne,\n      ns,\n      ciphertext\n    };\n    const {\n      cs1,\n      cs2\n    } = this.split(hs.ss);\n    return {\n      h: hs.ss.h,\n      messageBuffer,\n      cs1,\n      cs2\n    };\n  }\n\n  readMessageA(hs, message) {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n    return this.decryptAndHash(hs.ss, message.ciphertext);\n  }\n\n  readMessageB(hs, message) {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne;\n    }\n\n    this.mixHash(hs.ss, hs.re);\n\n    if (!hs.e) {\n      throw new Error('Handshake state `e` param is missing.');\n    }\n\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re));\n    const {\n      plaintext: ns,\n      valid: valid1\n    } = this.decryptAndHash(hs.ss, message.ns);\n\n    if (valid1 && isValidPublicKey(ns)) {\n      hs.rs = ns;\n    }\n\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const {\n      plaintext,\n      valid: valid2\n    } = this.decryptAndHash(hs.ss, message.ciphertext);\n    return {\n      plaintext,\n      valid: valid1 && valid2\n    };\n  }\n\n  readMessageC(hs, message) {\n    const {\n      plaintext: ns,\n      valid: valid1\n    } = this.decryptAndHash(hs.ss, message.ns);\n\n    if (valid1 && isValidPublicKey(ns)) {\n      hs.rs = ns;\n    }\n\n    if (!hs.e) {\n      throw new Error('Handshake state `e` param is missing.');\n    }\n\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs));\n    const {\n      plaintext,\n      valid: valid2\n    } = this.decryptAndHash(hs.ss, message.ciphertext);\n    const {\n      cs1,\n      cs2\n    } = this.split(hs.ss);\n    return {\n      h: hs.ss.h,\n      plaintext,\n      valid: valid1 && valid2,\n      cs1,\n      cs2\n    };\n  }\n\n  initSession(initiator, prologue, s) {\n    const psk = this.createEmptyKey();\n    const rs = new Uint8Array(32); // no static key yet\n\n    let hs;\n\n    if (initiator) {\n      hs = this.initializeInitiator(prologue, s, rs, psk);\n    } else {\n      hs = this.initializeResponder(prologue, s, rs, psk);\n    }\n\n    return {\n      hs,\n      i: initiator,\n      mc: 0\n    };\n  }\n\n  sendMessage(session, message, ephemeral) {\n    let messageBuffer;\n\n    if (session.mc === 0) {\n      messageBuffer = this.writeMessageA(session.hs, message, ephemeral);\n    } else if (session.mc === 1) {\n      messageBuffer = this.writeMessageB(session.hs, message);\n    } else if (session.mc === 2) {\n      const {\n        h,\n        messageBuffer: resultingBuffer,\n        cs1,\n        cs2\n      } = this.writeMessageC(session.hs, message);\n      messageBuffer = resultingBuffer;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    } else if (session.mc > 2) {\n      if (session.i) {\n        if (!session.cs1) {\n          throw new Error('CS1 (cipher state) is not defined');\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs1, message);\n      } else {\n        if (!session.cs2) {\n          throw new Error('CS2 (cipher state) is not defined');\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs2, message);\n      }\n    } else {\n      throw new Error('Session invalid.');\n    }\n\n    session.mc++;\n    return messageBuffer;\n  }\n\n  recvMessage(session, message) {\n    let plaintext = new Uint8Array(0);\n    let valid = false;\n\n    if (session.mc === 0) {\n      ({\n        plaintext,\n        valid\n      } = this.readMessageA(session.hs, message));\n    } else if (session.mc === 1) {\n      ({\n        plaintext,\n        valid\n      } = this.readMessageB(session.hs, message));\n    } else if (session.mc === 2) {\n      const {\n        h,\n        plaintext: resultingPlaintext,\n        valid: resultingValid,\n        cs1,\n        cs2\n      } = this.readMessageC(session.hs, message);\n      plaintext = resultingPlaintext;\n      valid = resultingValid;\n      session.h = h;\n      session.cs1 = cs1;\n      session.cs2 = cs2;\n    }\n\n    session.mc++;\n    return {\n      plaintext,\n      valid\n    };\n  }\n\n}","map":{"version":3,"mappings":"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","names":["isValidPublicKey","AbstractHandshake","XX","initializeInitiator","prologue","s","rs","psk","name","ss","initializeSymmetric","mixHash","re","Uint8Array","initializeResponder","writeMessageA","hs","payload","e","ns","undefined","crypto","generateX25519KeyPair","ne","publicKey","ciphertext","encryptAndHash","writeMessageB","mixKey","dh","privateKey","spk","writeMessageC","createEmptyKey","messageBuffer","cs1","cs2","split","h","readMessageA","message","decryptAndHash","readMessageB","Error","plaintext","valid","valid1","valid2","readMessageC","initSession","initiator","i","mc","sendMessage","session","ephemeral","resultingBuffer","writeMessageRegular","recvMessage","resultingPlaintext","resultingValid"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@chainsafe\\libp2p-noise\\src\\handshakes\\xx.ts"],"sourcesContent":["import type { bytes32, bytes } from '../@types/basic.js'\nimport type { KeyPair } from '../@types/libp2p.js'\nimport { isValidPublicKey } from '../utils.js'\nimport type { CipherState, HandshakeState, MessageBuffer, NoiseSession } from '../@types/handshake.js'\nimport { AbstractHandshake, DecryptedResult } from './abstract-handshake.js'\n\nexport class XX extends AbstractHandshake {\n  private initializeInitiator (prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = 'Noise_XX_25519_ChaChaPoly_SHA256'\n    const ss = this.initializeSymmetric(name)\n    this.mixHash(ss, prologue)\n    const re = new Uint8Array(32)\n\n    return { ss, s, rs, psk, re }\n  }\n\n  private initializeResponder (prologue: bytes32, s: KeyPair, rs: bytes32, psk: bytes32): HandshakeState {\n    const name = 'Noise_XX_25519_ChaChaPoly_SHA256'\n    const ss = this.initializeSymmetric(name)\n    this.mixHash(ss, prologue)\n    const re = new Uint8Array(32)\n\n    return { ss, s, rs, psk, re }\n  }\n\n  private writeMessageA (hs: HandshakeState, payload: bytes, e?: KeyPair): MessageBuffer {\n    const ns = new Uint8Array(0)\n\n    if (e !== undefined) {\n      hs.e = e\n    } else {\n      hs.e = this.crypto.generateX25519KeyPair()\n    }\n\n    const ne = hs.e.publicKey\n\n    this.mixHash(hs.ss, ne)\n    const ciphertext = this.encryptAndHash(hs.ss, payload)\n\n    return { ne, ns, ciphertext }\n  }\n\n  private writeMessageB (hs: HandshakeState, payload: bytes): MessageBuffer {\n    hs.e = this.crypto.generateX25519KeyPair()\n    const ne = hs.e.publicKey\n    this.mixHash(hs.ss, ne)\n\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re))\n    const spk = hs.s.publicKey\n    const ns = this.encryptAndHash(hs.ss, spk)\n\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re))\n    const ciphertext = this.encryptAndHash(hs.ss, payload)\n\n    return { ne, ns, ciphertext }\n  }\n\n  private writeMessageC (hs: HandshakeState, payload: bytes): { messageBuffer: MessageBuffer, cs1: CipherState, cs2: CipherState, h: bytes } {\n    const spk = hs.s.publicKey\n    const ns = this.encryptAndHash(hs.ss, spk)\n    this.mixKey(hs.ss, this.dh(hs.s.privateKey, hs.re))\n    const ciphertext = this.encryptAndHash(hs.ss, payload)\n    const ne = this.createEmptyKey()\n    const messageBuffer: MessageBuffer = { ne, ns, ciphertext }\n    const { cs1, cs2 } = this.split(hs.ss)\n\n    return { h: hs.ss.h, messageBuffer, cs1, cs2 }\n  }\n\n  private readMessageA (hs: HandshakeState, message: MessageBuffer): DecryptedResult {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne\n    }\n\n    this.mixHash(hs.ss, hs.re)\n    return this.decryptAndHash(hs.ss, message.ciphertext)\n  }\n\n  private readMessageB (hs: HandshakeState, message: MessageBuffer): DecryptedResult {\n    if (isValidPublicKey(message.ne)) {\n      hs.re = message.ne\n    }\n\n    this.mixHash(hs.ss, hs.re)\n    if (!hs.e) {\n      throw new Error('Handshake state `e` param is missing.')\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.re))\n    const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns)\n    if (valid1 && isValidPublicKey(ns)) {\n      hs.rs = ns\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs))\n    const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext)\n    return { plaintext, valid: (valid1 && valid2) }\n  }\n\n  private readMessageC (hs: HandshakeState, message: MessageBuffer): { h: bytes, plaintext: bytes, valid: boolean, cs1: CipherState, cs2: CipherState } {\n    const { plaintext: ns, valid: valid1 } = this.decryptAndHash(hs.ss, message.ns)\n    if (valid1 && isValidPublicKey(ns)) {\n      hs.rs = ns\n    }\n    if (!hs.e) {\n      throw new Error('Handshake state `e` param is missing.')\n    }\n    this.mixKey(hs.ss, this.dh(hs.e.privateKey, hs.rs))\n\n    const { plaintext, valid: valid2 } = this.decryptAndHash(hs.ss, message.ciphertext)\n    const { cs1, cs2 } = this.split(hs.ss)\n\n    return { h: hs.ss.h, plaintext, valid: (valid1 && valid2), cs1, cs2 }\n  }\n\n  public initSession (initiator: boolean, prologue: bytes32, s: KeyPair): NoiseSession {\n    const psk = this.createEmptyKey()\n    const rs = new Uint8Array(32) // no static key yet\n    let hs\n\n    if (initiator) {\n      hs = this.initializeInitiator(prologue, s, rs, psk)\n    } else {\n      hs = this.initializeResponder(prologue, s, rs, psk)\n    }\n\n    return {\n      hs,\n      i: initiator,\n      mc: 0\n    }\n  }\n\n  public sendMessage (session: NoiseSession, message: bytes, ephemeral?: KeyPair): MessageBuffer {\n    let messageBuffer: MessageBuffer\n    if (session.mc === 0) {\n      messageBuffer = this.writeMessageA(session.hs, message, ephemeral)\n    } else if (session.mc === 1) {\n      messageBuffer = this.writeMessageB(session.hs, message)\n    } else if (session.mc === 2) {\n      const { h, messageBuffer: resultingBuffer, cs1, cs2 } = this.writeMessageC(session.hs, message)\n      messageBuffer = resultingBuffer\n      session.h = h\n      session.cs1 = cs1\n      session.cs2 = cs2\n    } else if (session.mc > 2) {\n      if (session.i) {\n        if (!session.cs1) {\n          throw new Error('CS1 (cipher state) is not defined')\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs1, message)\n      } else {\n        if (!session.cs2) {\n          throw new Error('CS2 (cipher state) is not defined')\n        }\n\n        messageBuffer = this.writeMessageRegular(session.cs2, message)\n      }\n    } else {\n      throw new Error('Session invalid.')\n    }\n\n    session.mc++\n    return messageBuffer\n  }\n\n  public recvMessage (session: NoiseSession, message: MessageBuffer): DecryptedResult {\n    let plaintext: bytes = new Uint8Array(0)\n    let valid = false\n    if (session.mc === 0) {\n      ({ plaintext, valid } = this.readMessageA(session.hs, message))\n    } else if (session.mc === 1) {\n      ({ plaintext, valid } = this.readMessageB(session.hs, message))\n    } else if (session.mc === 2) {\n      const { h, plaintext: resultingPlaintext, valid: resultingValid, cs1, cs2 } = this.readMessageC(session.hs, message)\n      plaintext = resultingPlaintext\n      valid = resultingValid\n      session.h = h\n      session.cs1 = cs1\n      session.cs2 = cs2\n    }\n    session.mc++\n    return { plaintext, valid }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}