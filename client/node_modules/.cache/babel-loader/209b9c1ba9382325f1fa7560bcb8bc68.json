{"ast":null,"code":"import { Key } from 'interface-datastore/key';\nconst MFS_ROOT_KEY = new Key('/local/filesroot');\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\n\nasync function storeMfsRootInDatastore(backends) {\n  let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  onProgress(100, 'Migrating MFS root to repo datastore');\n  await backends.root.open();\n  await backends.datastore.open();\n\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY);\n    await backends.datastore.put(MFS_ROOT_KEY, root);\n    await backends.root.delete(MFS_ROOT_KEY);\n  }\n\n  await backends.datastore.close();\n  await backends.root.close();\n  onProgress(100, 'Stored MFS root in repo datastore');\n}\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\n\n\nasync function storeMfsRootInRoot(backends) {\n  let onProgress = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : () => {};\n  onProgress(100, 'Migrating MFS root to repo root datastore');\n  await backends.root.open();\n  await backends.datastore.open();\n\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY);\n    await backends.root.put(MFS_ROOT_KEY, root);\n    await backends.datastore.delete(MFS_ROOT_KEY);\n  }\n\n  await backends.datastore.close();\n  await backends.root.close();\n  onProgress(100, 'Stored MFS root in repo root datastore');\n}\n/** @type {import('../../types').Migration} */\n\n\nexport const migration = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n};","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-repo-migrations/src/migrations/migration-11/index.js"],"names":["Key","MFS_ROOT_KEY","storeMfsRootInDatastore","backends","onProgress","root","open","datastore","has","get","put","delete","close","storeMfsRootInRoot","migration","version","description","migrate","revert"],"mappings":"AACA,SAASA,GAAT,QAAoB,yBAApB;AAEA,MAAMC,YAAY,GAAG,IAAID,GAAJ,CAAQ,kBAAR,CAArB;AAEA;AACA;AACA;AACA;;AACA,eAAeE,uBAAf,CAAwCC,QAAxC,EAAyE;AAAA,MAAvBC,UAAuB,uEAAV,MAAM,CAAE,CAAE;AACvEA,EAAAA,UAAU,CAAC,GAAD,EAAM,sCAAN,CAAV;AAEA,QAAMD,QAAQ,CAACE,IAAT,CAAcC,IAAd,EAAN;AACA,QAAMH,QAAQ,CAACI,SAAT,CAAmBD,IAAnB,EAAN;;AAEA,MAAI,MAAMH,QAAQ,CAACE,IAAT,CAAcG,GAAd,CAAkBP,YAAlB,CAAV,EAA2C;AACzC,UAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACE,IAAT,CAAcI,GAAd,CAAkBR,YAAlB,CAAnB;AACA,UAAME,QAAQ,CAACI,SAAT,CAAmBG,GAAnB,CAAuBT,YAAvB,EAAqCI,IAArC,CAAN;AACA,UAAMF,QAAQ,CAACE,IAAT,CAAcM,MAAd,CAAqBV,YAArB,CAAN;AACD;;AAED,QAAME,QAAQ,CAACI,SAAT,CAAmBK,KAAnB,EAAN;AACA,QAAMT,QAAQ,CAACE,IAAT,CAAcO,KAAd,EAAN;AAEAR,EAAAA,UAAU,CAAC,GAAD,EAAM,mCAAN,CAAV;AACD;AAED;AACA;AACA;AACA;;;AACA,eAAeS,kBAAf,CAAmCV,QAAnC,EAAoE;AAAA,MAAvBC,UAAuB,uEAAV,MAAM,CAAE,CAAE;AAClEA,EAAAA,UAAU,CAAC,GAAD,EAAM,2CAAN,CAAV;AAEA,QAAMD,QAAQ,CAACE,IAAT,CAAcC,IAAd,EAAN;AACA,QAAMH,QAAQ,CAACI,SAAT,CAAmBD,IAAnB,EAAN;;AAEA,MAAI,MAAMH,QAAQ,CAACI,SAAT,CAAmBC,GAAnB,CAAuBP,YAAvB,CAAV,EAAgD;AAC9C,UAAMI,IAAI,GAAG,MAAMF,QAAQ,CAACI,SAAT,CAAmBE,GAAnB,CAAuBR,YAAvB,CAAnB;AACA,UAAME,QAAQ,CAACE,IAAT,CAAcK,GAAd,CAAkBT,YAAlB,EAAgCI,IAAhC,CAAN;AACA,UAAMF,QAAQ,CAACI,SAAT,CAAmBI,MAAnB,CAA0BV,YAA1B,CAAN;AACD;;AAED,QAAME,QAAQ,CAACI,SAAT,CAAmBK,KAAnB,EAAN;AACA,QAAMT,QAAQ,CAACE,IAAT,CAAcO,KAAd,EAAN;AAEAR,EAAAA,UAAU,CAAC,GAAD,EAAM,wCAAN,CAAV;AACD;AAED;;;AACA,OAAO,MAAMU,SAAS,GAAG;AACvBC,EAAAA,OAAO,EAAE,EADc;AAEvBC,EAAAA,WAAW,EAAE,iCAFU;AAGvBC,EAAAA,OAAO,EAAEf,uBAHc;AAIvBgB,EAAAA,MAAM,EAAEL;AAJe,CAAlB","sourcesContent":["\nimport { Key } from 'interface-datastore/key'\n\nconst MFS_ROOT_KEY = new Key('/local/filesroot')\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInDatastore (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.root.has(MFS_ROOT_KEY)) {\n    const root = await backends.root.get(MFS_ROOT_KEY)\n    await backends.datastore.put(MFS_ROOT_KEY, root)\n    await backends.root.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo datastore')\n}\n\n/**\n * @param {import('../../types').Backends} backends\n * @param {import('../../types').MigrationProgressCallback} onProgress\n */\nasync function storeMfsRootInRoot (backends, onProgress = () => {}) {\n  onProgress(100, 'Migrating MFS root to repo root datastore')\n\n  await backends.root.open()\n  await backends.datastore.open()\n\n  if (await backends.datastore.has(MFS_ROOT_KEY)) {\n    const root = await backends.datastore.get(MFS_ROOT_KEY)\n    await backends.root.put(MFS_ROOT_KEY, root)\n    await backends.datastore.delete(MFS_ROOT_KEY)\n  }\n\n  await backends.datastore.close()\n  await backends.root.close()\n\n  onProgress(100, 'Stored MFS root in repo root datastore')\n}\n\n/** @type {import('../../types').Migration} */\nexport const migration = {\n  version: 11,\n  description: 'Store mfs root in the datastore',\n  migrate: storeMfsRootInDatastore,\n  revert: storeMfsRootInRoot\n}\n"]},"metadata":{},"sourceType":"module"}