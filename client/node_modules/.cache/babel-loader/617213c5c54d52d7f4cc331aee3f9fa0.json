{"ast":null,"code":"/**\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nconst directoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} [options]\n   * @returns {UnixfsV1DirectoryContent}\n   */\n  async function* yieldDirectoryContent() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const offset = options.offset || 0;\n    const length = options.length || node.Links.length;\n    const links = node.Links.slice(offset, length);\n\n    for (const link of links) {\n      const result = await resolve(link.Hash, link.Name || '', `${path}/${link.Name || ''}`, [], depth + 1, blockstore, options);\n\n      if (result.entry) {\n        yield result.entry;\n      }\n    }\n  }\n\n  return yieldDirectoryContent;\n};\n\nexport default directoryContent;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-unixfs-exporter/src/resolvers/unixfs-v1/content/directory.js"],"names":["directoryContent","cid","node","unixfs","path","resolve","depth","blockstore","yieldDirectoryContent","options","offset","length","Links","links","slice","link","result","Hash","Name","entry"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,MAAMA,gBAAgB,GAAG,CAACC,GAAD,EAAMC,IAAN,EAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,OAA1B,EAAmCC,KAAnC,EAA0CC,UAA1C,KAAyD;AAChF;AACF;AACA;AACA;AACE,kBAAiBC,qBAAjB,GAAsD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACpD,UAAMC,MAAM,GAAGD,OAAO,CAACC,MAAR,IAAkB,CAAjC;AACA,UAAMC,MAAM,GAAGF,OAAO,CAACE,MAAR,IAAkBT,IAAI,CAACU,KAAL,CAAWD,MAA5C;AACA,UAAME,KAAK,GAAGX,IAAI,CAACU,KAAL,CAAWE,KAAX,CAAiBJ,MAAjB,EAAyBC,MAAzB,CAAd;;AAEA,SAAK,MAAMI,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,YAAMG,MAAM,GAAG,MAAMX,OAAO,CAACU,IAAI,CAACE,IAAN,EAAYF,IAAI,CAACG,IAAL,IAAa,EAAzB,EAA8B,GAAEd,IAAK,IAAGW,IAAI,CAACG,IAAL,IAAa,EAAG,EAAxD,EAA2D,EAA3D,EAA+DZ,KAAK,GAAG,CAAvE,EAA0EC,UAA1E,EAAsFE,OAAtF,CAA5B;;AAEA,UAAIO,MAAM,CAACG,KAAX,EAAkB;AAChB,cAAMH,MAAM,CAACG,KAAb;AACD;AACF;AACF;;AAED,SAAOX,qBAAP;AACD,CApBD;;AAsBA,eAAeR,gBAAf","sourcesContent":["/**\n * @typedef {import('../../../types').ExporterOptions} ExporterOptions\n * @typedef {import('../../../types').UnixfsV1DirectoryContent} UnixfsV1DirectoryContent\n * @typedef {import('../../../types').UnixfsV1Resolver} UnixfsV1Resolver\n */\n\n/**\n * @type {UnixfsV1Resolver}\n */\nconst directoryContent = (cid, node, unixfs, path, resolve, depth, blockstore) => {\n  /**\n   * @param {ExporterOptions} [options]\n   * @returns {UnixfsV1DirectoryContent}\n   */\n  async function * yieldDirectoryContent (options = {}) {\n    const offset = options.offset || 0\n    const length = options.length || node.Links.length\n    const links = node.Links.slice(offset, length)\n\n    for (const link of links) {\n      const result = await resolve(link.Hash, link.Name || '', `${path}/${link.Name || ''}`, [], depth + 1, blockstore, options)\n\n      if (result.entry) {\n        yield result.entry\n      }\n    }\n  }\n\n  return yieldDirectoryContent\n}\n\nexport default directoryContent\n"]},"metadata":{},"sourceType":"module"}