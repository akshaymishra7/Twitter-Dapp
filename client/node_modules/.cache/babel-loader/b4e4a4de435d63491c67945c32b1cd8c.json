{"ast":null,"code":"import { logger as createLogger } from '@libp2p/logger';\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals';\nimport { BitswapMessageEntry } from '../message/entry.js';\n/**\n * Creates a logger for the given subsystem\n *\n * @param {import('@libp2p/interface-peer-id').PeerId} [id]\n * @param {string} [subsystem]\n */\n\nexport const logger = (id, subsystem) => {\n  const name = ['bitswap'];\n\n  if (subsystem) {\n    name.push(subsystem);\n  }\n\n  if (id) {\n    name.push(`${id.toString().slice(0, 8)}`);\n  }\n\n  return createLogger(name.join(':'));\n};\n/**\n * @template X, T\n * @param {(x:X, t:T) => boolean} pred\n * @param {X} x\n * @param {T[]} list\n * @returns {boolean}\n */\n\nexport const includesWith = (pred, x, list) => {\n  let idx = 0;\n  const len = list.length;\n\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true;\n    }\n\n    idx += 1;\n  }\n\n  return false;\n};\n/**\n * @template T\n * @param {(x:T, t:T) => boolean} pred\n * @param {T[]} list\n * @returns {T[]}\n */\n\nexport const uniqWith = (pred, list) => {\n  let idx = 0;\n  const len = list.length;\n  const result = [];\n  let item;\n\n  while (idx < len) {\n    item = list[idx];\n\n    if (!includesWith(pred, item, result)) {\n      result[result.length] = item;\n    }\n\n    idx += 1;\n  }\n\n  return result;\n};\n/**\n * @template {string|number|symbol} K\n * @template V\n * @param {(v:V) => K} pred\n * @param {V[]} list\n * @returns {Record<K, V[]>}\n */\n\nexport const groupBy = (pred, list) => {\n  return list.reduce((acc, v) => {\n    const k = pred(v);\n\n    if (acc[k]) {\n      acc[k].push(v);\n    } else {\n      acc[k] = [v];\n    }\n\n    return acc;\n  },\n  /** @type {Record<K, V[]>} */\n  {});\n};\n/**\n * @template T, E\n * @param {(a:T, b:E) => boolean} pred\n * @param {T[]} list\n * @param {E[]} values\n * @returns {T[]}\n */\n\nexport const pullAllWith = (pred, list, values) => {\n  return list.filter(i => {\n    return !includesWith(pred, i, values);\n  });\n};\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\n\nexport const sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a);\n    const bb = fn(b);\n    return aa < bb ? -1 : aa > bb ? 1 : 0;\n  });\n};\n/**\n * Is equal for Maps of BitswapMessageEntry or Uint8Arrays\n *\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} a\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} b\n */\n\nexport const isMapEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false;\n  }\n\n  for (const [key, valueA] of a) {\n    const valueB = b.get(key);\n\n    if (valueB === undefined) {\n      return false;\n    } // TODO: revisit this\n    // Support Blocks\n\n\n    if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !uint8ArrayEquals(valueA, valueB)) {\n      return false;\n    } // Support BitswapMessageEntry\n\n\n    if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {\n      return false;\n    }\n  }\n\n  return true;\n};","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-bitswap/src/utils/index.js"],"names":["logger","createLogger","equals","uint8ArrayEquals","BitswapMessageEntry","id","subsystem","name","push","toString","slice","join","includesWith","pred","x","list","idx","len","length","uniqWith","result","item","groupBy","reduce","acc","v","k","pullAllWith","values","filter","i","sortBy","fn","Array","prototype","call","sort","a","b","aa","bb","isMapEqual","size","key","valueA","valueB","get","undefined","Uint8Array"],"mappings":"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","sourcesContent":["import { logger as createLogger } from '@libp2p/logger'\nimport { equals as uint8ArrayEquals } from 'uint8arrays/equals'\nimport { BitswapMessageEntry } from '../message/entry.js'\n\n/**\n * Creates a logger for the given subsystem\n *\n * @param {import('@libp2p/interface-peer-id').PeerId} [id]\n * @param {string} [subsystem]\n */\nexport const logger = (id, subsystem) => {\n  const name = ['bitswap']\n  if (subsystem) {\n    name.push(subsystem)\n  }\n  if (id) {\n    name.push(`${id.toString().slice(0, 8)}`)\n  }\n\n  return createLogger(name.join(':'))\n}\n\n/**\n * @template X, T\n * @param {(x:X, t:T) => boolean} pred\n * @param {X} x\n * @param {T[]} list\n * @returns {boolean}\n */\nexport const includesWith = (pred, x, list) => {\n  let idx = 0\n  const len = list.length\n  while (idx < len) {\n    if (pred(x, list[idx])) {\n      return true\n    }\n    idx += 1\n  }\n  return false\n}\n\n/**\n * @template T\n * @param {(x:T, t:T) => boolean} pred\n * @param {T[]} list\n * @returns {T[]}\n */\nexport const uniqWith = (pred, list) => {\n  let idx = 0\n  const len = list.length\n  const result = []\n  let item\n\n  while (idx < len) {\n    item = list[idx]\n    if (!includesWith(pred, item, result)) {\n      result[result.length] = item\n    }\n    idx += 1\n  }\n  return result\n}\n\n/**\n * @template {string|number|symbol} K\n * @template V\n * @param {(v:V) => K} pred\n * @param {V[]} list\n * @returns {Record<K, V[]>}\n */\nexport const groupBy = (pred, list) => {\n  return list.reduce((acc, v) => {\n    const k = pred(v)\n\n    if (acc[k]) {\n      acc[k].push(v)\n    } else {\n      acc[k] = [v]\n    }\n    return acc\n  }, /** @type {Record<K, V[]>} */({}))\n}\n\n/**\n * @template T, E\n * @param {(a:T, b:E) => boolean} pred\n * @param {T[]} list\n * @param {E[]} values\n * @returns {T[]}\n */\nexport const pullAllWith = (pred, list, values) => {\n  return list.filter(i => {\n    return !includesWith(pred, i, values)\n  })\n}\n\n/**\n * @template T\n * @param {(v:T) => number} fn\n * @param {T[]} list\n * @returns {T[]}\n */\nexport const sortBy = (fn, list) => {\n  return Array.prototype.slice.call(list, 0).sort((a, b) => {\n    const aa = fn(a)\n    const bb = fn(b)\n    return aa < bb ? -1 : aa > bb ? 1 : 0\n  })\n}\n\n/**\n * Is equal for Maps of BitswapMessageEntry or Uint8Arrays\n *\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} a\n * @param {Map<string, Uint8Array | BitswapMessageEntry>} b\n */\nexport const isMapEqual = (a, b) => {\n  if (a.size !== b.size) {\n    return false\n  }\n\n  for (const [key, valueA] of a) {\n    const valueB = b.get(key)\n\n    if (valueB === undefined) {\n      return false\n    }\n\n    // TODO: revisit this\n\n    // Support Blocks\n    if (valueA instanceof Uint8Array && valueB instanceof Uint8Array && !uint8ArrayEquals(valueA, valueB)) {\n      return false\n    }\n\n    // Support BitswapMessageEntry\n    if (valueA instanceof BitswapMessageEntry && valueB instanceof BitswapMessageEntry && !valueA.equals(valueB)) {\n      return false\n    }\n  }\n\n  return true\n}\n"]},"metadata":{},"sourceType":"module"}