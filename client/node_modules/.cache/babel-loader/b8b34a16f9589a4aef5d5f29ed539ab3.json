{"ast":null,"code":"import { exporter } from 'ipfs-unixfs-exporter';\nimport mergeOpts from 'merge-options';\nimport { toMfsPath } from './utils/to-mfs-path.js';\nimport errCode from 'err-code';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nconst mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n};\n/**\n * @param {MfsContext} context\n */\n\nexport function createRead(context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"read\"]}\n   */\n  function mfsRead(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options);\n    return {\n      [Symbol.asyncIterator]: async function* read() {\n        const mfsPath = await toMfsPath(context, path, options);\n        const result = await exporter(mfsPath.mfsPath, context.repo.blocks);\n\n        if (result.type !== 'file' && result.type !== 'raw') {\n          throw errCode(new Error(`${path} was not a file or raw bytes`), 'ERR_NOT_FILE');\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT');\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf;\n        }\n      }\n    };\n  }\n\n  return withTimeoutOption(mfsRead);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/files/read.js"],"names":["exporter","mergeOpts","toMfsPath","errCode","withTimeoutOption","mergeOptions","bind","ignoreUndefined","defaultOptions","offset","length","Infinity","createRead","context","mfsRead","path","options","Symbol","asyncIterator","read","mfsPath","result","repo","blocks","type","Error","content","buf"],"mappings":"AAAA,SAASA,QAAT,QAAyB,sBAAzB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,SAAT,QAA0B,wBAA1B;AACA,OAAOC,OAAP,MAAoB,UAApB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AAEA,MAAMC,YAAY,GAAGJ,SAAS,CAACK,IAAV,CAAe;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAf,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,CADa;AAErBC,EAAAA,MAAM,EAAEC;AAFa,CAAvB;AAKA;AACA;AACA;;AACA,OAAO,SAASC,UAAT,CAAqBC,OAArB,EAA8B;AACnC;AACF;AACA;AACE,WAASC,OAAT,CAAkBC,IAAlB,EAAsC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AACpC;AACAA,IAAAA,OAAO,GAAGX,YAAY,CAACG,cAAD,EAAiBQ,OAAjB,CAAtB;AAEA,WAAO;AACL,OAACC,MAAM,CAACC,aAAR,GAAwB,gBAAiBC,IAAjB,GAAyB;AAC/C,cAAMC,OAAO,GAAG,MAAMlB,SAAS,CAACW,OAAD,EAAUE,IAAV,EAAgBC,OAAhB,CAA/B;AACA,cAAMK,MAAM,GAAG,MAAMrB,QAAQ,CAACoB,OAAO,CAACA,OAAT,EAAkBP,OAAO,CAACS,IAAR,CAAaC,MAA/B,CAA7B;;AAEA,YAAIF,MAAM,CAACG,IAAP,KAAgB,MAAhB,IAA0BH,MAAM,CAACG,IAAP,KAAgB,KAA9C,EAAqD;AACnD,gBAAMrB,OAAO,CAAC,IAAIsB,KAAJ,CAAW,GAAEV,IAAK,8BAAlB,CAAD,EAAmD,cAAnD,CAAb;AACD;;AAED,YAAI,CAACM,MAAM,CAACK,OAAZ,EAAqB;AACnB,gBAAMvB,OAAO,CAAC,IAAIsB,KAAJ,CAAW,sCAAqCV,IAAK,EAArD,CAAD,EAA0D,gBAA1D,CAAb;AACD;;AAED,mBAAW,MAAMY,GAAjB,IAAwBN,MAAM,CAACK,OAAP,CAAe;AACrCjB,UAAAA,MAAM,EAAEO,OAAO,CAACP,MADqB;AAErCC,UAAAA,MAAM,EAAEM,OAAO,CAACN;AAFqB,SAAf,CAAxB,EAGI;AACF,gBAAMiB,GAAN;AACD;AACF;AAnBI,KAAP;AAqBD;;AAED,SAAOvB,iBAAiB,CAACU,OAAD,CAAxB;AACD","sourcesContent":["import { exporter } from 'ipfs-unixfs-exporter'\nimport mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {number} offset\n * @property {number} length\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createRead (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"read\"]}\n   */\n  function mfsRead (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    return {\n      [Symbol.asyncIterator]: async function * read () {\n        const mfsPath = await toMfsPath(context, path, options)\n        const result = await exporter(mfsPath.mfsPath, context.repo.blocks)\n\n        if (result.type !== 'file' && result.type !== 'raw') {\n          throw errCode(new Error(`${path} was not a file or raw bytes`), 'ERR_NOT_FILE')\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(`Could not load content stream from ${path}`), 'ERR_NO_CONTENT')\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf\n        }\n      }\n    }\n  }\n\n  return withTimeoutOption(mfsRead)\n}\n"]},"metadata":{},"sourceType":"module"}