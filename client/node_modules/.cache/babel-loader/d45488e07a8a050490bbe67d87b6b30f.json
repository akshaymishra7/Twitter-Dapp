{"ast":null,"code":"import * as dagPB from '@ipld/dag-pb';\nimport { CID } from 'multiformats/cid';\nimport { sha256 } from 'multiformats/hashes/sha2';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\nexport function createPut(_ref) {\n  let {\n    repo,\n    preload\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"put\"]}\n   */\n  async function put(obj) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const release = await repo.gcLock.readLock();\n\n    try {\n      const buf = dagPB.encode(obj);\n      const hash = await sha256.digest(buf);\n      const cid = CID.createV1(dagPB.code, hash);\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      });\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        });\n      }\n\n      return cid;\n    } finally {\n      release();\n    }\n  }\n\n  return withTimeoutOption(put);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/object/put.js"],"names":["dagPB","CID","sha256","withTimeoutOption","createPut","repo","preload","put","obj","options","release","gcLock","readLock","buf","encode","hash","digest","cid","createV1","code","blocks","signal","pin","pins","pinRecursively"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,cAAvB;AACA,SAASC,GAAT,QAAoB,kBAApB;AACA,SAASC,MAAT,QAAuB,0BAAvB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AAEA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,SAAT,OAAuC;AAAA,MAAnB;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAmB;;AAC5C;AACF;AACA;AACE,iBAAeC,GAAf,CAAoBC,GAApB,EAAuC;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACrC,UAAMC,OAAO,GAAG,MAAML,IAAI,CAACM,MAAL,CAAYC,QAAZ,EAAtB;;AAEA,QAAI;AACF,YAAMC,GAAG,GAAGb,KAAK,CAACc,MAAN,CAAaN,GAAb,CAAZ;AACA,YAAMO,IAAI,GAAG,MAAMb,MAAM,CAACc,MAAP,CAAcH,GAAd,CAAnB;AACA,YAAMI,GAAG,GAAGhB,GAAG,CAACiB,QAAJ,CAAalB,KAAK,CAACmB,IAAnB,EAAyBJ,IAAzB,CAAZ;AAEA,YAAMV,IAAI,CAACe,MAAL,CAAYb,GAAZ,CAAgBU,GAAhB,EAAqBJ,GAArB,EAA0B;AAC9BQ,QAAAA,MAAM,EAAEZ,OAAO,CAACY;AADc,OAA1B,CAAN;;AAIA,UAAIZ,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,QAAAA,OAAO,CAACW,GAAD,CAAP;AACD;;AAED,UAAIR,OAAO,CAACa,GAAZ,EAAiB;AACf,cAAMjB,IAAI,CAACkB,IAAL,CAAUC,cAAV,CAAyBP,GAAzB,EAA8B;AAClCI,UAAAA,MAAM,EAAEZ,OAAO,CAACY;AADkB,SAA9B,CAAN;AAGD;;AAED,aAAOJ,GAAP;AACD,KApBD,SAoBU;AACRP,MAAAA,OAAO;AACR;AACF;;AAED,SAAOP,iBAAiB,CAACI,GAAD,CAAxB;AACD","sourcesContent":["import * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { sha256 } from 'multiformats/hashes/sha2'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\n/**\n * @param {object} config\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createPut ({ repo, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/object').API<{}>[\"put\"]}\n   */\n  async function put (obj, options = {}) {\n    const release = await repo.gcLock.readLock()\n\n    try {\n      const buf = dagPB.encode(obj)\n      const hash = await sha256.digest(buf)\n      const cid = CID.createV1(dagPB.code, hash)\n\n      await repo.blocks.put(cid, buf, {\n        signal: options.signal\n      })\n\n      if (options.preload !== false) {\n        preload(cid)\n      }\n\n      if (options.pin) {\n        await repo.pins.pinRecursively(cid, {\n          signal: options.signal\n        })\n      }\n\n      return cid\n    } finally {\n      release()\n    }\n  }\n\n  return withTimeoutOption(put)\n}\n"]},"metadata":{},"sourceType":"module"}