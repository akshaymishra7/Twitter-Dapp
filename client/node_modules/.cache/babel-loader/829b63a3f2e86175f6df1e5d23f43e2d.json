{"ast":null,"code":"import { createPublish } from './publish.js';\nimport { createResolve } from './resolve.js';\nimport { PubSubAPI } from './pubsub/index.js';\nexport class NameAPI {\n  /**\n   * @param {object} config\n   * @param {import('../ipns').IPNSAPI} config.ipns\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('../../types').Options} config.options\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"dns\"]} config.dns\n   */\n  constructor(_ref) {\n    let {\n      dns,\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    } = _ref;\n    this.publish = createPublish({\n      ipns,\n      repo,\n      codecs,\n      peerId,\n      isOnline,\n      keychain\n    });\n    this.resolve = createResolve({\n      dns,\n      ipns,\n      isOnline,\n      options\n    });\n    this.pubsub = new PubSubAPI({\n      ipns,\n      options\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/name/index.js"],"names":["createPublish","createResolve","PubSubAPI","NameAPI","constructor","dns","ipns","repo","codecs","peerId","isOnline","keychain","options","publish","resolve","pubsub"],"mappings":"AAAA,SAASA,aAAT,QAA8B,cAA9B;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,SAAT,QAA0B,mBAA1B;AAEA,OAAO,MAAMC,OAAN,CAAc;AACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,EAAAA,WAAW,OAAoE;AAAA,QAAlE;AAAEC,MAAAA,GAAF;AAAOC,MAAAA,IAAP;AAAaC,MAAAA,IAAb;AAAmBC,MAAAA,MAAnB;AAA2BC,MAAAA,MAA3B;AAAmCC,MAAAA,QAAnC;AAA6CC,MAAAA,QAA7C;AAAuDC,MAAAA;AAAvD,KAAkE;AAC7E,SAAKC,OAAL,GAAeb,aAAa,CAAC;AAAEM,MAAAA,IAAF;AAAQC,MAAAA,IAAR;AAAcC,MAAAA,MAAd;AAAsBC,MAAAA,MAAtB;AAA8BC,MAAAA,QAA9B;AAAwCC,MAAAA;AAAxC,KAAD,CAA5B;AACA,SAAKG,OAAL,GAAeb,aAAa,CAAC;AAAEI,MAAAA,GAAF;AAAOC,MAAAA,IAAP;AAAaI,MAAAA,QAAb;AAAuBE,MAAAA;AAAvB,KAAD,CAA5B;AACA,SAAKG,MAAL,GAAc,IAAIb,SAAJ,CAAc;AAAEI,MAAAA,IAAF;AAAQM,MAAAA;AAAR,KAAd,CAAd;AACD;;AAhBkB","sourcesContent":["import { createPublish } from './publish.js'\nimport { createResolve } from './resolve.js'\nimport { PubSubAPI } from './pubsub/index.js'\n\nexport class NameAPI {\n  /**\n   * @param {object} config\n   * @param {import('../ipns').IPNSAPI} config.ipns\n   * @param {import('@libp2p/interface-peer-id').PeerId} config.peerId\n   * @param {import('../../types').Options} config.options\n   * @param {import('ipfs-repo').IPFSRepo} config.repo\n   * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"isOnline\"]} config.isOnline\n   * @param {import('@libp2p/interface-keychain').KeyChain} config.keychain\n   * @param {import('ipfs-core-types/src/root').API<{}>[\"dns\"]} config.dns\n   */\n  constructor ({ dns, ipns, repo, codecs, peerId, isOnline, keychain, options }) {\n    this.publish = createPublish({ ipns, repo, codecs, peerId, isOnline, keychain })\n    this.resolve = createResolve({ dns, ipns, isOnline, options })\n    this.pubsub = new PubSubAPI({ ipns, options })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}