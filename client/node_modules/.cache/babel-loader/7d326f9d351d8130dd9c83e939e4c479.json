{"ast":null,"code":"import mergeOpts from 'merge-options';\nimport { toMfsPath } from './utils/to-mfs-path.js';\nimport { exporter } from 'ipfs-unixfs-exporter';\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport * as dagPB from '@ipld/dag-pb';\nconst mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\nconst log = logger('ipfs:mfs:stat');\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\nconst defaultOptions = {\n  withLocal: false\n};\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\n\nexport function createStat(context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"stat\"]}\n   */\n  async function mfsStat(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options);\n    log(`Fetching stats for ${path}`);\n    const {\n      type,\n      cid,\n      mfsPath\n    } = await toMfsPath(context, path, options);\n    const exportPath = type === 'ipfs' && cid ? cid : mfsPath;\n    let file;\n\n    try {\n      file = await exporter(exportPath, context.repo.blocks);\n    } catch (\n    /** @type {any} */\n    err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND');\n      }\n\n      throw err;\n    }\n\n    if (!statters[file.type]) {\n      throw new Error(`Cannot stat codec ${file.cid.code}`);\n    }\n\n    return statters[file.type](file);\n  }\n\n  return withTimeoutOption(mfsStat);\n}\n/** @type {Record<string, (file:any) => StatResult>} */\n\nconst statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: file => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: file => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'file',\n      size: file.unixfs.fileSize(),\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    };\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime;\n    }\n\n    return stat;\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: file => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    };\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime;\n    }\n\n    return stat;\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: file => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file',\n      // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  },\n\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: file => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file',\n      // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    };\n  }\n};","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/files/stat.js"],"names":["mergeOpts","toMfsPath","exporter","logger","errCode","withTimeoutOption","dagPB","mergeOptions","bind","ignoreUndefined","log","defaultOptions","withLocal","createStat","context","mfsStat","path","options","type","cid","mfsPath","exportPath","file","repo","blocks","err","code","Error","statters","raw","size","node","length","cumulativeSize","local","undefined","sizeLocal","withLocality","stat","unixfs","fileSize","encode","Links","reduce","acc","curr","Tsize","blockSizes","mode","mtime","directory","object","identity"],"mappings":"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","sourcesContent":["import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { exporter } from 'ipfs-unixfs-exporter'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport * as dagPB from '@ipld/dag-pb'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:stat')\n\n/**\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} withLocal\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  withLocal: false\n}\n\n/**\n * @typedef {import('ipfs-core-types/src/files').StatResult} StatResult\n */\n\n/**\n * @param {MfsContext} context\n */\nexport function createStat (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"stat\"]}\n   */\n  async function mfsStat (path, options = {}) {\n    /** @type {DefaultOptions} */\n    options = mergeOptions(defaultOptions, options)\n\n    log(`Fetching stats for ${path}`)\n\n    const {\n      type,\n      cid,\n      mfsPath\n    } = await toMfsPath(context, path, options)\n\n    const exportPath = type === 'ipfs' && cid ? cid : mfsPath\n    let file\n\n    try {\n      file = await exporter(exportPath, context.repo.blocks)\n    } catch (/** @type {any} */ err) {\n      if (err.code === 'ERR_NOT_FOUND') {\n        throw errCode(new Error(`${path} does not exist`), 'ERR_NOT_FOUND')\n      }\n\n      throw err\n    }\n\n    if (!statters[file.type]) {\n      throw new Error(`Cannot stat codec ${file.cid.code}`)\n    }\n\n    return statters[file.type](file)\n  }\n\n  return withTimeoutOption(mfsStat)\n}\n\n/** @type {Record<string, (file:any) => StatResult>} */\nconst statters = {\n  /**\n   * @param {import('ipfs-unixfs-exporter').RawNode} file\n   */\n  raw: (file) => {\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSFile} file\n   */\n  file: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'file',\n      size: file.unixfs.fileSize(),\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.unixfs.blockSizes.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').UnixFSDirectory} file\n   */\n  directory: (file) => {\n    /** @type {StatResult} */\n    const stat = {\n      cid: file.cid,\n      type: 'directory',\n      size: 0,\n      cumulativeSize: dagPB.encode(file.node).length + (file.node.Links || []).reduce((acc, curr) => acc + (curr.Tsize || 0), 0),\n      blocks: file.node.Links.length,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false,\n      mode: file.unixfs.mode\n    }\n\n    if (file.unixfs.mtime) {\n      stat.mtime = file.unixfs.mtime\n    }\n\n    return stat\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').ObjectNode} file\n   */\n  object: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      type: 'file', // for go compatibility\n      blocks: 0,\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  },\n  /**\n   * @param {import('ipfs-unixfs-exporter').IdentityNode} file\n   */\n  identity: (file) => {\n    /** @type {StatResult} */\n    return {\n      cid: file.cid,\n      size: file.node.length,\n      cumulativeSize: file.node.length,\n      blocks: 0,\n      type: 'file', // for go compatibility\n      local: undefined,\n      sizeLocal: undefined,\n      withLocality: false\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}