{"ast":null,"code":"import drain from 'it-drain';\nimport errCode from 'err-code';\n/**\n * Wrapper class to convert events into returned values\n */\n\nexport class DHTContentRouting {\n  constructor(dht) {\n    this.dht = dht;\n  }\n\n  async provide(cid) {\n    await drain(this.dht.provide(cid));\n  }\n\n  async *findProviders(cid) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    for await (const event of this.dht.findProviders(cid, options)) {\n      if (event.name === 'PROVIDER') {\n        yield* event.providers;\n      }\n    }\n  }\n\n  async put(key, value, options) {\n    await drain(this.dht.put(key, value, options));\n  }\n\n  async get(key, options) {\n    for await (const event of this.dht.get(key, options)) {\n      if (event.name === 'VALUE') {\n        return event.value;\n      }\n    }\n\n    throw errCode(new Error('Not found'), 'ERR_NOT_FOUND');\n  }\n\n}","map":{"version":3,"mappings":"AAAA,OAAOA,KAAP,MAAkB,UAAlB;AACA,OAAOC,OAAP,MAAoB,UAApB;AAMA;;;;AAGA,OAAM,MAAOC,iBAAP,CAAwB;AAG5BC,cAAaC,GAAb,EAAqB;AACnB,SAAKA,GAAL,GAAWA,GAAX;AACD;;AAEY,QAAPC,OAAO,CAAEC,GAAF,EAAU;AACrB,UAAMN,KAAK,CAAC,KAAKI,GAAL,CAASC,OAAT,CAAiBC,GAAjB,CAAD,CAAX;AACD;;AAEoB,SAAbC,aAAa,CAAED,GAAF,EAAsC;AAAA,QAA1BE,OAA0B,uEAAF,EAAE;;AACzD,eAAW,MAAMC,KAAjB,IAA0B,KAAKL,GAAL,CAASG,aAAT,CAAuBD,GAAvB,EAA4BE,OAA5B,CAA1B,EAAgE;AAC9D,UAAIC,KAAK,CAACC,IAAN,KAAe,UAAnB,EAA+B;AAC7B,eAAQD,KAAK,CAACE,SAAd;AACD;AACF;AACF;;AAEQ,QAAHC,GAAG,CAAEC,GAAF,EAAmBC,KAAnB,EAAsCN,OAAtC,EAA4D;AACnE,UAAMR,KAAK,CAAC,KAAKI,GAAL,CAASQ,GAAT,CAAaC,GAAb,EAAkBC,KAAlB,EAAyBN,OAAzB,CAAD,CAAX;AACD;;AAEQ,QAAHO,GAAG,CAAEF,GAAF,EAAmBL,OAAnB,EAAyC;AAChD,eAAW,MAAMC,KAAjB,IAA0B,KAAKL,GAAL,CAASW,GAAT,CAAaF,GAAb,EAAkBL,OAAlB,CAA1B,EAAsD;AACpD,UAAIC,KAAK,CAACC,IAAN,KAAe,OAAnB,EAA4B;AAC1B,eAAOD,KAAK,CAACK,KAAb;AACD;AACF;;AAED,UAAMb,OAAO,CAAC,IAAIe,KAAJ,CAAU,WAAV,CAAD,EAAyB,eAAzB,CAAb;AACD;;AA/B2B","names":["drain","errCode","DHTContentRouting","constructor","dht","provide","cid","findProviders","options","event","name","providers","put","key","value","get","Error"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\libp2p\\src\\dht\\dht-content-routing.ts"],"sourcesContent":["import drain from 'it-drain'\nimport errCode from 'err-code'\nimport type { DHT } from '@libp2p/interface-dht'\nimport type { ContentRouting } from '@libp2p/interface-content-routing'\nimport type { CID } from 'multiformats/cid'\nimport type { AbortOptions } from '@libp2p/interfaces'\n\n/**\n * Wrapper class to convert events into returned values\n */\nexport class DHTContentRouting implements ContentRouting {\n  private readonly dht: DHT\n\n  constructor (dht: DHT) {\n    this.dht = dht\n  }\n\n  async provide (cid: CID) {\n    await drain(this.dht.provide(cid))\n  }\n\n  async * findProviders (cid: CID, options: AbortOptions = {}) {\n    for await (const event of this.dht.findProviders(cid, options)) {\n      if (event.name === 'PROVIDER') {\n        yield * event.providers\n      }\n    }\n  }\n\n  async put (key: Uint8Array, value: Uint8Array, options?: AbortOptions): Promise<void> {\n    await drain(this.dht.put(key, value, options))\n  }\n\n  async get (key: Uint8Array, options?: AbortOptions): Promise<Uint8Array> {\n    for await (const event of this.dht.get(key, options)) {\n      if (event.name === 'VALUE') {\n        return event.value\n      }\n    }\n\n    throw errCode(new Error('Not found'), 'ERR_NOT_FOUND')\n  }\n}\n"]},"metadata":{},"sourceType":"module"}