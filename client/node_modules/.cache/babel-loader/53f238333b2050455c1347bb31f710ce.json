{"ast":null,"code":"import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path';\nimport { resolvePath } from '../../utils.js';\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\n\nexport function createResolve(_ref) {\n  let {\n    repo,\n    codecs,\n    preload\n  } = _ref;\n\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"resolve\"]}\n   */\n  async function dagResolve(ipfsPath) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      cid\n    } = toCidAndPath(ipfsPath);\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    return resolvePath(repo, codecs, ipfsPath, options);\n  }\n\n  return withTimeoutOption(dagResolve);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/dag/resolve.js"],"names":["withTimeoutOption","toCidAndPath","resolvePath","createResolve","repo","codecs","preload","dagResolve","ipfsPath","options","cid"],"mappings":"AAAA,SAASA,iBAAT,QAAkC,qCAAlC;AACA,SAASC,YAAT,QAA6B,iCAA7B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,aAAT,OAAmD;AAAA,MAA3B;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,MAAR;AAAgBC,IAAAA;AAAhB,GAA2B;;AACxD;AACF;AACA;AACE,iBAAeC,UAAf,CAA2BC,QAA3B,EAAmD;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AACjD,UAAM;AACJC,MAAAA;AADI,QAEFT,YAAY,CAACO,QAAD,CAFhB;;AAIA,QAAIC,OAAO,CAACH,OAAR,KAAoB,KAAxB,EAA+B;AAC7BA,MAAAA,OAAO,CAACI,GAAD,CAAP;AACD;;AAED,WAAOR,WAAW,CAACE,IAAD,EAAOC,MAAP,EAAeG,QAAf,EAAyBC,OAAzB,CAAlB;AACD;;AAED,SAAOT,iBAAiB,CAACO,UAAD,CAAxB;AACD","sourcesContent":["import { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\nimport { toCidAndPath } from 'ipfs-core-utils/to-cid-and-path'\nimport { resolvePath } from '../../utils.js'\n\n/**\n * @param {object} config\n * @param {import('ipfs-core-utils/multicodecs').Multicodecs} config.codecs\n * @param {import('ipfs-repo').IPFSRepo} config.repo\n * @param {import('../../types').Preload} config.preload\n */\nexport function createResolve ({ repo, codecs, preload }) {\n  /**\n   * @type {import('ipfs-core-types/src/dag').API<{}>[\"resolve\"]}\n   */\n  async function dagResolve (ipfsPath, options = {}) {\n    const {\n      cid\n    } = toCidAndPath(ipfsPath)\n\n    if (options.preload !== false) {\n      preload(cid)\n    }\n\n    return resolvePath(repo, codecs, ipfsPath, options)\n  }\n\n  return withTimeoutOption(dagResolve)\n}\n"]},"metadata":{},"sourceType":"module"}