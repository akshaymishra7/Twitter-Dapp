{"ast":null,"code":"const events = {};\n\nconst observable = worker => {\n  worker.addEventListener('message', event => {\n    observable.dispatchEvent('message', worker, event);\n  });\n\n  if (worker.port != null) {\n    worker.port.addEventListener('message', event => {\n      observable.dispatchEvent('message', worker, event);\n    });\n  }\n};\n\nobservable.addEventListener = (type, fn) => {\n  if (events[type] == null) {\n    events[type] = [];\n  }\n\n  events[type].push(fn);\n};\n\nobservable.removeEventListener = (type, fn) => {\n  if (events[type] == null) {\n    return;\n  }\n\n  events[type] = events[type].filter(listener => listener === fn);\n};\n\nobservable.dispatchEvent = function (type, worker, event) {\n  if (events[type] == null) {\n    return;\n  }\n\n  events[type].forEach(fn => fn(worker, event));\n};\n\nexport default observable;","map":{"version":3,"mappings":"AAIA,MAAMA,MAAM,GAA6C,EAAzD;;AAEA,MAAMC,UAAU,GAAIC,MAAD,IAAoC;AACrDA,QAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAoCC,KAAD,IAAU;AAC3CH,cAAU,CAACI,aAAX,CAAyB,SAAzB,EAAoCH,MAApC,EAA4CE,KAA5C;AACD,GAFD;;AAIA,MAAIF,MAAM,CAACI,IAAP,IAAe,IAAnB,EAAyB;AACvBJ,UAAM,CAACI,IAAP,CAAYH,gBAAZ,CAA6B,SAA7B,EAAyCC,KAAD,IAAe;AACrDH,gBAAU,CAACI,aAAX,CAAyB,SAAzB,EAAoCH,MAApC,EAA4CE,KAA5C;AACD,KAFD;AAGD;AACF,CAVD;;AAYAH,UAAU,CAACE,gBAAX,GAA8B,CAACI,IAAD,EAAeC,EAAf,KAA6C;AACzE,MAAIR,MAAM,CAACO,IAAD,CAAN,IAAgB,IAApB,EAA0B;AACxBP,UAAM,CAACO,IAAD,CAAN,GAAe,EAAf;AACD;;AAEDP,QAAM,CAACO,IAAD,CAAN,CAAaE,IAAb,CAAkBD,EAAlB;AACD,CAND;;AAQAP,UAAU,CAACS,mBAAX,GAAiC,CAACH,IAAD,EAAeC,EAAf,KAA6C;AAC5E,MAAIR,MAAM,CAACO,IAAD,CAAN,IAAgB,IAApB,EAA0B;AACxB;AACD;;AAEDP,QAAM,CAACO,IAAD,CAAN,GAAeP,MAAM,CAACO,IAAD,CAAN,CACZI,MADY,CACLC,QAAQ,IAAIA,QAAQ,KAAKJ,EADpB,CAAf;AAED,CAPD;;AASAP,UAAU,CAACI,aAAX,GAA2B,UAAUE,IAAV,EAAwBL,MAAxB,EAAwCE,KAAxC,EAAgE;AACzF,MAAIJ,MAAM,CAACO,IAAD,CAAN,IAAgB,IAApB,EAA0B;AACxB;AACD;;AAEDP,QAAM,CAACO,IAAD,CAAN,CAAaM,OAAb,CAAqBL,EAAE,IAAIA,EAAE,CAACN,MAAD,EAASE,KAAT,CAA7B;AACD,CAND;;AAQA,eAAeH,UAAf","names":["events","observable","worker","addEventListener","event","dispatchEvent","port","type","fn","push","removeEventListener","filter","listener","forEach"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\observable-webworkers\\src\\index.ts"],"sourcesContent":["export interface WebworkerEventListener <T = any> {\n  (worker: Worker, event: MessageEvent<T>): void\n}\n\nconst events: Record<string, WebworkerEventListener[]> = {}\n\nconst observable = (worker: Worker & { port?: any }) => {\n  worker.addEventListener('message', (event) => {\n    observable.dispatchEvent('message', worker, event)\n  })\n\n  if (worker.port != null) {\n    worker.port.addEventListener('message', (event: any) => {\n      observable.dispatchEvent('message', worker, event)\n    })\n  }\n}\n\nobservable.addEventListener = (type: string, fn: WebworkerEventListener) => {\n  if (events[type] == null) {\n    events[type] = []\n  }\n\n  events[type].push(fn)\n}\n\nobservable.removeEventListener = (type: string, fn: WebworkerEventListener) => {\n  if (events[type] == null) {\n    return\n  }\n\n  events[type] = events[type]\n    .filter(listener => listener === fn)\n}\n\nobservable.dispatchEvent = function (type: string, worker: Worker, event: MessageEvent<any>) {\n  if (events[type] == null) {\n    return\n  }\n\n  events[type].forEach(fn => fn(worker, event))\n}\n\nexport default observable\n"]},"metadata":{},"sourceType":"module"}