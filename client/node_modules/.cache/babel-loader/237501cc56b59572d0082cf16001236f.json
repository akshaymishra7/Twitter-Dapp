{"ast":null,"code":"import mergeOpts from 'merge-options';\nimport { toMfsPath } from './utils/to-mfs-path.js';\nimport { logger } from '@libp2p/logger';\nimport errCode from 'err-code';\nimport { UnixFS } from 'ipfs-unixfs';\nimport { toTrail } from './utils/to-trail.js';\nimport { addLink } from './utils/add-link.js';\nimport { updateTree } from './utils/update-tree.js';\nimport { updateMfsRoot } from './utils/update-mfs-root.js';\nimport * as dagPB from '@ipld/dag-pb';\nimport { CID } from 'multiformats/cid';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nconst mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\nconst log = logger('ipfs:mfs:touch');\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} flush\n * @property {number} shardSplitThreshold\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {MtimeLike} [mtime]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\nconst defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256'\n};\n/**\n * @param {MfsContext} context\n */\n\nexport function createTouch(context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"touch\"]}\n   */\n  async function mfsTouch(path) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    /** @type {DefaultOptions} */\n    const settings = mergeOptions(defaultOptions, options);\n    settings.mtime = settings.mtime || new Date();\n    log(`Touching ${path} mtime: ${settings.mtime}`);\n    const {\n      cid,\n      mfsDirectory,\n      name,\n      exists\n    } = await toMfsPath(context, path, settings);\n    const hashAlg = options.hashAlg || defaultOptions.hashAlg;\n    const hasher = await context.hashers.getHasher(hashAlg);\n    let updatedBlock;\n    let updatedCid;\n    let cidVersion = settings.cidVersion;\n\n    if (!exists) {\n      const metadata = new UnixFS({\n        type: 'file',\n        mtime: settings.mtime\n      });\n      updatedBlock = dagPB.encode({\n        Data: metadata.marshal(),\n        Links: []\n      });\n      const hash = await hasher.digest(updatedBlock);\n      updatedCid = CID.create(settings.cidVersion, dagPB.code, hash);\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock);\n      }\n    } else {\n      if (cid.code !== dagPB.code) {\n        throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS');\n      }\n\n      cidVersion = cid.version;\n      const block = await context.repo.blocks.get(cid);\n      const node = dagPB.decode(block);\n\n      if (!node.Data) {\n        throw errCode(new Error(`${path} had no data`), 'ERR_INVALID_NODE');\n      }\n\n      const metadata = UnixFS.unmarshal(node.Data); // @ts-expect-error TODO: restore setting all date types as mtime - it's in the code, just not the signature\n\n      metadata.mtime = settings.mtime;\n      updatedBlock = dagPB.encode({\n        Data: metadata.marshal(),\n        Links: node.Links\n      });\n      const hash = await hasher.digest(updatedBlock);\n      updatedCid = CID.create(settings.cidVersion, dagPB.code, hash);\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock);\n      }\n    }\n\n    const trail = await toTrail(context, mfsDirectory);\n    const parent = trail[trail.length - 1];\n    const parentCid = parent.cid;\n    const parentBlock = await context.repo.blocks.get(parentCid);\n    const parentNode = dagPB.decode(parentBlock);\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: updatedBlock.length,\n      flush: settings.flush,\n      shardSplitThreshold: settings.shardSplitThreshold,\n      hashAlg: settings.hashAlg,\n      cidVersion\n    });\n    parent.cid = result.cid; // update the tree with the new child\n\n    const newRootCid = await updateTree(context, trail, settings); // Update the MFS record with the new CID for the root of the tree\n\n    await updateMfsRoot(context, newRootCid, settings);\n  }\n\n  return withTimeoutOption(mfsTouch);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/files/touch.js"],"names":["mergeOpts","toMfsPath","logger","errCode","UnixFS","toTrail","addLink","updateTree","updateMfsRoot","dagPB","CID","withTimeoutOption","mergeOptions","bind","ignoreUndefined","log","defaultOptions","flush","shardSplitThreshold","cidVersion","hashAlg","createTouch","context","mfsTouch","path","options","settings","mtime","Date","cid","mfsDirectory","name","exists","hasher","hashers","getHasher","updatedBlock","updatedCid","metadata","type","encode","Data","marshal","Links","hash","digest","create","code","repo","blocks","put","Error","version","block","get","node","decode","unmarshal","trail","parent","length","parentCid","parentBlock","parentNode","result","size","newRootCid"],"mappings":"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","sourcesContent":["import mergeOpts from 'merge-options'\nimport { toMfsPath } from './utils/to-mfs-path.js'\nimport { logger } from '@libp2p/logger'\nimport errCode from 'err-code'\nimport { UnixFS } from 'ipfs-unixfs'\nimport { toTrail } from './utils/to-trail.js'\nimport { addLink } from './utils/add-link.js'\nimport { updateTree } from './utils/update-tree.js'\nimport { updateMfsRoot } from './utils/update-mfs-root.js'\nimport * as dagPB from '@ipld/dag-pb'\nimport { CID } from 'multiformats/cid'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\nconst log = logger('ipfs:mfs:touch')\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('ipfs-unixfs').MtimeLike} MtimeLike\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} flush\n * @property {number} shardSplitThreshold\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {MtimeLike} [mtime]\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  flush: true,\n  shardSplitThreshold: 1000,\n  cidVersion: 0,\n  hashAlg: 'sha2-256'\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createTouch (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"touch\"]}\n   */\n  async function mfsTouch (path, options = {}) {\n    /** @type {DefaultOptions} */\n    const settings = mergeOptions(defaultOptions, options)\n    settings.mtime = settings.mtime || new Date()\n\n    log(`Touching ${path} mtime: ${settings.mtime}`)\n\n    const {\n      cid,\n      mfsDirectory,\n      name,\n      exists\n    } = await toMfsPath(context, path, settings)\n\n    const hashAlg = options.hashAlg || defaultOptions.hashAlg\n    const hasher = await context.hashers.getHasher(hashAlg)\n\n    let updatedBlock\n    let updatedCid\n\n    let cidVersion = settings.cidVersion\n\n    if (!exists) {\n      const metadata = new UnixFS({\n        type: 'file',\n        mtime: settings.mtime\n      })\n      updatedBlock = dagPB.encode({ Data: metadata.marshal(), Links: [] })\n\n      const hash = await hasher.digest(updatedBlock)\n\n      updatedCid = CID.create(settings.cidVersion, dagPB.code, hash)\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock)\n      }\n    } else {\n      if (cid.code !== dagPB.code) {\n        throw errCode(new Error(`${path} was not a UnixFS node`), 'ERR_NOT_UNIXFS')\n      }\n\n      cidVersion = cid.version\n\n      const block = await context.repo.blocks.get(cid)\n      const node = dagPB.decode(block)\n\n      if (!node.Data) {\n        throw errCode(new Error(`${path} had no data`), 'ERR_INVALID_NODE')\n      }\n\n      const metadata = UnixFS.unmarshal(node.Data)\n\n      // @ts-expect-error TODO: restore setting all date types as mtime - it's in the code, just not the signature\n      metadata.mtime = settings.mtime\n\n      updatedBlock = dagPB.encode({\n        Data: metadata.marshal(),\n        Links: node.Links\n      })\n\n      const hash = await hasher.digest(updatedBlock)\n      updatedCid = CID.create(settings.cidVersion, dagPB.code, hash)\n\n      if (settings.flush) {\n        await context.repo.blocks.put(updatedCid, updatedBlock)\n      }\n    }\n\n    const trail = await toTrail(context, mfsDirectory)\n    const parent = trail[trail.length - 1]\n    const parentCid = parent.cid\n    const parentBlock = await context.repo.blocks.get(parentCid)\n    const parentNode = dagPB.decode(parentBlock)\n\n    const result = await addLink(context, {\n      parent: parentNode,\n      name: name,\n      cid: updatedCid,\n      size: updatedBlock.length,\n      flush: settings.flush,\n      shardSplitThreshold: settings.shardSplitThreshold,\n      hashAlg: settings.hashAlg,\n      cidVersion\n    })\n\n    parent.cid = result.cid\n\n    // update the tree with the new child\n    const newRootCid = await updateTree(context, trail, settings)\n\n    // Update the MFS record with the new CID for the root of the tree\n    await updateMfsRoot(context, newRootCid, settings)\n  }\n\n  return withTimeoutOption(mfsTouch)\n}\n"]},"metadata":{},"sourceType":"module"}