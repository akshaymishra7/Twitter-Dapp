{"ast":null,"code":"/**\n * Stop iteration after n items have been received\n */\nexport default async function* take(source, limit) {\n  let items = 0;\n\n  if (limit < 1) {\n    return;\n  }\n\n  for await (const entry of source) {\n    yield entry;\n    items++;\n\n    if (items === limit) {\n      return;\n    }\n  }\n}","map":{"version":3,"mappings":"AACA;;;AAGA,eAAe,gBAAiBA,IAAjB,CAA2BC,MAA3B,EAAmEC,KAAnE,EAAgF;AAC7F,MAAIC,KAAK,GAAG,CAAZ;;AAEA,MAAID,KAAK,GAAG,CAAZ,EAAe;AACb;AACD;;AAED,aAAW,MAAME,KAAjB,IAA0BH,MAA1B,EAAkC;AAChC,UAAMG,KAAN;AAEAD,SAAK;;AAEL,QAAIA,KAAK,KAAKD,KAAd,EAAqB;AACnB;AACD;AACF;AACF","names":["take","source","limit","items","entry"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\it-take\\src\\index.ts"],"sourcesContent":["\n/**\n * Stop iteration after n items have been received\n */\nexport default async function * take <T> (source: AsyncIterable<T> | Iterable<T>, limit: number): AsyncGenerator<T, void, undefined> {\n  let items = 0\n\n  if (limit < 1) {\n    return\n  }\n\n  for await (const entry of source) {\n    yield entry\n\n    items++\n\n    if (items === limit) {\n      return\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}