{"ast":null,"code":"import 'node-forge/lib/util.js';\nimport 'node-forge/lib/jsbn.js'; // @ts-expect-error types are missing\n\nimport forge from 'node-forge/lib/forge.js';\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string';\nexport function bigIntegerToUintBase64url(num, len) {\n  // Call `.abs()` to convert to unsigned\n  let buf = Uint8Array.from(num.abs().toByteArray()); // toByteArray converts to big endian\n  // toByteArray() gives us back a signed array, which will include a leading 0\n  // byte if the most significant bit of the number is 1:\n  // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer\n  // Our number will always be positive so we should remove the leading padding.\n\n  buf = buf[0] === 0 ? buf.subarray(1) : buf;\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length');\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);\n  }\n\n  return uint8ArrayToString(buf, 'base64url');\n} // Convert a base64url encoded string to a BigInteger\n\nexport function base64urlToBigInteger(str) {\n  const buf = base64urlToBuffer(str);\n  return new forge.jsbn.BigInteger(uint8ArrayToString(buf, 'base16'), 16);\n}\nexport function base64urlToBuffer(str, len) {\n  let buf = uint8ArrayFromString(str, 'base64urlpad');\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length');\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf]);\n  }\n\n  return buf;\n}","map":{"version":3,"mappings":"AAAA,OAAO,wBAAP;AACA,OAAO,wBAAP,C,CACA;;AACA,OAAOA,KAAP,MAAkB,yBAAlB;AACA,SAASC,MAAM,IAAIC,gBAAnB,QAA2C,oBAA3C;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AACA,SAASC,QAAQ,IAAIC,kBAArB,QAA+C,uBAA/C;AAEA,OAAM,SAAUC,yBAAV,CAAqCC,GAArC,EAA8DC,GAA9D,EAA0E;AAC9E;AACA,MAAIC,GAAG,GAAGC,UAAU,CAACC,IAAX,CAAgBJ,GAAG,CAACK,GAAJ,GAAUC,WAAV,EAAhB,CAAV,CAF8E,CAE3B;AAEnD;AACA;AACA;AACA;;AACAJ,KAAG,GAAGA,GAAG,CAAC,CAAD,CAAH,KAAW,CAAX,GAAeA,GAAG,CAACK,QAAJ,CAAa,CAAb,CAAf,GAAiCL,GAAvC;;AAEA,MAAID,GAAG,IAAI,IAAX,EAAiB;AACf,QAAIC,GAAG,CAACM,MAAJ,GAAaP,GAAjB,EAAsB,MAAM,IAAIQ,KAAJ,CAAU,uCAAV,CAAN;AACtBP,OAAG,GAAGR,gBAAgB,CAAC,CAAC,IAAIS,UAAJ,CAAeF,GAAG,GAAGC,GAAG,CAACM,MAAzB,CAAD,EAAmCN,GAAnC,CAAD,CAAtB;AACD;;AAED,SAAOJ,kBAAkB,CAACI,GAAD,EAAM,WAAN,CAAzB;AACD,C,CAED;;AACA,OAAM,SAAUQ,qBAAV,CAAiCC,GAAjC,EAA4C;AAChD,QAAMT,GAAG,GAAGU,iBAAiB,CAACD,GAAD,CAA7B;AACA,SAAO,IAAInB,KAAK,CAACqB,IAAN,CAAWC,UAAf,CAA0BhB,kBAAkB,CAACI,GAAD,EAAM,QAAN,CAA5C,EAA6D,EAA7D,CAAP;AACD;AAED,OAAM,SAAUU,iBAAV,CAA6BD,GAA7B,EAA0CV,GAA1C,EAAsD;AAC1D,MAAIC,GAAG,GAAGN,oBAAoB,CAACe,GAAD,EAAM,cAAN,CAA9B;;AAEA,MAAIV,GAAG,IAAI,IAAX,EAAiB;AACf,QAAIC,GAAG,CAACM,MAAJ,GAAaP,GAAjB,EAAsB,MAAM,IAAIQ,KAAJ,CAAU,uCAAV,CAAN;AACtBP,OAAG,GAAGR,gBAAgB,CAAC,CAAC,IAAIS,UAAJ,CAAeF,GAAG,GAAGC,GAAG,CAACM,MAAzB,CAAD,EAAmCN,GAAnC,CAAD,CAAtB;AACD;;AAED,SAAOA,GAAP;AACD","names":["forge","concat","uint8ArrayConcat","fromString","uint8ArrayFromString","toString","uint8ArrayToString","bigIntegerToUintBase64url","num","len","buf","Uint8Array","from","abs","toByteArray","subarray","length","Error","base64urlToBigInteger","str","base64urlToBuffer","jsbn","BigInteger"],"sources":["C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\node_modules\\@libp2p\\crypto\\src\\util.ts"],"sourcesContent":["import 'node-forge/lib/util.js'\nimport 'node-forge/lib/jsbn.js'\n// @ts-expect-error types are missing\nimport forge from 'node-forge/lib/forge.js'\nimport { concat as uint8ArrayConcat } from 'uint8arrays/concat'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport { toString as uint8ArrayToString } from 'uint8arrays/to-string'\n\nexport function bigIntegerToUintBase64url (num: { abs: () => any }, len?: number): string {\n  // Call `.abs()` to convert to unsigned\n  let buf = Uint8Array.from(num.abs().toByteArray()) // toByteArray converts to big endian\n\n  // toByteArray() gives us back a signed array, which will include a leading 0\n  // byte if the most significant bit of the number is 1:\n  // https://docs.microsoft.com/en-us/windows/win32/seccertenroll/about-integer\n  // Our number will always be positive so we should remove the leading padding.\n  buf = buf[0] === 0 ? buf.subarray(1) : buf\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length')\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf])\n  }\n\n  return uint8ArrayToString(buf, 'base64url')\n}\n\n// Convert a base64url encoded string to a BigInteger\nexport function base64urlToBigInteger (str: string): typeof forge.jsbn.BigInteger {\n  const buf = base64urlToBuffer(str)\n  return new forge.jsbn.BigInteger(uint8ArrayToString(buf, 'base16'), 16)\n}\n\nexport function base64urlToBuffer (str: string, len?: number): Uint8Array {\n  let buf = uint8ArrayFromString(str, 'base64urlpad')\n\n  if (len != null) {\n    if (buf.length > len) throw new Error('byte array longer than desired length')\n    buf = uint8ArrayConcat([new Uint8Array(len - buf.length), buf])\n  }\n\n  return buf\n}\n"]},"metadata":{},"sourceType":"module"}