{"ast":null,"code":"// @ts-ignore\nimport debounce from 'just-debounce-it';\nimport { BitswapMessage as Message } from '../message/index.js';\nimport { logger } from '../utils/index.js';\nimport { wantlistSendDebounceMs } from '../constants.js';\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('../network').Network} Network\n */\n\nexport class MsgQueue {\n  /**\n   * @param {PeerId} selfPeerId\n   * @param {PeerId} otherPeerId\n   * @param {Network} network\n   */\n  constructor(selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId;\n    this.network = network;\n    this.refcnt = 1;\n    /**\n     * @private\n     * @type {{cid:CID, priority:number, cancel?:boolean}[]}\n     */\n\n    this._entries = [];\n    /** @private */\n\n    this._log = logger(selfPeerId, 'msgqueue');\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs);\n  }\n  /**\n   * @param {Message} msg\n   */\n\n\n  addMessage(msg) {\n    if (msg.empty) {\n      return;\n    }\n\n    this.send(msg);\n  }\n  /**\n   * @param {{cid:CID, priority:number}[]} entries\n   */\n\n\n  addEntries(entries) {\n    this._entries = this._entries.concat(entries);\n    this.sendEntries();\n  }\n  /**\n   * @private\n   */\n\n\n  _sendEntries() {\n    if (!this._entries.length) {\n      return;\n    }\n\n    const msg = new Message(false);\n\n    this._entries.forEach(entry => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid);\n      } else {\n        msg.addEntry(entry.cid, entry.priority);\n      }\n    });\n\n    this._entries = [];\n    this.addMessage(msg);\n  }\n  /**\n   * @param {Message} msg\n   */\n\n\n  async send(msg) {\n    try {\n      await this.network.connectTo(this.peerId);\n    } catch (\n    /** @type {any} */\n    err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toString(), err.message);\n\n      return;\n    }\n\n    this._log('sending message to peer %s', this.peerId.toString()); // Note: Don't wait for sendMessage() to complete\n\n\n    this.network.sendMessage(this.peerId, msg).catch(err => {\n      this._log.error('send error: %s', err.message);\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-bitswap/src/want-manager/msg-queue.js"],"names":["debounce","BitswapMessage","Message","logger","wantlistSendDebounceMs","MsgQueue","constructor","selfPeerId","otherPeerId","network","peerId","refcnt","_entries","_log","sendEntries","_sendEntries","bind","addMessage","msg","empty","send","addEntries","entries","concat","length","forEach","entry","cancel","cid","addEntry","priority","connectTo","err","error","toString","message","sendMessage","catch"],"mappings":"AACA;AACA,OAAOA,QAAP,MAAqB,kBAArB;AACA,SAASC,cAAc,IAAIC,OAA3B,QAA0C,qBAA1C;AACA,SAASC,MAAT,QAAuB,mBAAvB;AACA,SAASC,sBAAT,QAAuC,iBAAvC;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAN,CAAe;AACpB;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,UAAF,EAAcC,WAAd,EAA2BC,OAA3B,EAAoC;AAC7C,SAAKC,MAAL,GAAcF,WAAd;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKE,MAAL,GAAc,CAAd;AAEA;AACJ;AACA;AACA;;AACI,SAAKC,QAAL,GAAgB,EAAhB;AACA;;AACA,SAAKC,IAAL,GAAYV,MAAM,CAACI,UAAD,EAAa,UAAb,CAAlB;AACA,SAAKO,WAAL,GAAmBd,QAAQ,CAAC,KAAKe,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,EAA+BZ,sBAA/B,CAA3B;AACD;AAED;AACF;AACA;;;AACEa,EAAAA,UAAU,CAAEC,GAAF,EAAO;AACf,QAAIA,GAAG,CAACC,KAAR,EAAe;AACb;AACD;;AAED,SAAKC,IAAL,CAAUF,GAAV;AACD;AAED;AACF;AACA;;;AACEG,EAAAA,UAAU,CAAEC,OAAF,EAAW;AACnB,SAAKV,QAAL,GAAgB,KAAKA,QAAL,CAAcW,MAAd,CAAqBD,OAArB,CAAhB;AACA,SAAKR,WAAL;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,YAAY,GAAI;AACd,QAAI,CAAC,KAAKH,QAAL,CAAcY,MAAnB,EAA2B;AACzB;AACD;;AAED,UAAMN,GAAG,GAAG,IAAIhB,OAAJ,CAAY,KAAZ,CAAZ;;AACA,SAAKU,QAAL,CAAca,OAAd,CAAuBC,KAAD,IAAW;AAC/B,UAAIA,KAAK,CAACC,MAAV,EAAkB;AAChBT,QAAAA,GAAG,CAACS,MAAJ,CAAWD,KAAK,CAACE,GAAjB;AACD,OAFD,MAEO;AACLV,QAAAA,GAAG,CAACW,QAAJ,CAAaH,KAAK,CAACE,GAAnB,EAAwBF,KAAK,CAACI,QAA9B;AACD;AACF,KAND;;AAOA,SAAKlB,QAAL,GAAgB,EAAhB;AACA,SAAKK,UAAL,CAAgBC,GAAhB;AACD;AAED;AACF;AACA;;;AACY,QAAJE,IAAI,CAAEF,GAAF,EAAO;AACf,QAAI;AACF,YAAM,KAAKT,OAAL,CAAasB,SAAb,CAAuB,KAAKrB,MAA5B,CAAN;AACD,KAFD,CAEE;AAAO;AAAmBsB,IAAAA,GAA1B,EAA+B;AAC/B,WAAKnB,IAAL,CAAUoB,KAAV,CAAgB,6BAAhB,EAA+C,KAAKvB,MAAL,CAAYwB,QAAZ,EAA/C,EAAuEF,GAAG,CAACG,OAA3E;;AACA;AACD;;AAED,SAAKtB,IAAL,CAAU,4BAAV,EAAwC,KAAKH,MAAL,CAAYwB,QAAZ,EAAxC,EARe,CAUf;;;AACA,SAAKzB,OAAL,CAAa2B,WAAb,CAAyB,KAAK1B,MAA9B,EAAsCQ,GAAtC,EAA2CmB,KAA3C,CAAkDL,GAAD,IAAS;AACxD,WAAKnB,IAAL,CAAUoB,KAAV,CAAgB,gBAAhB,EAAkCD,GAAG,CAACG,OAAtC;AACD,KAFD;AAGD;;AA7EmB","sourcesContent":["\n// @ts-ignore\nimport debounce from 'just-debounce-it'\nimport { BitswapMessage as Message } from '../message/index.js'\nimport { logger } from '../utils/index.js'\nimport { wantlistSendDebounceMs } from '../constants.js'\n\n/**\n * @typedef {import('@libp2p/interface-peer-id').PeerId} PeerId\n * @typedef {import('multiformats').CID} CID\n * @typedef {import('../network').Network} Network\n */\n\nexport class MsgQueue {\n  /**\n   * @param {PeerId} selfPeerId\n   * @param {PeerId} otherPeerId\n   * @param {Network} network\n   */\n  constructor (selfPeerId, otherPeerId, network) {\n    this.peerId = otherPeerId\n    this.network = network\n    this.refcnt = 1\n\n    /**\n     * @private\n     * @type {{cid:CID, priority:number, cancel?:boolean}[]}\n     */\n    this._entries = []\n    /** @private */\n    this._log = logger(selfPeerId, 'msgqueue')\n    this.sendEntries = debounce(this._sendEntries.bind(this), wantlistSendDebounceMs)\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  addMessage (msg) {\n    if (msg.empty) {\n      return\n    }\n\n    this.send(msg)\n  }\n\n  /**\n   * @param {{cid:CID, priority:number}[]} entries\n   */\n  addEntries (entries) {\n    this._entries = this._entries.concat(entries)\n    this.sendEntries()\n  }\n\n  /**\n   * @private\n   */\n  _sendEntries () {\n    if (!this._entries.length) {\n      return\n    }\n\n    const msg = new Message(false)\n    this._entries.forEach((entry) => {\n      if (entry.cancel) {\n        msg.cancel(entry.cid)\n      } else {\n        msg.addEntry(entry.cid, entry.priority)\n      }\n    })\n    this._entries = []\n    this.addMessage(msg)\n  }\n\n  /**\n   * @param {Message} msg\n   */\n  async send (msg) {\n    try {\n      await this.network.connectTo(this.peerId)\n    } catch (/** @type {any} */ err) {\n      this._log.error('cant connect to peer %s: %s', this.peerId.toString(), err.message)\n      return\n    }\n\n    this._log('sending message to peer %s', this.peerId.toString())\n\n    // Note: Don't wait for sendMessage() to complete\n    this.network.sendMessage(this.peerId, msg).catch((err) => {\n      this._log.error('send error: %s', err.message)\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}