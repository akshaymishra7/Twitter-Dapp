{"ast":null,"code":"import { createCp } from './cp.js';\nimport { createRm } from './rm.js';\nimport mergeOpts from 'merge-options';\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option';\nconst mergeOptions = mergeOpts.bind({\n  ignoreUndefined: true\n});\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\n\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n};\n/**\n * @param {MfsContext} context\n */\n\nexport function createMv(context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"mv\"]}\n   */\n  async function mfsMv(from, to) {\n    let options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options);\n    await createCp(context)(from, to, opts);\n    await createRm(context)(from, { ...opts,\n      recursive: true\n    });\n  }\n\n  return withTimeoutOption(mfsMv);\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/files/mv.js"],"names":["createCp","createRm","mergeOpts","withTimeoutOption","mergeOptions","bind","ignoreUndefined","defaultOptions","parents","flush","cidVersion","hashAlg","shardSplitThreshold","createMv","context","mfsMv","from","to","options","opts","recursive"],"mappings":"AAAA,SAASA,QAAT,QAAyB,SAAzB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,iBAAT,QAAkC,qCAAlC;AAEA,MAAMC,YAAY,GAAGF,SAAS,CAACG,IAAV,CAAe;AAAEC,EAAAA,eAAe,EAAE;AAAnB,CAAf,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AACA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,OAAO,EAAE,KADY;AAErBC,EAAAA,KAAK,EAAE,IAFc;AAGrBC,EAAAA,UAAU,EAAE,CAHS;AAIrBC,EAAAA,OAAO,EAAE,UAJY;AAKrBC,EAAAA,mBAAmB,EAAE;AALA,CAAvB;AAQA;AACA;AACA;;AACA,OAAO,SAASC,QAAT,CAAmBC,OAAnB,EAA4B;AACjC;AACF;AACA;AACE,iBAAeC,KAAf,CAAsBC,IAAtB,EAA4BC,EAA5B,EAA8C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;;AAC5C;AACA,UAAMC,IAAI,GAAGf,YAAY,CAACG,cAAD,EAAiBW,OAAjB,CAAzB;AAEA,UAAMlB,QAAQ,CAACc,OAAD,CAAR,CAAkBE,IAAlB,EAAwBC,EAAxB,EAA4BE,IAA5B,CAAN;AACA,UAAMlB,QAAQ,CAACa,OAAD,CAAR,CAAkBE,IAAlB,EAAwB,EAC5B,GAAGG,IADyB;AAE5BC,MAAAA,SAAS,EAAE;AAFiB,KAAxB,CAAN;AAID;;AAED,SAAOjB,iBAAiB,CAACY,KAAD,CAAxB;AACD","sourcesContent":["import { createCp } from './cp.js'\nimport { createRm } from './rm.js'\nimport mergeOpts from 'merge-options'\nimport { withTimeoutOption } from 'ipfs-core-utils/with-timeout-option'\n\nconst mergeOptions = mergeOpts.bind({ ignoreUndefined: true })\n\n/**\n * @typedef {import('multiformats/cid').Version} CIDVersion\n * @typedef {import('./').MfsContext} MfsContext\n * @typedef {object} DefaultOptions\n * @property {boolean} parents\n * @property {boolean} flush\n * @property {CIDVersion} cidVersion\n * @property {string} hashAlg\n * @property {number} shardSplitThreshold\n * @property {AbortSignal} [signal]\n * @property {number} [timeout]\n */\n\n/**\n * @type {DefaultOptions}\n */\nconst defaultOptions = {\n  parents: false,\n  flush: true,\n  cidVersion: 0,\n  hashAlg: 'sha2-256',\n  shardSplitThreshold: 1000\n}\n\n/**\n * @param {MfsContext} context\n */\nexport function createMv (context) {\n  /**\n   * @type {import('ipfs-core-types/src/files').API<{}>[\"mv\"]}\n   */\n  async function mfsMv (from, to, options = {}) {\n    /** @type {DefaultOptions} */\n    const opts = mergeOptions(defaultOptions, options)\n\n    await createCp(context)(from, to, opts)\n    await createRm(context)(from, {\n      ...opts,\n      recursive: true\n    })\n  }\n\n  return withTimeoutOption(mfsMv)\n}\n"]},"metadata":{},"sourceType":"module"}