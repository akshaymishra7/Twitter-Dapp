{"ast":null,"code":"import errCode from 'err-code';\nimport { logger } from '@libp2p/logger';\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string';\nimport browserStreamToIt from 'browser-readablestream-to-it';\nconst log = logger('ipfs:mfs:utils:to-async-iterator');\n/**\n * @param {*} content\n */\n\nexport function toAsyncIterator(content) {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH');\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string');\n    content = uint8ArrayFromString(content.toString());\n  }\n\n  if (content.length) {\n    log('Content was array-like');\n    return {\n      [Symbol.asyncIterator]: function* bufferContent() {\n        yield content;\n      }\n    };\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator');\n    return content;\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator');\n    return content;\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob');\n    return browserStreamToIt(content.stream());\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS');\n}","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-core/src/components/files/utils/to-async-iterator.js"],"names":["errCode","logger","fromString","uint8ArrayFromString","browserStreamToIt","log","toAsyncIterator","content","Error","String","toString","length","Symbol","asyncIterator","bufferContent","iterator","global","Blob","stream"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,SAASC,MAAT,QAAuB,gBAAvB;AACA,SAASC,UAAU,IAAIC,oBAAvB,QAAmD,yBAAnD;AACA,OAAOC,iBAAP,MAA8B,8BAA9B;AAEA,MAAMC,GAAG,GAAGJ,MAAM,CAAC,kCAAD,CAAlB;AAEA;AACA;AACA;;AACA,OAAO,SAASK,eAAT,CAA0BC,OAA1B,EAAmC;AACxC,MAAI,CAACA,OAAL,EAAc;AACZ,UAAMP,OAAO,CAAC,IAAIQ,KAAJ,CAAU,uCAAV,CAAD,EAAqD,kBAArD,CAAb;AACD;;AAED,MAAI,OAAOD,OAAP,KAAmB,QAAnB,IAA+BA,OAAO,YAAYE,MAAtD,EAA8D;AAC5DJ,IAAAA,GAAG,CAAC,sBAAD,CAAH;AAEAE,IAAAA,OAAO,GAAGJ,oBAAoB,CAACI,OAAO,CAACG,QAAR,EAAD,CAA9B;AACD;;AAED,MAAIH,OAAO,CAACI,MAAZ,EAAoB;AAClBN,IAAAA,GAAG,CAAC,wBAAD,CAAH;AAEA,WAAO;AACL,OAACO,MAAM,CAACC,aAAR,GAAwB,UAAWC,aAAX,GAA4B;AAClD,cAAMP,OAAN;AACD;AAHI,KAAP;AAKD;;AAED,MAAIA,OAAO,CAACK,MAAM,CAACC,aAAR,CAAX,EAAmC;AACjCR,IAAAA,GAAG,CAAC,+BAAD,CAAH;AACA,WAAOE,OAAP;AACD;;AAED,MAAIA,OAAO,CAACK,MAAM,CAACG,QAAR,CAAX,EAA8B;AAC5BV,IAAAA,GAAG,CAAC,yBAAD,CAAH;AACA,WAAOE,OAAP;AACD;;AAED,MAAIS,MAAM,CAACC,IAAP,IAAeV,OAAO,YAAYS,MAAM,CAACC,IAA7C,EAAmD;AACjD;AACAZ,IAAAA,GAAG,CAAC,2BAAD,CAAH;AACA,WAAOD,iBAAiB,CAACG,OAAO,CAACW,MAAR,EAAD,CAAxB;AACD;;AAED,QAAMlB,OAAO,CAAC,IAAIQ,KAAJ,CAAW,6BAA4BD,OAAQ,yBAA/C,CAAD,EAA2E,oBAA3E,CAAb;AACD","sourcesContent":["import errCode from 'err-code'\nimport { logger } from '@libp2p/logger'\nimport { fromString as uint8ArrayFromString } from 'uint8arrays/from-string'\nimport browserStreamToIt from 'browser-readablestream-to-it'\n\nconst log = logger('ipfs:mfs:utils:to-async-iterator')\n\n/**\n * @param {*} content\n */\nexport function toAsyncIterator (content) {\n  if (!content) {\n    throw errCode(new Error('paths must start with a leading slash'), 'ERR_INVALID_PATH')\n  }\n\n  if (typeof content === 'string' || content instanceof String) {\n    log('Content was a string')\n\n    content = uint8ArrayFromString(content.toString())\n  }\n\n  if (content.length) {\n    log('Content was array-like')\n\n    return {\n      [Symbol.asyncIterator]: function * bufferContent () {\n        yield content\n      }\n    }\n  }\n\n  if (content[Symbol.asyncIterator]) {\n    log('Content was an async iterator')\n    return content\n  }\n\n  if (content[Symbol.iterator]) {\n    log('Content was an iterator')\n    return content\n  }\n\n  if (global.Blob && content instanceof global.Blob) {\n    // HTML5 Blob objects (including Files)\n    log('Content was an HTML5 Blob')\n    return browserStreamToIt(content.stream())\n  }\n\n  throw errCode(new Error(`Don't know how to convert ${content} into an async iterator`), 'ERR_INVALID_PARAMS')\n}\n"]},"metadata":{},"sourceType":"module"}