{"ast":null,"code":"import { UnixFS } from 'ipfs-unixfs';\nimport persist from '../../utils/persist.js';\nimport * as dagPb from '@ipld/dag-pb';\nimport * as raw from 'multiformats/codecs/raw';\n/**\n * @typedef {import('../../types').BufferImporter} BufferImporter\n */\n\n/**\n * @type {BufferImporter}\n */\n\nasync function* bufferImporter(file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path);\n      let unixfs;\n      /** @type {import('../../types').PersistOptions} */\n\n      const opts = {\n        codec: dagPb,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      };\n\n      if (options.rawLeaves) {\n        opts.codec = raw;\n        opts.cidVersion = 1;\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer\n        });\n        buffer = dagPb.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        });\n      }\n\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      };\n    };\n  }\n}\n\nexport default bufferImporter;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/node_modules/ipfs-unixfs-importer/src/dag-builder/file/buffer-importer.js"],"names":["UnixFS","persist","dagPb","raw","bufferImporter","file","block","options","buffer","content","progress","length","path","unixfs","opts","codec","cidVersion","hasher","onlyHash","rawLeaves","type","leafType","data","encode","Data","marshal","Links","cid","size"],"mappings":"AAAA,SAASA,MAAT,QAAuB,aAAvB;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AACA,OAAO,KAAKC,GAAZ,MAAqB,yBAArB;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AACA,gBAAiBC,cAAjB,CAAiCC,IAAjC,EAAuCC,KAAvC,EAA8CC,OAA9C,EAAuD;AACrD,aAAW,IAAIC,MAAf,IAAyBH,IAAI,CAACI,OAA9B,EAAuC;AACrC,UAAM,YAAY;AAChBF,MAAAA,OAAO,CAACG,QAAR,CAAiBF,MAAM,CAACG,MAAxB,EAAgCN,IAAI,CAACO,IAArC;AACA,UAAIC,MAAJ;AAEA;;AACA,YAAMC,IAAI,GAAG;AACXC,QAAAA,KAAK,EAAEb,KADI;AAEXc,QAAAA,UAAU,EAAET,OAAO,CAACS,UAFT;AAGXC,QAAAA,MAAM,EAAEV,OAAO,CAACU,MAHL;AAIXC,QAAAA,QAAQ,EAAEX,OAAO,CAACW;AAJP,OAAb;;AAOA,UAAIX,OAAO,CAACY,SAAZ,EAAuB;AACrBL,QAAAA,IAAI,CAACC,KAAL,GAAaZ,GAAb;AACAW,QAAAA,IAAI,CAACE,UAAL,GAAkB,CAAlB;AACD,OAHD,MAGO;AACLH,QAAAA,MAAM,GAAG,IAAIb,MAAJ,CAAW;AAClBoB,UAAAA,IAAI,EAAEb,OAAO,CAACc,QADI;AAElBC,UAAAA,IAAI,EAAEd;AAFY,SAAX,CAAT;AAKAA,QAAAA,MAAM,GAAGN,KAAK,CAACqB,MAAN,CAAa;AACpBC,UAAAA,IAAI,EAAEX,MAAM,CAACY,OAAP,EADc;AAEpBC,UAAAA,KAAK,EAAE;AAFa,SAAb,CAAT;AAID;;AAED,aAAO;AACLC,QAAAA,GAAG,EAAE,MAAM1B,OAAO,CAACO,MAAD,EAASF,KAAT,EAAgBQ,IAAhB,CADb;AAELD,QAAAA,MAFK;AAGLe,QAAAA,IAAI,EAAEpB,MAAM,CAACG;AAHR,OAAP;AAKD,KAhCD;AAiCD;AACF;;AAED,eAAeP,cAAf","sourcesContent":["import { UnixFS } from 'ipfs-unixfs'\nimport persist from '../../utils/persist.js'\nimport * as dagPb from '@ipld/dag-pb'\nimport * as raw from 'multiformats/codecs/raw'\n\n/**\n * @typedef {import('../../types').BufferImporter} BufferImporter\n */\n\n/**\n * @type {BufferImporter}\n */\nasync function * bufferImporter (file, block, options) {\n  for await (let buffer of file.content) {\n    yield async () => {\n      options.progress(buffer.length, file.path)\n      let unixfs\n\n      /** @type {import('../../types').PersistOptions} */\n      const opts = {\n        codec: dagPb,\n        cidVersion: options.cidVersion,\n        hasher: options.hasher,\n        onlyHash: options.onlyHash\n      }\n\n      if (options.rawLeaves) {\n        opts.codec = raw\n        opts.cidVersion = 1\n      } else {\n        unixfs = new UnixFS({\n          type: options.leafType,\n          data: buffer\n        })\n\n        buffer = dagPb.encode({\n          Data: unixfs.marshal(),\n          Links: []\n        })\n      }\n\n      return {\n        cid: await persist(buffer, block, opts),\n        unixfs,\n        size: buffer.length\n      }\n    }\n  }\n}\n\nexport default bufferImporter\n"]},"metadata":{},"sourceType":"module"}