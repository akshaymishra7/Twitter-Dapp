{"ast":null,"code":"import errCode from 'err-code';\nimport extractDataFromBlock from '../utils/extract-data-from-block.js';\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js';\nimport * as mh from 'multiformats/hashes/digest';\n\nconst rawContent = node => {\n  async function* contentGenerator() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    const {\n      offset,\n      length\n    } = validateOffsetAndLength(node.length, options.offset, options.length);\n    yield extractDataFromBlock(node, 0, offset, offset + length);\n  }\n\n  return contentGenerator;\n};\n\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${path} found in raw node ${cid}`), 'ERR_NOT_FOUND');\n  }\n\n  const buf = await mh.decode(cid.multihash.bytes);\n  return {\n    entry: {\n      type: 'identity',\n      name,\n      path,\n      cid,\n      content: rawContent(buf.digest),\n      depth,\n      size: buf.digest.length,\n      node: buf.digest\n    }\n  };\n};\n\nexport default resolve;","map":{"version":3,"sources":["C:/Users/Akshay Mishra/OneDrive/Desktop/twitter-clone-dapp/client/node_modules/ipfs-unixfs-exporter/esm/src/resolvers/identity.js"],"names":["errCode","extractDataFromBlock","validateOffsetAndLength","mh","rawContent","node","contentGenerator","options","offset","length","resolve","cid","name","path","toResolve","depth","blockstore","Error","buf","decode","multihash","bytes","entry","type","content","digest","size"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,UAApB;AACA,OAAOC,oBAAP,MAAiC,qCAAjC;AACA,OAAOC,uBAAP,MAAoC,wCAApC;AACA,OAAO,KAAKC,EAAZ,MAAoB,4BAApB;;AACA,MAAMC,UAAU,GAAGC,IAAI,IAAI;AACzB,kBAAgBC,gBAAhB,GAA+C;AAAA,QAAdC,OAAc,uEAAJ,EAAI;AAC7C,UAAM;AAACC,MAAAA,MAAD;AAASC,MAAAA;AAAT,QAAmBP,uBAAuB,CAACG,IAAI,CAACI,MAAN,EAAcF,OAAO,CAACC,MAAtB,EAA8BD,OAAO,CAACE,MAAtC,CAAhD;AACA,UAAMR,oBAAoB,CAACI,IAAD,EAAO,CAAP,EAAUG,MAAV,EAAkBA,MAAM,GAAGC,MAA3B,CAA1B;AACD;;AACD,SAAOH,gBAAP;AACD,CAND;;AAOA,MAAMI,OAAO,GAAG,OAAOC,GAAP,EAAYC,IAAZ,EAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCJ,OAAnC,EAA4CK,KAA5C,EAAmDC,UAAnD,EAA+DT,OAA/D,KAA2E;AACzF,MAAIO,SAAS,CAACL,MAAd,EAAsB;AACpB,UAAMT,OAAO,CAAC,IAAIiB,KAAJ,CAAW,iBAAiBJ,IAAM,sBAAsBF,GAAK,EAA7D,CAAD,EAAkE,eAAlE,CAAb;AACD;;AACD,QAAMO,GAAG,GAAG,MAAMf,EAAE,CAACgB,MAAH,CAAUR,GAAG,CAACS,SAAJ,CAAcC,KAAxB,CAAlB;AACA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLC,MAAAA,IAAI,EAAE,UADD;AAELX,MAAAA,IAFK;AAGLC,MAAAA,IAHK;AAILF,MAAAA,GAJK;AAKLa,MAAAA,OAAO,EAAEpB,UAAU,CAACc,GAAG,CAACO,MAAL,CALd;AAMLV,MAAAA,KANK;AAOLW,MAAAA,IAAI,EAAER,GAAG,CAACO,MAAJ,CAAWhB,MAPZ;AAQLJ,MAAAA,IAAI,EAAEa,GAAG,CAACO;AARL;AADF,GAAP;AAYD,CAjBD;;AAkBA,eAAef,OAAf","sourcesContent":["import errCode from 'err-code';\nimport extractDataFromBlock from '../utils/extract-data-from-block.js';\nimport validateOffsetAndLength from '../utils/validate-offset-and-length.js';\nimport * as mh from 'multiformats/hashes/digest';\nconst rawContent = node => {\n  async function* contentGenerator(options = {}) {\n    const {offset, length} = validateOffsetAndLength(node.length, options.offset, options.length);\n    yield extractDataFromBlock(node, 0, offset, offset + length);\n  }\n  return contentGenerator;\n};\nconst resolve = async (cid, name, path, toResolve, resolve, depth, blockstore, options) => {\n  if (toResolve.length) {\n    throw errCode(new Error(`No link named ${ path } found in raw node ${ cid }`), 'ERR_NOT_FOUND');\n  }\n  const buf = await mh.decode(cid.multihash.bytes);\n  return {\n    entry: {\n      type: 'identity',\n      name,\n      path,\n      cid,\n      content: rawContent(buf.digest),\n      depth,\n      size: buf.digest.length,\n      node: buf.digest\n    }\n  };\n};\nexport default resolve;"]},"metadata":{},"sourceType":"module"}