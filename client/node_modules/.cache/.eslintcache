[{"C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\index.jsx":"1","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\reportWebVitals.js":"2","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\App.jsx":"3","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\Sidebar.jsx":"4","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\Widgets.jsx":"5","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\Feed.jsx":"6","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\config.js":"7","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\SidebarOption.jsx":"8","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\Post.jsx":"9","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\avatar.jsx":"10","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\TweetBox.jsx":"11"},{"size":517,"mtime":1681115843300,"results":"12","hashOfConfig":"13"},{"size":375,"mtime":1681115843302,"results":"14","hashOfConfig":"13"},{"size":2508,"mtime":1681156903285,"results":"15","hashOfConfig":"13"},{"size":1494,"mtime":1681115843287,"results":"16","hashOfConfig":"13"},{"size":750,"mtime":1681115843293,"results":"17","hashOfConfig":"13"},{"size":3287,"mtime":1681115843284,"results":"18","hashOfConfig":"13"},{"size":84,"mtime":1681237691610,"results":"19","hashOfConfig":"13"},{"size":289,"mtime":1681115843289,"results":"20","hashOfConfig":"13"},{"size":1687,"mtime":1681115843286,"results":"21","hashOfConfig":"13"},{"size":3287,"mtime":1681115843295,"results":"22","hashOfConfig":"13"},{"size":3940,"mtime":1684795837124,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"1uxcv59",{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"27"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"27"},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"27"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"27"},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\index.jsx",[],[],["62","63"],"C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\reportWebVitals.js",[],[],"C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\App.jsx",[],[],"C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\Sidebar.jsx",[],[],"C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\Widgets.jsx",["64","65"],[],"import React from \"react\";\r\nimport \"./Widgets.css\";\r\nimport {\r\n  TwitterTimelineEmbed,\r\n  TwitterShareButton,\r\n  TwitterTweetEmbed,\r\n} from \"react-twitter-embed\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\n\r\nfunction Widgets() {\r\n  return (\r\n    <div className=\"widgets\">\r\n      <div className=\"widgets__input\">\r\n        <SearchIcon className=\"widgets__searchIcon\" />\r\n        <input placeholder=\"Search Twitter\" type=\"text\" />\r\n      </div>\r\n\r\n      <div className=\"widgets__widgetContainer\">\r\n        <h2>What's happening</h2>\r\n\r\n        <TwitterTimelineEmbed\r\n          sourceType=\"profile\"\r\n          screenName=\"elonmusk\"\r\n          options={{ height: 800 }}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Widgets;\r\n","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\Feed.jsx",["66","67","68","69"],[],"import React, { useState, useEffect } from \"react\";\r\nimport TweetBox from \"./TweetBox\";\r\nimport Post from \"./Post\";\r\nimport \"./Feed.css\";\r\nimport FlipMove from \"react-flip-move\";\r\nimport axios from 'axios';\r\nimport { TwitterContractAddress } from './config.js';\r\nimport {ethers} from 'ethers';\r\nimport Twitter from './utils/TwitterContract.json'\r\n\r\n\r\nfunction Feed({personal}) {\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  const getUpdatedTweets = (allTweets, address) => {\r\n    let updatedTweets = [];\r\n    // Here we set a personal flag around the tweets\r\n    for(let i=0; i<allTweets.length; i++) {\r\n      if(allTweets[i].username.toLowerCase() == address.toLowerCase()) {\r\n        let tweet = {\r\n          'id': allTweets[i].id,\r\n          'tweetText': allTweets[i].tweetText,\r\n          'isDeleted': allTweets[i].isDeleted,\r\n          'username': allTweets[i].username,\r\n          'personal': true\r\n        };\r\n        updatedTweets.push(tweet);\r\n      } else {\r\n        let tweet = {\r\n          'id': allTweets[i].id,\r\n          'tweetText': allTweets[i].tweetText,\r\n          'isDeleted': allTweets[i].isDeleted,\r\n          'username': allTweets[i].username,\r\n          'personal': false\r\n        };\r\n        updatedTweets.push(tweet);\r\n      }\r\n    }\r\n    return updatedTweets;\r\n  }\r\n\r\n  const getAllTweets = async() => {\r\n    try {\r\n      const {ethereum} = window\r\n\r\n      if(ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const TwitterContract = new ethers.Contract(\r\n          TwitterContractAddress,\r\n          Twitter.abi,\r\n          signer\r\n        )\r\n\r\n        let allTweets = await TwitterContract.getAllTweets();\r\n        setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist\");\r\n      }\r\n    } catch(error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    getAllTweets();\r\n  }, []);\r\n\r\n  const deleteTweet = key => async() => {\r\n    console.log(key);\r\n\r\n    // Now we got the key, let's delete our tweet\r\n    try {\r\n      const {ethereum} = window\r\n\r\n      if(ethereum) {\r\n        const provider = new ethers.providers.Web3Provider(ethereum);\r\n        const signer = provider.getSigner();\r\n        const TwitterContract = new ethers.Contract(\r\n          TwitterContractAddress,\r\n          Twitter.abi,\r\n          signer\r\n        );\r\n\r\n        let deleteTweetTx = await TwitterContract.deleteTweet(key, true);\r\n        let allTweets = await TwitterContract.getAllTweets();\r\n        setPosts(getUpdatedTweets(allTweets, ethereum.selectedAddress));\r\n      } else {\r\n        console.log(\"Ethereum object doesn't exist\");\r\n      }\r\n\r\n    } catch(error) {\r\n      console.log(error);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"feed\">\r\n      <div className=\"feed__header\">\r\n        <h2>Home</h2>\r\n      </div>\r\n\r\n      <TweetBox />\r\n\r\n      <FlipMove>\r\n        {posts.map((post) => (\r\n          <Post\r\n            key={post.id}\r\n            displayName={post.username}\r\n            text={post.tweetText}\r\n            personal={post.personal}\r\n            onClick={deleteTweet(post.id)}\r\n          />\r\n        ))}\r\n      </FlipMove>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Feed;\r\n","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\config.js",[],[],"C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\SidebarOption.jsx",["70"],[],"import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport \"./SidebarOption.css\";\r\n\r\nfunction SidebarOption({text, Icon, onPress}) {\r\n\r\n  return (\r\n    <div className=\"sidebarOption\">\r\n      <Icon />\r\n      <h2>{text}</h2>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarOption;\r\n","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\Post.jsx",["71"],[],"import React, { forwardRef } from \"react\";\r\nimport \"./Post.css\";\r\nimport Avatar from 'avataaars';\r\nimport { generateRandomAvatarOptions } from './avatar';\r\nimport VerifiedUserIcon from \"@material-ui/icons/VerifiedUser\";\r\nimport ChatBubbleOutlineIcon from \"@material-ui/icons/ChatBubbleOutline\";\r\nimport RepeatIcon from \"@material-ui/icons/Repeat\";\r\nimport FavoriteBorderIcon from \"@material-ui/icons/FavoriteBorder\";\r\nimport PublishIcon from \"@material-ui/icons/Publish\";\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nconst Post = forwardRef(\r\n  ({ displayName, text, personal, onClick }, ref) => {\r\n\r\n    return (\r\n      <div className=\"post\" ref={ref}>\r\n        <div className=\"post__avatar\">\r\n          <Avatar\r\n            style={{ width: '100px', height: '100px' }}\r\n            avatarStyle='Circle'\r\n            {...generateRandomAvatarOptions() }\r\n          />\r\n        </div>\r\n        <div className=\"post__body\">\r\n          <div className=\"post__header\">\r\n            <div className=\"post__headerText\">\r\n              <h3>\r\n                {displayName}{\" \"}\r\n              </h3>\r\n            </div>\r\n            <div className=\"post__headerDescription\">\r\n              <p>{text}</p>\r\n            </div>\r\n          </div>\r\n          <div className=\"post__footer\">\r\n            <ChatBubbleOutlineIcon fontSize=\"small\" />\r\n            <RepeatIcon fontSize=\"small\" />\r\n            <FavoriteBorderIcon fontSize=\"small\" />\r\n            <PublishIcon fontSize=\"small\" />\r\n            {personal ? (\r\n              <DeleteIcon fontSize=\"small\" onClick={onClick}/>\r\n            ) : (\"\")}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport default Post;\r\n","C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\avatar.jsx",[],[],"C:\\Users\\Akshay Mishra\\OneDrive\\Desktop\\twitter-clone-dapp\\client\\src\\TweetBox.jsx",["72"],[],{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","replacedBy":"76"},{"ruleId":"77","severity":1,"message":"78","line":5,"column":3,"nodeType":"79","messageId":"80","endLine":5,"endColumn":21},{"ruleId":"77","severity":1,"message":"81","line":6,"column":3,"nodeType":"79","messageId":"80","endLine":6,"endColumn":20},{"ruleId":"77","severity":1,"message":"82","line":6,"column":8,"nodeType":"79","messageId":"80","endLine":6,"endColumn":13},{"ruleId":"83","severity":1,"message":"84","line":19,"column":46,"nodeType":"85","messageId":"86","endLine":19,"endColumn":48},{"ruleId":"87","severity":1,"message":"88","line":67,"column":6,"nodeType":"89","endLine":67,"endColumn":8,"suggestions":"90"},{"ruleId":"77","severity":1,"message":"91","line":85,"column":13,"nodeType":"79","messageId":"80","endLine":85,"endColumn":26},{"ruleId":"77","severity":1,"message":"92","line":2,"column":10,"nodeType":"79","messageId":"80","endLine":2,"endColumn":18},{"ruleId":"77","severity":1,"message":"93","line":5,"column":8,"nodeType":"79","messageId":"80","endLine":5,"endColumn":24},{"ruleId":"94","severity":1,"message":"95","line":127,"column":1,"nodeType":"96","endLine":127,"endColumn":95},"no-native-reassign",["97"],"no-negated-in-lhs",["98"],"no-unused-vars","'TwitterShareButton' is defined but never used.","Identifier","unusedVar","'TwitterTweetEmbed' is defined but never used.","'axios' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllTweets'. Either include it or remove the dependency array.","ArrayExpression",["99"],"'deleteTweetTx' is assigned a value but never used.","'useState' is defined but never used.","'VerifiedUserIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},"Update the dependencies array to be: [getAllTweets]",{"range":"102","text":"103"},[1991,1993],"[getAllTweets]"]